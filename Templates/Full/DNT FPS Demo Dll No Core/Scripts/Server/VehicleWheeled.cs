// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    public partial class Main : TorqueScriptTemplate
        {
        // This file contains script methods unique to the WheeledVehicle class.  All
        // other necessary methods are contained in "../server/scripts/vehicle.cs" in
        // which the "generic" Vehicle class methods that are shared by all vehicles,
        // (flying, hover, and wheeled) can be found.

        // Parenting is in place for WheeledVehicleData to VehicleData.  This should
        // make it easier for people to simply drop in new (generic) vehicles.  All that
        // the user needs to create is a set of datablocks for the new wheeled vehicle
        // to use.  This means that no (or little) scripting should be necessary.

        [Torque_Decorations.TorqueCallBack("", "WheeledVehicleData", "onAdd", "(%this, %obj,nameSpaceDepth)", 3, 2700, false)]
        public void WheeledVehicleDataOnAdd(coWheeledVehicleData thisobj, coWheeledVehicle obj, int nameSpaceDepth)
            {
            int nsd = (nameSpaceDepth + 1);
            console.ParentExecute(thisobj, "onAdd", nsd, new string[] {thisobj, obj});
            // Setup the car with some tires & springs
            for (int i = obj.getWheelCount() - 1; i >= 0; i--)
                {
                obj.setWheelTire(i, "CheetahCarTire");
                obj.setWheelSpring(i, "CheetahCarSpring");
                obj.setWheelPowered(i, false);
                }
            // Steer with the front tires
            obj.setWheelSteering(0, 1);
            obj.setWheelSteering(1, 1);

            // Only power the two rear wheels... assuming there are only 4 wheels.
            obj.setWheelPowered(2, true);
            obj.setWheelPowered(3, true);
            }

        [Torque_Decorations.TorqueCallBack("", "WheeledVehicleData", "onCollision", "(%this, %obj, %col, %vec, %speed)", 5, 2700, false)]
        public void WheeledVehicleDataOnCollision(coWheeledVehicleData thisobj, coWheeledVehicle obj, string col, string vec, string speed)
            {
            // Collision with other objects, including items
            }

        // Used to kick the players out of the car that your crosshair is over
        [Torque_Decorations.TorqueCallBack("", "", "serverCmdcarUnmountObj", "(%client, %obj)", 2, 2700, false)]
        public void ServerCmdcarUnmountObj(coGameConnection client, coPlayer obj)
            {
            obj.unmount();
            obj.setControlObject(obj);

            TransformF ejectpos = obj.getTransform();
            ejectpos += new TransformF(0, 0, 5);
            obj.setTransform(ejectpos);

            coVehicle mvehicle = obj["mVehicle"];

            Point3F ejectvel = mvehicle.getVelocity();
            ejectvel += new Point3F(0, 0, 10);

            ejectvel = ejectvel.vectorScale(((coSimDataBlock) (obj.getDataBlock()))["mass"].AsFloat());

            obj.applyImpulse(ejectpos.MPosition, ejectvel);
            }

        // Used to flip the car over if it manages to get stuck upside down
        [Torque_Decorations.TorqueCallBack("", "", "serverCmdflipCar", "(%client)", 1, 2700, false)]
        public void ServerCmdflipCar(coGameConnection client)
            {
            coPlayer player = client["player"];

            coVehicle car = player.getControlObject();
            if (car.getClassName() != "WheeledVehicle")
                return;
            TransformF carpos = car.getTransform();
            carpos += new TransformF(0, 0, 3);
            car.setTransform(carpos);
            }

        [Torque_Decorations.TorqueCallBack("", "", "serverCmdsetPlayerControl", "(%client)", 1, 2700, false)]
        public void ServerCmdsetPlayerControl(coGameConnection client)
            {
            coPlayer player = client["player"];
            client.setControlObject(player);
            }

        [Torque_Decorations.TorqueCallBack("", "", "serverCmddismountVehicle", "(%client)", 1, 2700, false)]
        public void ServerCmddismountVehicle(coGameConnection client)
            {
            coPlayer player = client["player"];
            coVehicle car = player.getControlObject();
            coPlayer passenger = car.getMountNodeObject(0);

            ((coSimDataBlock) passenger.getDataBlock()).call("doDismount", passenger, true.AsString());
            client.setControlObject(player);
            }
        }
    }