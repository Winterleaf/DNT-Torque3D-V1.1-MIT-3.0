// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Linq;
using WinterLeaf.Classes;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "", "InitializeMessage", "()", 0, 11000, true)]
        public void InitializeMessage()
            {
            iGlobal["$SPAM_PROTECTION_PERIOD"] = 1000;
            iGlobal["$SPAM_MESSAGE_THRESHOLD"] = 4;
            iGlobal["$SPAM_PENALTY_PERIOD"] = 10000;
            sGlobal["$SPAM_MESSAGE"] = console.ColorEncode(@"\c3FLOOD PROTECTION:\cr You must wait another %1 seconds.");
            }


        [Torque_Decorations.TorqueCallBack("", "", "messageTeam", "(%team, %msgType, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10, %a11, %a12, %a13)", 16, 11000, false)]
        public void MessageTeam(string team, string msgType, string msgString, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "", string a11 = "", string a12 = "", string a13 = "")
            {
            foreach (coGameConnection clientid in ClientGroup.Where(clientid => ((coGameConnection) clientid)["team"] == team))
                MessageClient(clientid, msgType, msgString, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            }

        [Torque_Decorations.TorqueCallBack("", "", "messageTeamExcept", "(%client, %msgType, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10, %a11, %a12, %a13)", 16, 11000, false)]
        public void MessageTeamExcept(coGameConnection client, string msgType, string msgString, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "", string a11 = "", string a12 = "", string a13 = "")
            {
            string team = client["team"];
            foreach (coGameConnection clientid in ClientGroup.Where(clientid => client["team"] == team && (clientid != client)))
                MessageClient(clientid, msgType, msgString, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            }


        [Torque_Decorations.TorqueCallBack("", "", "messageAllExcept", "(%client, %team, %msgtype, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10, %a11, %a12, %a13)", 17, 11000, false)]
        public void MessageAllExcept(string client, string team, string msgtype, string msgstring, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "", string a11 = "", string a12 = "", string a13 = "")
            {
            foreach (coGameConnection recipient in ClientGroup.Where(recipient => ((coGameConnection) recipient != client) && ((coGameConnection) recipient)["team"] != team))
                MessageClient(recipient, msgtype, msgstring, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            }

        //---------------------------------------------------------------------------
        // Server side client chat'n
        //---------------------------------------------------------------------------
        [Torque_Decorations.TorqueCallBack("", "GameConnection", "spamMessageTimeout", "%this", 1, 11000, false)]
        public void GameConnectSpamMessageTimeOut(coGameConnection thisobj)
            {
            if (thisobj["spamMessageCount"].AsInt() > 0)
                thisobj["spamMessageCount"] = (thisobj["spamMessageCount"].AsInt() - 1).AsString();
            }

        [Torque_Decorations.TorqueCallBack("", "GameConnection", "spamReset", "%this", 1, 11000, false)]
        public void GameConnectionspamReset(coGameConnection thisobj)
            {
            thisobj["isSpamming"] = false.AsString();
            }

        [Torque_Decorations.TorqueCallBack("", "", "spamAlert", "%client", 1, 11000, false)]
        public bool SpamAlert(coGameConnection client)
            {
            if (!bGlobal["$Pref::Server::FloodProtectionEnabled"])
                return false;

            if (!client["isSpamming"].AsBool() && client["spamMessageCount"].AsInt() >= iGlobal["$SPAM_MESSAGE_THRESHOLD"])
                {
                console.error("Client " + client + " is spamming, message count = " + client["spamMessageCount"]);
                client["spamProtectStart"] = console.getSimTime().AsString();
                client["isSpamming"] = true.AsString();
                client.schedule(console.GetVarString("$SPAM_PENALTY_PERIOD"), "spamReset");
                }

            if (client["isSpamming"].AsBool())
                {
                double wait = Math.Floor((console.GetVarInt("$SPAM_PENALTY_PERIOD") - (console.getSimTime() - client["spamProtectStart"].AsDouble())/1000));
                MessageClient(client, "", sGlobal["$SPAM_MESSAGE"], wait.AsString());
                return true;
                }
            client["spamMessageCount"] = (client["spamMessageCount"].AsInt() + 1).AsString();

            client.schedule(sGlobal["$SPAM_PROTECTION_PERIOD"], "spamMessageTimeout");
            return false;
            }

        [Torque_Decorations.TorqueCallBack("", "", "chatMessageClient", "%client, %sender, %voiceTag, %voicePitch, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10 ", 15, 11000, false)]
        public void ChatMessageClient(coGameConnection client, coGameConnection sender, string voiceTag, string voicePitch, string msgString, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "")
            {
            if (console.isObject(client))
                if (!client["muted[" + sender + "]"].AsBool())
                    console.commandToClient(client, "ChatMessage", new string[] {sender, voiceTag, voicePitch, console.addTaggedString(msgString), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10});
            }

        [Torque_Decorations.TorqueCallBack("", "", "chatMessageTeam", " %sender, %team, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10", 13, 11000, false)]
        public void ChatMessageTeam(coGameConnection sender, string team, string msgString, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "")
            {
            if ((msgString.Trim().Length == 0) || SpamAlert(sender))
                return;

            foreach (coGameConnection obj in ClientGroup.Where(obj => ((coGameConnection) obj)["team"] == sender["team"]))
                ChatMessageClient(obj, sender, console.GetVarString(string.Format("{0}.voiceTag", sender)), console.GetVarString(string.Format("{0}.voicePitch", sender)), msgString, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
            }

        [Torque_Decorations.TorqueCallBack("", "", "chatMessageAll", " %sender, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10", 12, 11000, false)]
        public void ChatMessageAll(coGameConnection sender, string msgString, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "")
            {
            if ((msgString.Trim().Length == 0) || SpamAlert(sender))
                return;
            foreach (coGameConnection obj in ClientGroup)
                {
                if (sender["team"].AsInt() != 0)
                    ChatMessageClient(obj, sender, sender["voiceTag"], sender["voicePitch"], msgString, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

                else
                    {
                    if (obj["team"] == sender["team"])
                        ChatMessageClient(obj, sender, sender["voiceTag"], sender["voicePitch"], msgString, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                    }
                }
            }


        [Torque_Decorations.TorqueCallBack("", "", "messageClient", "", 16, 11000, false)]
        public void MessageClient(coGameConnection client, string msgtype, string msgstring, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "", string a11 = "", string a12 = "", string a13 = "")
            {
            string function = console.addTaggedString("ServerMessage");


            string tmsgtype = "";
            if (msgtype.Length > 0)
                tmsgtype = (byte) msgtype[0] == (byte) 1 ? msgtype : console.addTaggedString(msgtype);
            string tmsgstring = "";
            if (msgstring.Length > 0)
                tmsgstring = (byte) msgstring[0] == (byte) 1 ? msgstring : console.addTaggedString(msgstring);

            //console.error("Sending " + client + " message '" + console.getTaggedString(function) + "' - ' " + console.getTaggedString(tmsgtype) + "' - '" + tmsgstring + "'");
            if (console.isObject(client))
                console.commandToClient(client, function, new[] {tmsgtype, tmsgstring, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13});
            }

        [Torque_Decorations.TorqueCallBack("", "", "messageAll", "", 15, 11000, false)]
        public void MessageAll(string msgtype, string msgstring, string a1 = "", string a2 = "", string a3 = "", string a4 = "", string a5 = "", string a6 = "", string a7 = "", string a8 = "", string a9 = "", string a10 = "", string a11 = "", string a12 = "", string a13 = "")
            {
            foreach (coGameConnection clientid in ClientGroup)
                {
                MessageClient(clientid, msgtype, msgstring, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                }

            //foreach (coGameConnection clientid in ClientGroup.Where(clientid => clientid != 0))
            //    {
            //    MessageClient(clientid, msgtype, msgstring, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            //    }
            }
        }
    }