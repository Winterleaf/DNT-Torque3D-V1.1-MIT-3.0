// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "CheetahCar", "onAdd", "(%this, %obj,nameSpaceDepth)", 3, 2800, false)]
        public void CheetahCarOnAdd(coWheeledVehicleData datablock, coWheeledVehicle vehicle, string nameSpaceDepth)
            {
            int nsd = (nameSpaceDepth.AsInt() + 1);
            console.ParentExecute(datablock, "onAdd", nsd, new string[] { datablock, vehicle.ID });
            vehicle.setWheelTire(0, "CheetahCarTire");
            vehicle.setWheelTire(1, "CheetahCarTire");
            vehicle.setWheelTire(2, "CheetahCarTireRear");
            vehicle.setWheelTire(3, "CheetahCarTireRear");


            // Setup the car with some tires & springs
            for (int i = vehicle.getWheelCount() - 1; i >= 0; i--)
                {
                vehicle.setWheelPowered(i, true);
                vehicle.setWheelSpring(i, "CheetahCarSpring");
                }
            // Steer with the front tires
            vehicle.setWheelSteering(0, 1);
            vehicle.setWheelSteering(1, 1);


            // Add tail lights
            Torque_Class_Helper tc = new Torque_Class_Helper("PointLight", "");
            tc.Props.Add("radius", "1");
            tc.Props.Add("isEnabled", "0");
            tc.Props.Add("color", @"""1 0 0.141176 1""");
            tc.Props.Add("brightness", "2");
            tc.Props.Add("castShadows", "1");
            tc.Props.Add("priority", "1");
            tc.Props.Add("animate", "0");
            tc.Props.Add("animationPeriod", "1");
            tc.Props.Add("animationPhase", "1");
            tc.Props.Add("flareScale", "1");
            tc.Props.Add("attenuationRatio", @"""0 1 1""");
            tc.Props.Add("shadowType", @"""DualParaboloidSinglePass""");
            tc.Props.Add("texSize", "512");
            tc.Props.Add("overDarkFactor", @"""2000 1000 500 100""");
            tc.Props.Add("shadowDistance", "400");
            tc.Props.Add("shadowSoftness", "0.15");
            tc.Props.Add("numSplits", "1");
            tc.Props.Add("logWeight", "0.91");
            tc.Props.Add("fadeStartDistance", "0");
            tc.Props.Add("lastSplitTerrainOnly", "0");
            tc.Props.Add("representedInLightmap", "0");
            tc.Props.Add("shadowDarkenColor", @"""0 0 0 -1""");
            tc.Props.Add("includeLightmappedGeometryInShadow", "0");
            tc.Props.Add("rotation", @"""1 0 0 0 """);
            tc.Props.Add("canSave", "1");
            tc.Props.Add("canSaveDynamicFields", "1");
            tc.Props.Add("splitFadeDistances", @"""10 20 30 40""");


            vehicle["rightBrakeLight"] = ((coPointLight)tc.Create());
            vehicle["leftBrakeLight"] = ((coPointLight)tc.Create());
            vehicle["inv[BulletAmmo]"] = "1000";

            // Mount a ShapeBaseImageData
            vehicle.mountImage("TurretImage", datablock["turretSlot"].AsInt(), true, "");

            // Mount the brake lights
            vehicle.mountObject(vehicle["rightBrakeLight"], datablock["rightBrakeSlot"].AsInt(), new TransformF(true));
            vehicle.mountObject(vehicle["leftbrakelight"], datablock["leftBrakeSlot"].AsInt(), new TransformF(true));
            }


        [Torque_Decorations.TorqueCallBack("", "CheetahCar", "onRemove", "(%this, %obj,nameSpaceDepth)", 3, 2800, false)]
        public void CheetahCarOnRemove(coWheeledVehicleData datablock, coWheeledVehicle vehicle, string nameSpaceDepth)
            {
            int nsd = (nameSpaceDepth.AsInt() + 1);
            console.ParentExecute(datablock, "onRemove", nsd, new[] { datablock.ID, vehicle.ID });
            if ((vehicle["rightBrakeLight"]).isObject())
                (vehicle["rightBrakeLight"]).delete();
            if ((vehicle["leftBrakeLight"]).isObject())
                (vehicle["leftBrakeLight"]).delete();
            if ((vehicle["turret"]).isObject())
                (vehicle["turret"]).delete();
            }

        [Torque_Decorations.TorqueCallBack("", "", "serverCmdtoggleBrakeLights", "(%client)", 1, 2800, false)]
        public void CheetahCarServerCmdtoggleBrakeLights(coGameConnection client)
            {
            coPlayer player = client["player"];
            //Remember to pay attention to what type of object your looking at.
            coWheeledVehicle vehicle = player.getControlObject().AsString();
            if (vehicle.getClassName() != "WheeledVehicle")
                return;

            if (vehicle["rightBrakeLight.isEnabled"].AsBool())
                {
                ((coPointLight)vehicle["rightBrakeLight"]).setLightEnabled(false);
                ((coPointLight)vehicle["leftBrakeLight"]).setLightEnabled(false);
                }
            else
                {
                ((coPointLight)vehicle["rightBrakeLight"]).setLightEnabled(true);
                ((coPointLight)vehicle["leftBrakeLight"]).setLightEnabled(true);
                }
            }

        // Callback invoked when an input move trigger state changes when the CheetahCar
        //  is the control object
        [Torque_Decorations.TorqueCallBack("", "CheetahCar", "onTrigger", "(%this, %obj, %index, %state)", 4, 2800, false)]
        public void CheetahCarOnTrigger(coWheeledVehicleData datablock, coWheeledVehicle vehicle, int index, bool state)
            {
            // Pass trigger states on to TurretImage (to fire weapon)
            switch (index)
                {
                case 0:
                    vehicle.setImageTrigger(datablock["turretSlot"].AsInt(), state);
                    break;
                case 1:
                    vehicle.setImageAltTrigger(datablock["turretSlot"].AsInt(), state);
                    break;
                }
            }

        [Torque_Decorations.TorqueCallBack("", "CheetahCar", "onMount", "(%this, %obj, %slot)", 3, 2800, false)]
        public void CheetahCarOnMount(coWheeledVehicleData datablock, coWheeledVehicle vehicle, int slot)
            {
            // Load the gun
            vehicle.setImageAmmo(slot, true);
            }
        }
    }