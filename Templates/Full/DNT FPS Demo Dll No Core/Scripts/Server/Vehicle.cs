// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    //-----------------------------------------------------------------------------
    // Torque
    // Copyright GarageGames, LLC 2011
    //-----------------------------------------------------------------------------

    // Parenting is in place for WheeledVehicleData to VehicleData.  This should
    // make it easier for people to simply drop in new (generic) vehicles.  All that
    // the user needs to create is a set of datablocks for the new wheeled vehicle
    // to use.  This means that no (or little) scripting should be necessary.

    // Special, or unique vehicles however will still require some scripting.  They
    // may need to override the onAdd() function in order to mount weapons,
    // differing tires/springs, etc., almost everything else is taken care of in the
    // WheeledVehicleData and VehicleData methods.  This helps us by not having to
    // duplicate the same code for every new vehicle.

    // In theory this would work for HoverVehicles and FlyingVehicles also, but
    // hasn't been tested or fully implemented for those classes -- yet.
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "VehicleData", "onAdd", "(%this, %obj)", 2, 2600, false)]
        public void VehicleDataOnAdd(coVehicleData thisobj, coVehicle obj)
            {
            obj.setRechargeRate(thisobj["rechargeRate"].AsFloat());
            obj.setEnergyLevel(thisobj["MaxEnergy"].AsFloat());
            obj.setRepairRate(0);

                {
                if (obj["mountable"].AsBool() || (obj["mountable"] == ""))
                    VehicleDataIsMountable(thisobj, obj, true);
                else
                    VehicleDataIsMountable(thisobj, obj, false);
                }


            string nametag = thisobj["nameTag"];


            if (nametag.Trim() != "")
                obj.setShapeName(nametag);
            }

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "onRemove", "(%this, %obj)", 2, 2600, false)]
        public void VehicleDataOnRemove(coVehicleData thisobj, coVehicle obj)
            {
            // if there are passengers/driver, kick them out
            for (int i = 0; i < ((coVehicleData) obj.getDataBlock())["numMountPoints"].AsInt(); i++)
                {
                coPlayer passenger = obj.getMountNodeObject(i);
                if (passenger != "0")
                    passenger.call("doDismount", true.AsString());
                }
            }

        // ----------------------------------------------------------------------------
        // Vehicle player mounting and dismounting
        // ----------------------------------------------------------------------------

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "isMountable", "(%this, %obj, %val)", 3, 2600, false)]
        public void VehicleDataIsMountable(coVehicleData thisobj, coVehicle obj, bool val)
            {
            obj["mountable"] = val.AsString();
            }

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "mountPlayer", "(%this, %vehicle, %player)", 3, 2600, false)]
        public void VehicleDataMountPlayer(coVehicleData thisobj, coVehicle vehicle, coPlayer player)
            {
            if (!vehicle.isObject() || vehicle.getDamageState() == "Destroyed")
                return;
            player.startFade(1000, 0, true);
            thisobj.schedule("1000", "setMountVehicle", vehicle, player);
            player.schedule("1500", "startFade", "1000", "0", "false");
            }

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "setMountVehicle", "(%this, %vehicle, %player)", 3, 2600, false)]
        public void VehicleDataSetMountVehicle(coVehicleData thisobj, coVehicle vehicle, coPlayer player)
            {
            if (!vehicle.isObject() || vehicle.getDamageState() == "Destroyed")
                return;

            int node = VehicleDataFindEmptySeat(thisobj, vehicle, player);
            if (node == -1)
                return;
            vehicle.mountObject(player, node, new TransformF(true));
            player["mVehicle"] = vehicle;
            }

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "findEmptySeat", "(%this, %vehicle, %player)", 3, 2600, false)]
        public int VehicleDataFindEmptySeat(coVehicleData thisobj, coVehicle vehicle, coPlayer player)
            {
            for (int i = 0; i < thisobj["numMountPoints"].AsInt(); i++)
                {
                int node = vehicle.getMountNodeObject(i);
                if (node != 0)
                    return i;
                }
            return -1;
            }

        [Torque_Decorations.TorqueCallBack("", "VehicleData", "switchSeats", "(%this, %vehicle, %player)", 3, 2600, false)]
        public int VehicleDataSwitchSeats(coVehicleData thisobj, coVehicle vehicle, coPlayer player)
            {
            for (int i = 0; i < thisobj["numMountPoints"].AsInt(); i++)
                {
                int node = vehicle.getMountNodeObject(i);
                if (node == player || node > 0)
                    continue;
                if (node == 0)
                    return i;
                }
            return -1;
            }
        }
    }