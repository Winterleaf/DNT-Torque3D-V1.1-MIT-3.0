// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using WinterLeaf.Classes;
using WinterLeaf.tsObjects;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        //-----------------------------------------------------------------------------
        // Torque
        // Copyright GarageGames, LLC 2011
        //-----------------------------------------------------------------------------

        //-----------------------------------------------------------------------------
        // Hook into the client update messages to maintain our player list and scores.
        //-----------------------------------------------------------------------------

        [Torque_Decorations.TorqueCallBack("", "", "playerlist_defaults_load", "()", 0, 3000, true)]
        public void PlayerlistDefaultsLoad()
            {
            console.Eval("addMessageCallback('MsgClientJoin', handleClientJoin);");
            console.Eval("addMessageCallback('MsgClientDrop', handleClientDrop);");
            console.Eval("addMessageCallback('MsgClientScoreChanged', handleClientScoreChanged);");
            }

        [Torque_Decorations.TorqueCallBack("", "", "handleClientJoin", "(%msgType, %msgString, %clientName, %clientId, %guid, %score, %kills, %deaths, %isAI, %isAdmin, %isSuperAdmin)", 11, 3000, false)]
        public void HandleClientJoin(string msgType, string msgString, string ClientName, coGameConnection clientID, string guid, string score, string kills, string deaths, string isAI, string isAdmin, string isSuperAdmin)
            {
            PlayerListGuiUpdate("PlayerListGui", clientID, Util.detag(ClientName), isSuperAdmin, isAdmin, isAI, score, kills, deaths);
            }

        [Torque_Decorations.TorqueCallBack("", "", "handleClientDrop", "(%msgType, %msgString, %clientName, %clientId)", 4, 3000, false)]
        public void HandleClientDrop(string msgType, string msgString, string clientName, coGameConnection clientId)
            {
            PlayerListGuiRemove("PlayerListGui", clientId);
            }

        [Torque_Decorations.TorqueCallBack("", "", "handleClientScoreChanged", "(%msgType, %msgString, %score, %kills, %deaths, %clientId)", 6, 3000, false)]
        public void HandleClientScoreChanged(string msgType, string msgString, string score, string kills, string deaths, coGameConnection clientId)
            {
            PlayerListGuiUpdateScore("PlayerListGui", clientId, score, kills, deaths);

            console.print(string.Format(" score:{0} kills:{1} deaths: {2}", score, kills, deaths));
            }

        // ----------------------------------------------------------------------------
        // GUI methods
        // ----------------------------------------------------------------------------
        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "update", "(%this, %clientId, %name, %isSuperAdmin, %isAdmin, %isAI, %score, %kills, %deaths)", 9, 3000, false)]
        public void PlayerListGuiUpdate(string thisobj, coGameConnection clientId, string name, string isSuperAdmin, string isAdmin, string isAI, string score, string kills, string deaths)
            {
            // Build the row to display.  The name can have ML control tags, including
            // color and font.  Since we're not using an ML control here, we need to
            // strip them off.

            string tag = isSuperAdmin.AsBool() ? "[Super]" : (isAdmin.AsBool() ? "[Admin]" : (isAI.AsBool() ? "[Bot]" : ""));

            string text = string.Format("{0} {1}\t{2}\t{3}\t{4}", Util.StripMLControlChars(name), tag, score, kills, deaths);
            // Update or add the player to the control

            coGuiTextListCtrl PlayerListGuiList = "PlayerListGuiList";

            if (clientId == -1)
                PlayerListGuiList.addRow(clientId, text, -1);
            else
                PlayerListGuiList.setRowById(clientId, text);

            // Sorts by score

            PlayerListGuiList.sortNumerical(1, false);
            PlayerListGuiList.clearSelection();
            }

        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "updateScore", "(%this, %clientId, %score, %kills, %deaths)", 5, 3000, false)]
        public void PlayerListGuiUpdateScore(string thisobj, coGameConnection clientId, string score, string kills, string deaths)
            {
            coGuiTextListCtrl PlayerListGuiList = "PlayerListGuiList";

            string text = PlayerListGuiList.getRowTextById(clientId);

            //Since I'm lazy and I don't feel like writing a csharp function...

            text = Util.setField(text, 1, score);
            text = Util.setField(text, 2, kills);
            text = Util.setField(text, 3, deaths);

            PlayerListGuiList.setRowById(clientId, text);

            // Sorts by score
            PlayerListGuiList.sortNumerical(1, false);
            PlayerListGuiList.clearSelection();
            }

        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "remove", "(%this, %clientId)", 2, 3000, false)]
        public void PlayerListGuiRemove(string thisobj, coGameConnection clientID)
            {
            (( coGuiTextListCtrl)"PlayerListGuiList").removeRowById(clientID);
            }

        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "toggle", "(%this)", 1, 3000, false)]
        public void PlayerListGuiToggle(coGuiControl thisobj)
            {
            if (thisobj.isAwake())
                (( coGuiCanvas)"Canvas").popDialog(thisobj);
            else
                ((coGuiCanvas)"Canvas").pushDialog(thisobj);
            }

        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "clear", "(%this)", 1, 3000, false)]
        public void PlayerListGuiClear(string thisobj)
            {
            (( coGuiTextListCtrl)"PlayerListGuiList").clear();
            }

        [Torque_Decorations.TorqueCallBack("", "PlayerListGui", "zeroScores", "(%this)", 1, 3000, false)]
        public void PlayerListGuiZeroScores(string thisobj)
            {
            coGuiTextListCtrl PlayerListGuiList = "PlayerListGuiList";

            for (int i = 0; i < PlayerListGuiList.rowCount(); i++)
                {
                string text = PlayerListGuiList.getRowText(i);
                text = Util.setField(text, 1, "0");
                text = Util.setField(text, 2, "0");
                text = Util.setField(text, 3, "0");
                PlayerListGuiList.setRowById(PlayerListGuiList.getRowId(i), text);
                }
            PlayerListGuiList.clearSelection();
            }
        }
    }