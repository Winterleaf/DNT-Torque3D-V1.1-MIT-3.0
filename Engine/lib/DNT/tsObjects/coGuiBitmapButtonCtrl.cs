
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiBitmapButtonCtrl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiBitmapButtonCtrl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiBitmapButtonCtrl))]
    public class coGuiBitmapButtonCtrl: coGuiButtonCtrl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiBitmapButtonCtrl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiBitmapButtonCtrl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiBitmapButtonCtrl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiBitmapButtonCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiBitmapButtonCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiBitmapButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiBitmapButtonCtrl(string ts)
            {
            return new coGuiBitmapButtonCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiBitmapButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiBitmapButtonCtrl(int ts)
            {
            return new coGuiBitmapButtonCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiBitmapButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiBitmapButtonCtrl(uint ts)
            {
            return new coGuiBitmapButtonCtrl(ts);
            }
/// <summary>
/// If true, the control's extents will be set to match the bitmap's extents when setting the bitmap.\n     The bitmap extents will always be taken from the default/normal bitmap (in case the extents of the various      bitmaps do not match up.) 
/// </summary>
public bool autoFitExtents
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".autoFitExtents").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".autoFitExtents", value.AsString());
          }
       }
/// <summary>
/// Texture file to display on this button.\n     If useStates is false, this will be the file that renders on the control. Otherwise, this will      specify the default texture name to which the various state and modifier suffixes are appended      to find the per-state and per-modifier (if enabled) textures. 
/// </summary>
public String bitmap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bitmap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bitmap", value.AsString());
          }
       }
/// <summary>
/// Behavior for fitting the bitmap to the control extents.\n     If set to 'Stretched', the bitmap will be stretched both verticall and horizontally to fit inside      the control's extents.\n\n     If set to 'Centered', the bitmap will stay at its original resolution centered in the control's      rectangle (getting clipped if the control is smaller than the texture). 
/// </summary>
public GuiBitmapButtonCtrl__BitmapMode bitmapMode
       {
       get
          {          return (GuiBitmapButtonCtrl__BitmapMode)Enum.Parse(typeof(GuiBitmapButtonCtrl__BitmapMode), dnTorque.self.GetVar(_mSimObjectId + ".bitmapMode"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bitmapMode", value.ToString());
          }
       }
/// <summary>
/// If true, per-modifier button functionality is enabled.\n     @ref guibitmapbutton_modifiers 
/// </summary>
public bool useModifiers
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useModifiers").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useModifiers", value.AsString());
          }
       }
/// <summary>
/// If true, per-mouse state button functionality is enabled.\n     Defaults to true.\n\n     If you do not use per-state images on this button set this to false to speed up the loading process      by inhibiting searches for the individual images. 
/// </summary>
public bool useStates
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useStates").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useStates", value.AsString());
          }
       }
/// <summary>
/// Set the bitmap to show on the button.
///    @param path Path to the texture file in any of the supported formats. )
/// 
/// </summary>
public  void setBitmap(string path){
TorqueScriptTemplate.m_ts.fnGuiBitmapButtonCtrl_setBitmap(_mSimObjectId, path);
}
}}
