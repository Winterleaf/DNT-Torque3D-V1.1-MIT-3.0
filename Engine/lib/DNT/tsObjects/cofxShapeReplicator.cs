
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercofxShapeReplicator : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new cofxShapeReplicator(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercofxShapeReplicator))]
    public class cofxShapeReplicator: coSceneObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxShapeReplicator(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxShapeReplicator(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxShapeReplicator(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(cofxShapeReplicator ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(cofxShapeReplicator ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( cofxShapeReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxShapeReplicator(string ts)
            {
            return new cofxShapeReplicator(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( cofxShapeReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxShapeReplicator(int ts)
            {
            return new cofxShapeReplicator(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( cofxShapeReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxShapeReplicator(uint ts)
            {
            return new cofxShapeReplicator(ts);
            }
/// <summary>
/// Align shapes to surface normal when set. 
/// </summary>
public bool AlignToTerrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AlignToTerrain").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AlignToTerrain", value.AsString());
          }
       }
/// <summary>
/// Maximum surface angle allowed for shape instances. 
/// </summary>
public int AllowedTerrainSlope
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowedTerrainSlope").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowedTerrainSlope", value.AsString());
          }
       }
/// <summary>
/// Shapes will be placed on Static shapes when set. 
/// </summary>
public bool AllowOnStatics
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnStatics").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnStatics", value.AsString());
          }
       }
/// <summary>
/// Shapes will be placed on terrain when set. 
/// </summary>
public bool AllowOnTerrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnTerrain").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnTerrain", value.AsString());
          }
       }
/// <summary>
/// Shapes will be placed on/under water when set. 
/// </summary>
public bool AllowOnWater
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnWater").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnWater", value.AsString());
          }
       }
/// <summary>
/// Shapes will be placed on water when set. Requires AllowOnWater. 
/// </summary>
public bool AllowWaterSurface
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowWaterSurface").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowWaterSurface", value.AsString());
          }
       }
/// <summary>
/// Replicated shapes are hidden when set to true. 
/// </summary>
public bool HideReplications
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".HideReplications").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".HideReplications", value.AsString());
          }
       }
/// <summary>
/// Placement area inner radius on the X axis 
/// </summary>
public int InnerRadiusX
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".InnerRadiusX").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".InnerRadiusX", value.AsString());
          }
       }
/// <summary>
/// Placement area inner radius on the Y axis 
/// </summary>
public int InnerRadiusY
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".InnerRadiusY").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".InnerRadiusY", value.AsString());
          }
       }
/// <summary>
/// Allow physics interactions with shapes. 
/// </summary>
public bool Interactions
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".Interactions").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".Interactions", value.AsString());
          }
       }
/// <summary>
/// Offset shapes by this amount vertically. 
/// </summary>
public int OffsetZ
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OffsetZ").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OffsetZ", value.AsString());
          }
       }
/// <summary>
/// Placement area outer radius on the X axis 
/// </summary>
public int OuterRadiusX
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OuterRadiusX").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OuterRadiusX", value.AsString());
          }
       }
/// <summary>
/// Placement area outer radius on the Y axis 
/// </summary>
public int OuterRadiusY
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OuterRadiusY").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OuterRadiusY", value.AsString());
          }
       }
/// <summary>
/// Height of the placement ring in world units. 
/// </summary>
public int PlacementAreaHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".PlacementAreaHeight").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".PlacementAreaHeight", value.AsString());
          }
       }
private ColorF _PlacementColour = null;
/// <summary>
/// Color of the placement ring. 
/// </summary>
public ColorF PlacementColour
       {
       get
          {
          if (_PlacementColour!=null)
              _PlacementColour.DetachAllEvents();
           _PlacementColour = dnTorque.self.GetVar(_mSimObjectId + ".PlacementColour").AsColorF();
          _PlacementColour.OnChangeNotification +=_PlacementColour_OnChangeNotification;
          return _PlacementColour;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".PlacementColour", value.AsString());
          }
       }
void _PlacementColour_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".PlacementColour", e.NewValue);
       }
/// <summary>
/// Random seed for shape placement. 
/// </summary>
public int Seed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".Seed").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".Seed", value.AsString());
          }
       }
/// <summary>
/// Maximum shape instance count. 
/// </summary>
public int ShapeCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ShapeCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeCount", value.AsString());
          }
       }
/// <summary>
/// Filename of shape to replicate. 
/// </summary>
public String ShapeFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ShapeFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeFile", value.AsString());
          }
       }
/// <summary>
/// Number of times to try placing a shape instance before giving up. 
/// </summary>
public int ShapeRetries
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ShapeRetries").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeRetries", value.AsString());
          }
       }
private Point3F _ShapeRotateMax = null;
/// <summary>
/// Maximum shape rotation angles. 
/// </summary>
public Point3F ShapeRotateMax
       {
       get
          {
          if (_ShapeRotateMax!=null)
              _ShapeRotateMax.DetachAllEvents();
           _ShapeRotateMax = dnTorque.self.GetVar(_mSimObjectId + ".ShapeRotateMax").AsPoint3F();
          _ShapeRotateMax.OnChangeNotification +=_ShapeRotateMax_OnChangeNotification;
          return _ShapeRotateMax;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeRotateMax", value.AsString());
          }
       }
void _ShapeRotateMax_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".ShapeRotateMax", e.NewValue);
       }
private Point3F _ShapeRotateMin = null;
/// <summary>
/// Minimum shape rotation angles.
/// </summary>
public Point3F ShapeRotateMin
       {
       get
          {
          if (_ShapeRotateMin!=null)
              _ShapeRotateMin.DetachAllEvents();
           _ShapeRotateMin = dnTorque.self.GetVar(_mSimObjectId + ".ShapeRotateMin").AsPoint3F();
          _ShapeRotateMin.OnChangeNotification +=_ShapeRotateMin_OnChangeNotification;
          return _ShapeRotateMin;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeRotateMin", value.AsString());
          }
       }
void _ShapeRotateMin_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".ShapeRotateMin", e.NewValue);
       }
private Point3F _ShapeScaleMax = null;
/// <summary>
/// Maximum shape scale. 
/// </summary>
public Point3F ShapeScaleMax
       {
       get
          {
          if (_ShapeScaleMax!=null)
              _ShapeScaleMax.DetachAllEvents();
           _ShapeScaleMax = dnTorque.self.GetVar(_mSimObjectId + ".ShapeScaleMax").AsPoint3F();
          _ShapeScaleMax.OnChangeNotification +=_ShapeScaleMax_OnChangeNotification;
          return _ShapeScaleMax;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeScaleMax", value.AsString());
          }
       }
void _ShapeScaleMax_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".ShapeScaleMax", e.NewValue);
       }
private Point3F _ShapeScaleMin = null;
/// <summary>
/// Minimum shape scale. 
/// </summary>
public Point3F ShapeScaleMin
       {
       get
          {
          if (_ShapeScaleMin!=null)
              _ShapeScaleMin.DetachAllEvents();
           _ShapeScaleMin = dnTorque.self.GetVar(_mSimObjectId + ".ShapeScaleMin").AsPoint3F();
          _ShapeScaleMin.OnChangeNotification +=_ShapeScaleMin_OnChangeNotification;
          return _ShapeScaleMin;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShapeScaleMin", value.AsString());
          }
       }
void _ShapeScaleMin_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".ShapeScaleMin", e.NewValue);
       }
/// <summary>
/// Draw placement rings when set to true. 
/// </summary>
public bool ShowPlacementArea
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ShowPlacementArea").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShowPlacementArea", value.AsString());
          }
       }
private Point3F _TerrainAlignment = null;
/// <summary>
/// Surface normals will be multiplied by these values when AlignToTerrain is enabled. 
/// </summary>
public Point3F TerrainAlignment
       {
       get
          {
          if (_TerrainAlignment!=null)
              _TerrainAlignment.DetachAllEvents();
           _TerrainAlignment = dnTorque.self.GetVar(_mSimObjectId + ".TerrainAlignment").AsPoint3F();
          _TerrainAlignment.OnChangeNotification +=_TerrainAlignment_OnChangeNotification;
          return _TerrainAlignment;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".TerrainAlignment", value.AsString());
          }
       }
void _TerrainAlignment_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".TerrainAlignment", e.NewValue);
       }
}}
