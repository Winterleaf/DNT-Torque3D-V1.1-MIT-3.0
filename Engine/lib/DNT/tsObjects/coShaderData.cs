
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoShaderData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coShaderData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoShaderData))]
    public class coShaderData: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShaderData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShaderData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShaderData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coShaderData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coShaderData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coShaderData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShaderData(string ts)
            {
            return new coShaderData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coShaderData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShaderData(int ts)
            {
            return new coShaderData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coShaderData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShaderData(uint ts)
            {
            return new coShaderData(ts);
            }
/// <summary>
/// @brief String of case-sensitive defines passed to the shader compiler.\n\n   The string should be delimited by a semicolon, tab, or newline character.      @tsexample\n    singleton ShaderData( FlashShader )\n     {\n       DXVertexShaderFile 	= \shaders/common/postFx/flashV.hlsl\;\n       DXPixelShaderFile 	= \shaders/common/postFx/flashP.hlsl\;\n\n        //Define setting the color of WHITE_COLOR.\n       defines = \WHITE_COLOR=float4(1.0,1.0,1.0,0.0)\;\n\n       pixVersion = 2.0\n     }\n   @endtsexample\n\n   
/// </summary>
public String defines
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".defines").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".defines", value.AsString());
          }
       }
/// <summary>
/// @brief %Path to the DirectX pixel shader file to use for this ShaderData.\n\n	  It must contain only one program and no vertex shader, just the pixel 	  shader. It can be either an HLSL or assembly level shader. HLSL's 	  must have a filename extension of .hlsl, otherwise its assumed to be an assembly file.
/// </summary>
public String DXPixelShaderFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".DXPixelShaderFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".DXPixelShaderFile", value.AsString());
          }
       }
/// <summary>
/// @brief %Path to the DirectX vertex shader file to use for this ShaderData.\n\n	  It must contain only one program and no pixel shader, just the vertex shader.	  It can be either an HLSL or assembly level shader. HLSL's must have a 	  filename extension of .hlsl, otherwise its assumed to be an assembly file.
/// </summary>
public String DXVertexShaderFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".DXVertexShaderFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".DXVertexShaderFile", value.AsString());
          }
       }
/// <summary>
/// @brief %Path to an OpenGL pixel shader file to use for this ShaderData.\n\n	  It must contain only one program and no vertex shader, just the pixel 	  shader.
/// </summary>
public String OGLPixelShaderFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OGLPixelShaderFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OGLPixelShaderFile", value.AsString());
          }
       }
/// <summary>
/// @brief %Path to an OpenGL vertex shader file to use for this ShaderData.\n\n	  It must contain only one program and no pixel shader, just the vertex shader.
/// </summary>
public String OGLVertexShaderFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OGLVertexShaderFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OGLVertexShaderFile", value.AsString());
          }
       }
/// <summary>
/// @brief Indicates target level the shader should be compiled.\n\n	  Valid numbers at the time of this writing are 1.1, 1.4, 2.0, and 3.0. 	  The shader will not run properly if the hardware does not support the 	  level of shader compiled.
/// </summary>
public float pixVersion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pixVersion").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pixVersion", value.AsString());
          }
       }
/// <summary>
/// @brief If true, the maximum pixel shader version offered by the graphics card will be used.\n\n	  Otherwise, the script-defined pixel shader version will be used.\n\n
/// </summary>
public bool useDevicePixVersion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useDevicePixVersion").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useDevicePixVersion", value.AsString());
          }
       }
/// <summary>
/// @brief Rebuilds all the vertex and pixel shader instances created from this ShaderData.
/// 
/// 				   @tsexample
/// 				   // Rebuild the shader instances from ShaderData CloudLayerShader
/// 				   CloudLayerShader.reload();
/// 				   @endtsexample)
/// 
/// </summary>
public  void reload(){
TorqueScriptTemplate.m_ts.fnShaderData_reload(_mSimObjectId);
}
}}
