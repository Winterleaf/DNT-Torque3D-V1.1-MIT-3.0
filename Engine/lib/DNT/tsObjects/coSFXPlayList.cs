
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoSFXPlayList : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coSFXPlayList(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoSFXPlayList))]
    public class coSFXPlayList: coSFXTrack
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coSFXPlayList(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coSFXPlayList(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coSFXPlayList(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coSFXPlayList ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coSFXPlayList ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coSFXPlayList ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXPlayList(string ts)
            {
            return new coSFXPlayList(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coSFXPlayList ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXPlayList(int ts)
            {
            return new coSFXPlayList(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coSFXPlayList ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coSFXPlayList(uint ts)
            {
            return new coSFXPlayList(ts);
            }
/// <summary>
/// Seconds to wait after moving into slot before #transitionIn. 
/// </summary>
public float delayTimeIn
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayTimeIn").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayTimeIn", value.AsString());
          }
       }
private Point2F _delayTimeInVariance = null;
/// <summary>
/// Bounds on randomization of #delayTimeIn.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F delayTimeInVariance
       {
       get
          {
          if (_delayTimeInVariance!=null)
              _delayTimeInVariance.DetachAllEvents();
           _delayTimeInVariance = dnTorque.self.GetVar(_mSimObjectId + ".delayTimeInVariance").AsPoint2F();
          _delayTimeInVariance.OnChangeNotification +=_delayTimeInVariance_OnChangeNotification;
          return _delayTimeInVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayTimeInVariance", value.AsString());
          }
       }
void _delayTimeInVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".delayTimeInVariance", e.NewValue);
       }
/// <summary>
/// Seconds to wait before moving out of slot after #transitionOut. 
/// </summary>
public float delayTimeOut
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayTimeOut").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayTimeOut", value.AsString());
          }
       }
private Point2F _delayTimeOutVariance = null;
/// <summary>
/// Bounds on randomization of #delayTimeOut.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F delayTimeOutVariance
       {
       get
          {
          if (_delayTimeOutVariance!=null)
              _delayTimeOutVariance.DetachAllEvents();
           _delayTimeOutVariance = dnTorque.self.GetVar(_mSimObjectId + ".delayTimeOutVariance").AsPoint2F();
          _delayTimeOutVariance.OnChangeNotification +=_delayTimeOutVariance_OnChangeNotification;
          return _delayTimeOutVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayTimeOutVariance", value.AsString());
          }
       }
void _delayTimeOutVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".delayTimeOutVariance", e.NewValue);
       }
/// <summary>
/// Seconds to fade sound in (-1 to use the track's own fadeInTime.)\n      @see SFXDescription::fadeTimeIn 
/// </summary>
public float fadeTimeIn
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeTimeIn").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeIn", value.AsString());
          }
       }
private Point2F _fadeTimeInVariance = null;
/// <summary>
/// Bounds on randomization of #fadeInTime.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F fadeTimeInVariance
       {
       get
          {
          if (_fadeTimeInVariance!=null)
              _fadeTimeInVariance.DetachAllEvents();
           _fadeTimeInVariance = dnTorque.self.GetVar(_mSimObjectId + ".fadeTimeInVariance").AsPoint2F();
          _fadeTimeInVariance.OnChangeNotification +=_fadeTimeInVariance_OnChangeNotification;
          return _fadeTimeInVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeInVariance", value.AsString());
          }
       }
void _fadeTimeInVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeInVariance", e.NewValue);
       }
/// <summary>
/// Seconds to fade sound out (-1 to use the track's own fadeOutTime.)\n      @see SFXDescription::fadeTimeOut 
/// </summary>
public float fadeTimeOut
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeTimeOut").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeOut", value.AsString());
          }
       }
private Point2F _fadeTimeOutVariance = null;
/// <summary>
/// Bounds on randomization of #fadeOutTime\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F fadeTimeOutVariance
       {
       get
          {
          if (_fadeTimeOutVariance!=null)
              _fadeTimeOutVariance.DetachAllEvents();
           _fadeTimeOutVariance = dnTorque.self.GetVar(_mSimObjectId + ".fadeTimeOutVariance").AsPoint2F();
          _fadeTimeOutVariance.OnChangeNotification +=_fadeTimeOutVariance_OnChangeNotification;
          return _fadeTimeOutVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeOutVariance", value.AsString());
          }
       }
void _fadeTimeOutVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fadeTimeOutVariance", e.NewValue);
       }
/// <summary>
/// Behavior when description has looping enabled.\n     The loop mode determines whether the list will loop over a single slot or loop over      all the entire list of slots being played.\n\n     @see SFXDescription::isLooping 
/// </summary>
public SFXPlayList__ELoopMode loopMode
       {
       get
          {          return (SFXPlayList__ELoopMode)Enum.Parse(typeof(SFXPlayList__ELoopMode), dnTorque.self.GetVar(_mSimObjectId + ".loopMode"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".loopMode", value.ToString());
          }
       }
/// <summary>
/// @c maxDistance to apply to 3D sounds in this slot (1 to use @c maxDistance of track's own description).\n      @see SFXDescription::maxDistance 
/// </summary>
public float maxDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxDistance", value.AsString());
          }
       }
private Point2F _maxDistanceVariance = null;
/// <summary>
/// Bounds on randomization of #maxDistance.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F maxDistanceVariance
       {
       get
          {
          if (_maxDistanceVariance!=null)
              _maxDistanceVariance.DetachAllEvents();
           _maxDistanceVariance = dnTorque.self.GetVar(_mSimObjectId + ".maxDistanceVariance").AsPoint2F();
          _maxDistanceVariance.OnChangeNotification +=_maxDistanceVariance_OnChangeNotification;
          return _maxDistanceVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxDistanceVariance", value.AsString());
          }
       }
void _maxDistanceVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".maxDistanceVariance", e.NewValue);
       }
/// <summary>
/// Number of slots to play.\n     Up to a maximum of 16, this field determines the number of slots that are taken from the      list for playback. Only slots that have a valid #track assigned will be considered for      this. 
/// </summary>
public int numSlotsToPlay
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".numSlotsToPlay").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".numSlotsToPlay", value.AsString());
          }
       }
/// <summary>
/// Scale factor to apply to pitch of sounds played on this list slot.\n      This value will scale the actual pitch set on the track assigned to the slot, i.e. a value of 0.5 will       cause the track to play at half its assigned speed. 
/// </summary>
public float pitchScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".pitchScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pitchScale", value.AsString());
          }
       }
private Point2F _pitchScaleVariance = null;
/// <summary>
/// Bounds on randomization of #pitchScale.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F pitchScaleVariance
       {
       get
          {
          if (_pitchScaleVariance!=null)
              _pitchScaleVariance.DetachAllEvents();
           _pitchScaleVariance = dnTorque.self.GetVar(_mSimObjectId + ".pitchScaleVariance").AsPoint2F();
          _pitchScaleVariance.OnChangeNotification +=_pitchScaleVariance_OnChangeNotification;
          return _pitchScaleVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".pitchScaleVariance", value.AsString());
          }
       }
void _pitchScaleVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".pitchScaleVariance", e.NewValue);
       }
/// <summary>
/// Slot playback order randomization pattern.\n     By setting this field to something other than \NotRandom\ to order in which slots of the      playlist are processed can be changed from sequential to a random pattern. This allows to      to create more varied playback patterns.\n     Defaults to \NotRandom\. 
/// </summary>
public SFXPlayList__ERandomMode random
       {
       get
          {          return (SFXPlayList__ERandomMode)Enum.Parse(typeof(SFXPlayList__ERandomMode), dnTorque.self.GetVar(_mSimObjectId + ".random"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".random", value.ToString());
          }
       }
/// <summary>
/// @c referenceDistance to set for 3D sounds in this slot (1 to use @c referenceDistance of track's own description).\n      @see SFXDescription::referenceDistance 
/// </summary>
public float referenceDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".referenceDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".referenceDistance", value.AsString());
          }
       }
private Point2F _referenceDistanceVariance = null;
/// <summary>
/// Bounds on randomization of #referenceDistance.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F referenceDistanceVariance
       {
       get
          {
          if (_referenceDistanceVariance!=null)
              _referenceDistanceVariance.DetachAllEvents();
           _referenceDistanceVariance = dnTorque.self.GetVar(_mSimObjectId + ".referenceDistanceVariance").AsPoint2F();
          _referenceDistanceVariance.OnChangeNotification +=_referenceDistanceVariance_OnChangeNotification;
          return _referenceDistanceVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".referenceDistanceVariance", value.AsString());
          }
       }
void _referenceDistanceVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".referenceDistanceVariance", e.NewValue);
       }
/// <summary>
/// Number of times to loop this slot. 
/// </summary>
public int repeatCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".repeatCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".repeatCount", value.AsString());
          }
       }
/// <summary>
/// Behavior when an already playing sound is encountered on this slot from a previous cycle.\n      Each slot can have an arbitrary number of sounds playing on it from previous cycles. This field determines       how SFXController will handle these sources. 
/// </summary>
public SFXPlayList__EReplayMode replay
       {
       get
          {          return (SFXPlayList__EReplayMode)Enum.Parse(typeof(SFXPlayList__EReplayMode), dnTorque.self.GetVar(_mSimObjectId + ".replay"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".replay", value.ToString());
          }
       }
/// <summary>
/// State that must be active for this slot to play.\n\n      @ref SFXPlayList_states 
/// </summary>
public coSFXState state
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".state");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".state", value.ToString());
          }
       }
/// <summary>
/// Behavior when assigned state is deactivated while slot is playing.\n\n      @ref SFXPlayList_states 
/// </summary>
public SFXPlayList__EStateMode stateMode
       {
       get
          {          return (SFXPlayList__EStateMode)Enum.Parse(typeof(SFXPlayList__EStateMode), dnTorque.self.GetVar(_mSimObjectId + ".stateMode"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateMode", value.ToString());
          }
       }
/// <summary>
/// Enable/disable execution tracing for this playlist (local only).\n     If this is true, SFXControllers attached to the list will automatically run in trace mode. 
/// </summary>
public bool trace
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".trace").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".trace", value.AsString());
          }
       }
/// <summary>
/// Track to play in this slot.\n      This must be set for the slot to be considered for playback. Other settings for a slot       will not take effect except this field is set. 
/// </summary>
public coSFXTrack track
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".track");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".track", value.ToString());
          }
       }
/// <summary>
/// Behavior when moving into this slot.\n      After the delayIn time has expired (if any), this slot determines what the controller       will do before actually playing the slot. 
/// </summary>
public SFXPlayList__ETransitionMode transitionIn
       {
       get
          {          return (SFXPlayList__ETransitionMode)Enum.Parse(typeof(SFXPlayList__ETransitionMode), dnTorque.self.GetVar(_mSimObjectId + ".transitionIn"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".transitionIn", value.ToString());
          }
       }
/// <summary>
/// Behavior when moving out of this slot.\n      After the #detailTimeOut has expired (if any), this slot determines what the controller       will do before moving on to the next slot. 
/// </summary>
public SFXPlayList__ETransitionMode transitionOut
       {
       get
          {          return (SFXPlayList__ETransitionMode)Enum.Parse(typeof(SFXPlayList__ETransitionMode), dnTorque.self.GetVar(_mSimObjectId + ".transitionOut"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".transitionOut", value.ToString());
          }
       }
/// <summary>
/// Scale factor to apply to volume of sounds played on this list slot.\n      This value will scale the actual volume level set on the track assigned to the slot, i.e. a value of 0.5 will       cause the track to play at half-volume. 
/// </summary>
public float volumeScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".volumeScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".volumeScale", value.AsString());
          }
       }
private Point2F _volumeScaleVariance = null;
/// <summary>
/// Bounds on randomization of #volumeScale.\n\n      @ref SFXPlayList_randomization\n 
/// </summary>
public Point2F volumeScaleVariance
       {
       get
          {
          if (_volumeScaleVariance!=null)
              _volumeScaleVariance.DetachAllEvents();
           _volumeScaleVariance = dnTorque.self.GetVar(_mSimObjectId + ".volumeScaleVariance").AsPoint2F();
          _volumeScaleVariance.OnChangeNotification +=_volumeScaleVariance_OnChangeNotification;
          return _volumeScaleVariance;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".volumeScaleVariance", value.AsString());
          }
       }
void _volumeScaleVariance_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".volumeScaleVariance", e.NewValue);
       }
}}
