
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiTextEditCtrl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiTextEditCtrl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiTextEditCtrl))]
    public class coGuiTextEditCtrl: coGuiTextCtrl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiTextEditCtrl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiTextEditCtrl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiTextEditCtrl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiTextEditCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiTextEditCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiTextEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiTextEditCtrl(string ts)
            {
            return new coGuiTextEditCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiTextEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiTextEditCtrl(int ts)
            {
            return new coGuiTextEditCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiTextEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiTextEditCtrl(uint ts)
            {
            return new coGuiTextEditCtrl(ts);
            }
/// <summary>
/// If the attempted text cannot be entered, this sound effect will be played.\n
/// </summary>
public coSFXTrack deniedSound
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".deniedSound");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".deniedSound", value.ToString());
          }
       }
/// <summary>
/// Script command to be called when the Escape key is pressed.\n
/// </summary>
public String escapeCommand
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".escapeCommand").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".escapeCommand", value.AsString());
          }
       }
/// <summary>
/// How large of a history buffer to maintain.\n
/// </summary>
public int historySize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".historySize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".historySize", value.AsString());
          }
       }
/// <summary>
/// If true, all characters entered will be stored in the control, however will display as the character stored in passwordMask.\n
/// </summary>
public bool password
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".password").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".password", value.AsString());
          }
       }
/// <summary>
/// If 'password' is true, this is the character that will be used to mask the characters in the control.\n
/// </summary>
public String passwordMask
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".passwordMask").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".passwordMask", value.AsString());
          }
       }
/// <summary>
/// If true, every key event will act as if the Enter key was pressed.\n
/// </summary>
public bool sinkAllKeyEvents
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sinkAllKeyEvents").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sinkAllKeyEvents", value.AsString());
          }
       }
/// <summary>
/// If true, when the 'tab' key is pressed, it will act as if the Enter key was pressed on the control.\n
/// </summary>
public bool tabComplete
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".tabComplete").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".tabComplete", value.AsString());
          }
       }
/// <summary>
/// Script command to be called when the first validater is lost.\n
/// </summary>
public String validate
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".validate").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".validate", value.AsString());
          }
       }
/// <summary>
/// @brief Unselects all selected text in the control.
///    @tsexample
///    // Inform the control to unselect all of its selected text
///    %thisGuiTextEditCtrl.clearSelectedText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>
public  void clearSelectedText(){
TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_clearSelectedText(_mSimObjectId);
}
/// <summary>
/// @brief Force a validation to occur.
///    @tsexample
///    // Inform the control to force a validation of its text.
///    %thisGuiTextEditCtrl.forceValidateText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>
public  void forceValidateText(){
TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_forceValidateText(_mSimObjectId);
}
/// <summary>
/// @brief Returns the current position of the text cursor in the control.
///    @tsexample
///    // Acquire the cursor position in the control
///    %position = %thisGuiTextEditCtrl.getCursorPost();
///    @endtsexample
///    @return Text cursor position within the control.
///    @see GuiControl)
/// 
/// </summary>
public  int getCursorPos(){
return TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_getCursorPos(_mSimObjectId);
}
/// <summary>
/// @brief Acquires the current text displayed in this control.
///    @tsexample
///    // Acquire the value of the text control.
///    %text = %thisGuiTextEditCtrl.getText();
///    @endtsexample
///    @return The current text within the control.
///    @see GuiControl)
/// 
/// </summary>
public  string getText(){
return TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_getText(_mSimObjectId);
}
/// <summary>
/// @brief Checks to see if all text in the control has been selected.
///    @tsexample
///    // Check to see if all text has been selected or not.
///    %allSelected = %thisGuiTextEditCtrl.isAllTextSelected();
///    @endtsexample
///    @return True if all text in the control is selected, otherwise false.
///    @see GuiControl)
/// 
/// </summary>
public  bool isAllTextSelected(){
return TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_isAllTextSelected(_mSimObjectId);
}
/// <summary>
/// @brief Selects all text within the control.
///    @tsexample
///    // Inform the control to select all of its text.
///    %thisGuiTextEditCtrl.selectAllText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>
public  void selectAllText(){
TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_selectAllText(_mSimObjectId);
}
/// <summary>
/// @brief Sets the text cursor at the defined position within the control.
///    @param position Text position to set the text cursor.
///    @tsexample
///    // Define the cursor position
///    %position = \"12\";
///    // Inform the GuiTextEditCtrl control to place the text cursor at the defined position
///    %thisGuiTextEditCtrl.setCursorPos(%position);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>
public  void setCursorPos(int position){
TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_setCursorPos(_mSimObjectId, position);
}
/// <summary>
/// @brief Sets the text in the control.
///    @param text Text to place in the control.
///    @tsexample
///    // Define the text to display
///    %text = \"Text!\"
///    // Inform the GuiTextEditCtrl to display the defined text
///    %thisGuiTextEditCtrl.setText(%text);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>
public  new  void setText(string text){
TorqueScriptTemplate.m_ts.fnGuiTextEditCtrl_setText(_mSimObjectId, text);
}
}}
