
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoExplosionData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coExplosionData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoExplosionData))]
    public class coExplosionData: coGameBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coExplosionData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coExplosionData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coExplosionData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coExplosionData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coExplosionData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coExplosionData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(string ts)
            {
            return new coExplosionData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coExplosionData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(int ts)
            {
            return new coExplosionData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coExplosionData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coExplosionData(uint ts)
            {
            return new coExplosionData(ts);
            }
private Point3F _camShakeAmp = null;
/// <summary>
/// @brief Amplitude of camera shaking, defined in the \X Y Z\ axes.\n\n   Set any value to 0 to disable shaking in that axis. 
/// </summary>
public Point3F camShakeAmp
       {
       get
          {
          if (_camShakeAmp!=null)
              _camShakeAmp.DetachAllEvents();
           _camShakeAmp = dnTorque.self.GetVar(_mSimObjectId + ".camShakeAmp").AsPoint3F();
          _camShakeAmp.OnChangeNotification +=_camShakeAmp_OnChangeNotification;
          return _camShakeAmp;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeAmp", value.AsString());
          }
       }
void _camShakeAmp_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".camShakeAmp", e.NewValue);
       }
/// <summary>
/// Duration (in seconds) to shake the camera. 
/// </summary>
public float camShakeDuration
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeDuration").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeDuration", value.AsString());
          }
       }
/// <summary>
/// Falloff value for the camera shake. 
/// </summary>
public float camShakeFalloff
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeFalloff").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeFalloff", value.AsString());
          }
       }
private Point3F _camShakeFreq = null;
/// <summary>
/// Frequency of camera shaking, defined in the \X Y Z\ axes. 
/// </summary>
public Point3F camShakeFreq
       {
       get
          {
          if (_camShakeFreq!=null)
              _camShakeFreq.DetachAllEvents();
           _camShakeFreq = dnTorque.self.GetVar(_mSimObjectId + ".camShakeFreq").AsPoint3F();
          _camShakeFreq.OnChangeNotification +=_camShakeFreq_OnChangeNotification;
          return _camShakeFreq;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeFreq", value.AsString());
          }
       }
void _camShakeFreq_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".camShakeFreq", e.NewValue);
       }
/// <summary>
/// Radial distance that a camera's position must be within relative to the    center of the explosion to be shaken. 
/// </summary>
public float camShakeRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".camShakeRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".camShakeRadius", value.AsString());
          }
       }
/// <summary>
/// List of DebrisData objects to spawn with this explosion. 
/// </summary>
public coDebrisData debris
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debris");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debris", value.ToString());
          }
       }
/// <summary>
/// Number of debris objects to create. 
/// </summary>
public int debrisNum
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisNum").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisNum", value.AsString());
          }
       }
/// <summary>
/// Variance in the number of debris objects to create (must be from 0 - debrisNum). 
/// </summary>
public int debrisNumVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisNumVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisNumVariance", value.AsString());
          }
       }
/// <summary>
/// Maximum reference angle, from the vertical plane, to eject debris from. 
/// </summary>
public float debrisPhiMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisPhiMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisPhiMax", value.AsString());
          }
       }
/// <summary>
/// Minimum reference angle, from the vertical plane, to eject debris from. 
/// </summary>
public float debrisPhiMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisPhiMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisPhiMin", value.AsString());
          }
       }
/// <summary>
/// Maximum angle, from the horizontal plane, to eject debris from. 
/// </summary>
public float debrisThetaMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisThetaMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisThetaMax", value.AsString());
          }
       }
/// <summary>
/// Minimum angle, from the horizontal plane, to eject debris from. 
/// </summary>
public float debrisThetaMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisThetaMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisThetaMin", value.AsString());
          }
       }
/// <summary>
/// Velocity to toss debris at. 
/// </summary>
public float debrisVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisVelocity", value.AsString());
          }
       }
/// <summary>
/// Variance in the debris initial velocity (must be = 0). 
/// </summary>
public float debrisVelocityVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisVelocityVariance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisVelocityVariance", value.AsString());
          }
       }
/// <summary>
/// Amount of time, in milliseconds, to delay the start of the explosion effect    from the creation of the Explosion object. 
/// </summary>
public int delayMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayMS", value.AsString());
          }
       }
/// <summary>
/// Variance, in milliseconds, of delayMS. 
/// </summary>
public int delayVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".delayVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".delayVariance", value.AsString());
          }
       }
/// <summary>
/// @brief List of additional ParticleEmitterData objects to spawn with this    explosion.\n\n   @see particleEmitter 
/// </summary>
public coParticleEmitterData emitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".emitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".emitter", value.ToString());
          }
       }
private Point3F _explosionScale = null;
/// <summary>
/// \X Y Z\ scale factor applied to the explosionShape model at the start    of the explosion. 
/// </summary>
public Point3F explosionScale
       {
       get
          {
          if (_explosionScale!=null)
              _explosionScale.DetachAllEvents();
           _explosionScale = dnTorque.self.GetVar(_mSimObjectId + ".explosionScale").AsPoint3F();
          _explosionScale.OnChangeNotification +=_explosionScale_OnChangeNotification;
          return _explosionScale;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".explosionScale", value.AsString());
          }
       }
void _explosionScale_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".explosionScale", e.NewValue);
       }
/// <summary>
/// @brief Optional DTS or DAE shape to place at the center of the explosion.\n\n   The iambient/i animation of this model will be played automatically at    the start of the explosion. 
/// </summary>
public String explosionShape
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".explosionShape").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".explosionShape", value.AsString());
          }
       }
/// <summary>
/// Controls whether the visual effects of the explosion always face the camera. 
/// </summary>
public bool faceViewer
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".faceViewer").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".faceViewer", value.AsString());
          }
       }
/// <summary>
/// @brief Lifetime, in milliseconds, of the Explosion object.\n\n   @note If explosionShape is defined and contains an iambient/i animation,    this field is ignored, and the playSpeed scaled duration of the animation    is used instead. 
/// </summary>
public int lifetimeMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lifetimeMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lifetimeMS", value.AsString());
          }
       }
/// <summary>
/// Variance, in milliseconds, of the lifetimeMS of the Explosion object.\n 
/// </summary>
public int lifetimeVariance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lifetimeVariance").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lifetimeVariance", value.AsString());
          }
       }
/// <summary>
/// @brief Final brightness of the PointLight created by this explosion.\n\n   @see lightStartBrightness 
/// </summary>
public float lightEndBrightness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightEndBrightness").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndBrightness", value.AsString());
          }
       }
private ColorF _lightEndColor = null;
/// <summary>
/// @brief Final color of the PointLight created by this explosion.\n\n   @see lightStartColor 
/// </summary>
public ColorF lightEndColor
       {
       get
          {
          if (_lightEndColor!=null)
              _lightEndColor.DetachAllEvents();
           _lightEndColor = dnTorque.self.GetVar(_mSimObjectId + ".lightEndColor").AsColorF();
          _lightEndColor.OnChangeNotification +=_lightEndColor_OnChangeNotification;
          return _lightEndColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndColor", value.AsString());
          }
       }
void _lightEndColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".lightEndColor", e.NewValue);
       }
/// <summary>
/// @brief Final radius of the PointLight created by this explosion.\n\n   @see lightStartRadius 
/// </summary>
public float lightEndRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightEndRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightEndRadius", value.AsString());
          }
       }
/// <summary>
/// Distance (in the explosion normal direction) of the PointLight position    from the explosion center. 
/// </summary>
public float lightNormalOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightNormalOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightNormalOffset", value.AsString());
          }
       }
/// <summary>
/// @brief Initial brightness of the PointLight created by this explosion.\n\n   Brightness is linearly interpolated from lightStartBrightness to    lightEndBrightness over the lifetime of the explosion.\n   @see lifetimeMS 
/// </summary>
public float lightStartBrightness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightStartBrightness").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartBrightness", value.AsString());
          }
       }
private ColorF _lightStartColor = null;
/// <summary>
/// @brief Initial color of the PointLight created by this explosion.\n\n   Color is linearly interpolated from lightStartColor to lightEndColor    over the lifetime of the explosion.\n   @see lifetimeMS 
/// </summary>
public ColorF lightStartColor
       {
       get
          {
          if (_lightStartColor!=null)
              _lightStartColor.DetachAllEvents();
           _lightStartColor = dnTorque.self.GetVar(_mSimObjectId + ".lightStartColor").AsColorF();
          _lightStartColor.OnChangeNotification +=_lightStartColor_OnChangeNotification;
          return _lightStartColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartColor", value.AsString());
          }
       }
void _lightStartColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".lightStartColor", e.NewValue);
       }
/// <summary>
/// @brief Initial radius of the PointLight created by this explosion.\n\n   Radius is linearly interpolated from lightStartRadius to lightEndRadius    over the lifetime of the explosion.\n   @see lifetimeMS 
/// </summary>
public float lightStartRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightStartRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightStartRadius", value.AsString());
          }
       }
/// <summary>
/// @brief Offset distance (in a random direction) of the center of the explosion    from the Explosion object position.\n\n   Most often used to create some variance in position for subExplosion effects. 
/// </summary>
public float offset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".offset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".offset", value.AsString());
          }
       }
/// <summary>
/// @brief Density of the particle cloud created at the start of the explosion.\n\n   @see particleEmitter 
/// </summary>
public int particleDensity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleDensity").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleDensity", value.AsString());
          }
       }
/// <summary>
/// @brief Emitter used to generate a cloud of particles at the start of the explosion.\n\n   Explosions can generate two different particle effects. The first is a    single burst of particles at the start of the explosion emitted in a    spherical cloud using particleEmitter.\n\n   The second effect spawns the list of ParticleEmitters given by the emitter[]    field. These emitters generate particles in the normal way throughout the    lifetime of the explosion. 
/// </summary>
public coParticleEmitterData particleEmitter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleEmitter");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleEmitter", value.ToString());
          }
       }
/// <summary>
/// @brief Radial distance from the explosion center at which cloud particles    are emitted.\n\n   @see particleEmitter 
/// </summary>
public float particleRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".particleRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".particleRadius", value.AsString());
          }
       }
/// <summary>
/// Time scale at which to play the explosionShape iambient/i sequence. 
/// </summary>
public float playSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".playSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".playSpeed", value.AsString());
          }
       }
/// <summary>
/// Controls whether the camera shakes during this explosion. 
/// </summary>
public bool shakeCamera
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shakeCamera").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shakeCamera", value.AsString());
          }
       }
private Point3F _sizes = null;
/// <summary>
/// @brief \X Y Z\ size keyframes used to scale the explosionShape model.\n\n   The explosionShape (if defined) will be scaled using the times/sizes    keyframes over the lifetime of the explosion.\n   @see lifetimeMS 
/// </summary>
public Point3F sizes
       {
       get
          {
          if (_sizes!=null)
              _sizes.DetachAllEvents();
           _sizes = dnTorque.self.GetVar(_mSimObjectId + ".sizes").AsPoint3F();
          _sizes.OnChangeNotification +=_sizes_OnChangeNotification;
          return _sizes;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizes", value.AsString());
          }
       }
void _sizes_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".sizes", e.NewValue);
       }
/// <summary>
/// Non-looping sound effect that will be played at the start of the explosion. 
/// </summary>
public coSFXTrack soundProfile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundProfile");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundProfile", value.ToString());
          }
       }
/// <summary>
/// List of additional ExplosionData objects to create at the start of the    explosion. 
/// </summary>
public coExplosionData subExplosion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".subExplosion");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".subExplosion", value.ToString());
          }
       }
/// <summary>
/// @brief Time keyframes used to scale the explosionShape model.\n\n   Values should be in increasing order from 0.0 - 1.0, and correspond to    the life of the Explosion where 0 is the beginning and 1 is the end of    the explosion lifetime.\n   @see lifetimeMS 
/// </summary>
public float times
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".times").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".times", value.AsString());
          }
       }
}}
