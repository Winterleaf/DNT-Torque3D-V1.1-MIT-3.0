
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercofxFoliageReplicator : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new cofxFoliageReplicator(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercofxFoliageReplicator))]
    public class cofxFoliageReplicator: coSceneObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxFoliageReplicator(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxFoliageReplicator(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal cofxFoliageReplicator(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(cofxFoliageReplicator ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(cofxFoliageReplicator ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( cofxFoliageReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxFoliageReplicator(string ts)
            {
            return new cofxFoliageReplicator(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( cofxFoliageReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxFoliageReplicator(int ts)
            {
            return new cofxFoliageReplicator(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( cofxFoliageReplicator ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator cofxFoliageReplicator(uint ts)
            {
            return new cofxFoliageReplicator(ts);
            }
/// <summary>
/// Maximum surface angle allowed for foliage instances. 
/// </summary>
public int AllowedTerrainSlope
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowedTerrainSlope").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowedTerrainSlope", value.AsString());
          }
       }
/// <summary>
/// Foliage will be placed on Static shapes when set. 
/// </summary>
public bool AllowOnStatics
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnStatics").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnStatics", value.AsString());
          }
       }
/// <summary>
/// Foliage will be placed on terrain when set. 
/// </summary>
public bool AllowOnTerrain
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnTerrain").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnTerrain", value.AsString());
          }
       }
/// <summary>
/// Foliage will be placed on/under water when set. 
/// </summary>
public bool AllowOnWater
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowOnWater").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowOnWater", value.AsString());
          }
       }
/// <summary>
/// Foliage will be placed on water when set. Requires AllowOnWater. 
/// </summary>
public bool AllowWaterSurface
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AllowWaterSurface").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AllowWaterSurface", value.AsString());
          }
       }
/// <summary>
/// Minimum alpha value allowed on foliage instances. 
/// </summary>
public float AlphaCutoff
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".AlphaCutoff").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".AlphaCutoff", value.AsString());
          }
       }
/// <summary>
/// Minimum size of culling bins. Must be = 8 and = OuterRadius. 
/// </summary>
public int CullResolution
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".CullResolution").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".CullResolution", value.AsString());
          }
       }
/// <summary>
/// Height multiplier for drawn culling bins.
/// </summary>
public float DebugBoxHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".DebugBoxHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".DebugBoxHeight", value.AsString());
          }
       }
/// <summary>
/// Region beyond ViewDistance where foliage fades in/out. 
/// </summary>
public float FadeInRegion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FadeInRegion").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FadeInRegion", value.AsString());
          }
       }
/// <summary>
/// Region before ViewClosest where foliage fades in/out. 
/// </summary>
public float FadeOutRegion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FadeOutRegion").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FadeOutRegion", value.AsString());
          }
       }
/// <summary>
/// Maintain aspect ratio of image if true. This option ignores MaxWidth. 
/// </summary>
public bool FixAspectRatio
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FixAspectRatio").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FixAspectRatio", value.AsString());
          }
       }
/// <summary>
/// Use only MaxWidth and MaxHeight for billboard size. Ignores MinWidth and MinHeight. 
/// </summary>
public bool FixSizeToMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FixSizeToMax").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FixSizeToMax", value.AsString());
          }
       }
/// <summary>
/// Maximum foliage instance count. 
/// </summary>
public int FoliageCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FoliageCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FoliageCount", value.AsString());
          }
       }
/// <summary>
/// Image file for the foliage texture. 
/// </summary>
public String FoliageFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FoliageFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FoliageFile", value.AsString());
          }
       }
/// <summary>
/// Number of times to try placing a foliage instance before giving up. 
/// </summary>
public int FoliageRetries
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".FoliageRetries").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".FoliageRetries", value.AsString());
          }
       }
/// <summary>
/// Alpha of the foliage at ground level. 0 = transparent, 1 = opaque. 
/// </summary>
public float GroundAlpha
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".GroundAlpha").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".GroundAlpha", value.AsString());
          }
       }
/// <summary>
/// Foliage is hidden when set to true. 
/// </summary>
public bool HideFoliage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".HideFoliage").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".HideFoliage", value.AsString());
          }
       }
/// <summary>
/// Placement area inner radius on the X axis 
/// </summary>
public int InnerRadiusX
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".InnerRadiusX").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".InnerRadiusX", value.AsString());
          }
       }
/// <summary>
/// Placement area inner radius on the Y axis 
/// </summary>
public int InnerRadiusY
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".InnerRadiusY").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".InnerRadiusY", value.AsString());
          }
       }
/// <summary>
/// Foliage should be illuminated with changing lights when true. 
/// </summary>
public bool LightOn
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".LightOn").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".LightOn", value.AsString());
          }
       }
/// <summary>
/// Foliage instances have the same lighting when set and LightOn is set. 
/// </summary>
public bool LightSync
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".LightSync").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".LightSync", value.AsString());
          }
       }
/// <summary>
/// Time before foliage illumination cycle repeats. 
/// </summary>
public float LightTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".LightTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".LightTime", value.AsString());
          }
       }
/// <summary>
/// Maximum height of foliage billboards 
/// </summary>
public float MaxHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MaxHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MaxHeight", value.AsString());
          }
       }
/// <summary>
/// Maximum luminance for foliage instances. 
/// </summary>
public float MaxLuminance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MaxLuminance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MaxLuminance", value.AsString());
          }
       }
/// <summary>
/// Maximum sway cycle time in seconds. 
/// </summary>
public float MaxSwayTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MaxSwayTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MaxSwayTime", value.AsString());
          }
       }
/// <summary>
/// Maximum width of foliage billboards 
/// </summary>
public float MaxWidth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MaxWidth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MaxWidth", value.AsString());
          }
       }
/// <summary>
/// Minimum height of foliage billboards 
/// </summary>
public float MinHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MinHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MinHeight", value.AsString());
          }
       }
/// <summary>
/// Minimum luminance for foliage instances. 
/// </summary>
public float MinLuminance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MinLuminance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MinLuminance", value.AsString());
          }
       }
/// <summary>
/// Minumum sway cycle time in seconds. 
/// </summary>
public float MinSwayTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MinSwayTime").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MinSwayTime", value.AsString());
          }
       }
/// <summary>
/// Minimum width of foliage billboards 
/// </summary>
public float MinWidth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".MinWidth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".MinWidth", value.AsString());
          }
       }
/// <summary>
/// Offset billboards by this amount vertically. 
/// </summary>
public float OffsetZ
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OffsetZ").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OffsetZ", value.AsString());
          }
       }
/// <summary>
/// Placement area outer radius on the X axis 
/// </summary>
public int OuterRadiusX
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OuterRadiusX").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OuterRadiusX", value.AsString());
          }
       }
/// <summary>
/// Placement area outer radius on the Y axis 
/// </summary>
public int OuterRadiusY
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".OuterRadiusY").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".OuterRadiusY", value.AsString());
          }
       }
/// <summary>
/// Height of the placement ring in world units. 
/// </summary>
public int PlacementAreaHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".PlacementAreaHeight").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".PlacementAreaHeight", value.AsString());
          }
       }
private ColorF _PlacementColour = null;
/// <summary>
/// Color of the placement ring. 
/// </summary>
public ColorF PlacementColour
       {
       get
          {
          if (_PlacementColour!=null)
              _PlacementColour.DetachAllEvents();
           _PlacementColour = dnTorque.self.GetVar(_mSimObjectId + ".PlacementColour").AsColorF();
          _PlacementColour.OnChangeNotification +=_PlacementColour_OnChangeNotification;
          return _PlacementColour;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".PlacementColour", value.AsString());
          }
       }
void _PlacementColour_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".PlacementColour", e.NewValue);
       }
/// <summary>
/// Randomly flip billboards left-to-right. 
/// </summary>
public bool RandomFlip
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".RandomFlip").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".RandomFlip", value.AsString());
          }
       }
/// <summary>
/// Random seed for foliage placement. 
/// </summary>
public int Seed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".Seed").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".Seed", value.AsString());
          }
       }
/// <summary>
/// Draw placement rings when set to true. 
/// </summary>
public bool ShowPlacementArea
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ShowPlacementArea").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ShowPlacementArea", value.AsString());
          }
       }
/// <summary>
/// Front-to-back sway magnitude. 
/// </summary>
public float SwayMagFront
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".SwayMagFront").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".SwayMagFront", value.AsString());
          }
       }
/// <summary>
/// Left-to-right sway magnitude. 
/// </summary>
public float SwayMagSide
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".SwayMagSide").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".SwayMagSide", value.AsString());
          }
       }
/// <summary>
/// Foliage should sway randomly when true. 
/// </summary>
public bool SwayOn
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".SwayOn").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".SwayOn", value.AsString());
          }
       }
/// <summary>
/// Foliage instances should sway together when true and SwayOn is enabled. 
/// </summary>
public bool SwaySync
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".SwaySync").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".SwaySync", value.AsString());
          }
       }
/// <summary>
/// Use culling bins when enabled. 
/// </summary>
public bool UseCulling
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".UseCulling").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".UseCulling", value.AsString());
          }
       }
/// <summary>
/// Culling bins are drawn when set to true. 
/// </summary>
public bool UseDebugInfo
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".UseDebugInfo").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".UseDebugInfo", value.AsString());
          }
       }
/// <summary>
/// Use camera facing billboards ( including the z axis ). 
/// </summary>
public bool UseTrueBillboards
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".UseTrueBillboards").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".UseTrueBillboards", value.AsString());
          }
       }
/// <summary>
/// Minimum distance from camera where foliage appears. 
/// </summary>
public float ViewClosest
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ViewClosest").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ViewClosest", value.AsString());
          }
       }
/// <summary>
/// Maximum distance from camera where foliage appears. 
/// </summary>
public float ViewDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ViewDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ViewDistance", value.AsString());
          }
       }
}}
