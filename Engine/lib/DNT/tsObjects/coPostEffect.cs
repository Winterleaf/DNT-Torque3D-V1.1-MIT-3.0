
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoPostEffect : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coPostEffect(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoPostEffect))]
    public class coPostEffect: coSimGroup
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPostEffect(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPostEffect(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPostEffect(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coPostEffect ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coPostEffect ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coPostEffect ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPostEffect(string ts)
            {
            return new coPostEffect(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coPostEffect ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPostEffect(int ts)
            {
            return new coPostEffect(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coPostEffect ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPostEffect(uint ts)
            {
            return new coPostEffect(ts);
            }
/// <summary>
/// Is this effect processed during reflection render passes. 
/// </summary>
public bool allowReflectPass
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".allowReflectPass").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".allowReflectPass", value.AsString());
          }
       }
/// <summary>
/// Is the effect on. 
/// </summary>
public bool isEnabled
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".isEnabled").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".isEnabled", value.AsString());
          }
       }
/// <summary>
/// Allows you to turn on a PostEffect for only a single frame. 
/// </summary>
public bool oneFrameOnly
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".oneFrameOnly").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".oneFrameOnly", value.AsString());
          }
       }
/// <summary>
/// Allows you to turn on a PostEffect for only a single frame. 
/// </summary>
public bool onThisFrame
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".onThisFrame").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".onThisFrame", value.AsString());
          }
       }
/// <summary>
/// Name of a renderBin, used if renderTime is PFXBeforeBin or PFXAfterBin. 
/// </summary>
public String renderBin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".renderBin").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderBin", value.AsString());
          }
       }
/// <summary>
/// PostEffects are processed in DESCENDING order of renderPriority if more than one has the same renderBin/Time. 
/// </summary>
public float renderPriority
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".renderPriority").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderPriority", value.AsString());
          }
       }
/// <summary>
/// When to process this effect during the frame. 
/// </summary>
public PFXRenderTime renderTime
       {
       get
          {          return (PFXRenderTime)Enum.Parse(typeof(PFXRenderTime), dnTorque.self.GetVar(_mSimObjectId + ".renderTime"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderTime", value.ToString());
          }
       }
/// <summary>
/// Name of a GFXShaderData for this effect. 
/// </summary>
public String shader
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shader").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shader", value.AsString());
          }
       }
/// <summary>
/// Skip processing of this PostEffect and its children even if its parent    is enabled. Parent and sibling PostEffects in the chain are still processed. 
/// </summary>
public bool skip
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".skip").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".skip", value.AsString());
          }
       }
/// <summary>
/// Name of a GFXStateBlockData for this effect. 
/// </summary>
public coGFXStateBlockData stateBlock
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stateBlock");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stateBlock", value.ToString());
          }
       }
/// <summary>
/// String identifier of this effect's target texture.\n   @see PFXTextureIdentifiers 
/// </summary>
public String target
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".target").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".target", value.AsString());
          }
       }
/// <summary>
/// Describes when the target texture should be cleared. 
/// </summary>
public PFXTargetClear targetClear
       {
       get
          {          return (PFXTargetClear)Enum.Parse(typeof(PFXTargetClear), dnTorque.self.GetVar(_mSimObjectId + ".targetClear"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetClear", value.ToString());
          }
       }
private ColorF _targetClearColor = null;
/// <summary>
/// Color to which the target texture is cleared before rendering. 
/// </summary>
public ColorF targetClearColor
       {
       get
          {
          if (_targetClearColor!=null)
              _targetClearColor.DetachAllEvents();
           _targetClearColor = dnTorque.self.GetVar(_mSimObjectId + ".targetClearColor").AsColorF();
          _targetClearColor.OnChangeNotification +=_targetClearColor_OnChangeNotification;
          return _targetClearColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetClearColor", value.AsString());
          }
       }
void _targetClearColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".targetClearColor", e.NewValue);
       }
/// <summary>
/// Optional string identifier for this effect's target depth/stencil texture.\n   @see PFXTextureIdentifiers 
/// </summary>
public String targetDepthStencil
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".targetDepthStencil").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetDepthStencil", value.AsString());
          }
       }
/// <summary>
/// Format of the target texture, not applicable if writing to the backbuffer. 
/// </summary>
public TypeGFXFormat targetFormat
       {
       get
          {          return (TypeGFXFormat)Enum.Parse(typeof(TypeGFXFormat), dnTorque.self.GetVar(_mSimObjectId + ".targetFormat").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetFormat", value.ToString().Replace("zz_zz"," "));
          }
       }
private Point2F _targetScale = null;
/// <summary>
/// If targetSize is zero this is used to set a relative size from the current target. 
/// </summary>
public Point2F targetScale
       {
       get
          {
          if (_targetScale!=null)
              _targetScale.DetachAllEvents();
           _targetScale = dnTorque.self.GetVar(_mSimObjectId + ".targetScale").AsPoint2F();
          _targetScale.OnChangeNotification +=_targetScale_OnChangeNotification;
          return _targetScale;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetScale", value.AsString());
          }
       }
void _targetScale_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".targetScale", e.NewValue);
       }
private Point2I _targetSize = null;
/// <summary>
/// If non-zero this is used as the absolute target size. 
/// </summary>
public Point2I targetSize
       {
       get
          {
          if (_targetSize!=null)
              _targetSize.DetachAllEvents();
           _targetSize = dnTorque.self.GetVar(_mSimObjectId + ".targetSize").AsPoint2I();
          _targetSize.OnChangeNotification +=_targetSize_OnChangeNotification;
          return _targetSize;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".targetSize", value.AsString());
          }
       }
void _targetSize_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".targetSize", e.NewValue);
       }
/// <summary>
/// Input textures to this effect ( samplers ).\n   @see PFXTextureIdentifiers 
/// </summary>
public String texture
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".texture").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".texture", value.AsString());
          }
       }
/// <summary>
/// Remove all shader macros. )
/// 
/// </summary>
public  void clearShaderMacros(){
TorqueScriptTemplate.m_ts.fnPostEffect_clearShaderMacros(_mSimObjectId);
}
/// <summary>
/// Disables the effect. )
/// 
/// </summary>
public  void disable(){
TorqueScriptTemplate.m_ts.fnPostEffect_disable(_mSimObjectId);
}
/// <summary>
/// Dumps this PostEffect shader's disassembly to a temporary text file.
///    @return Full path to the dumped file or an empty string if failed. )
/// 
/// </summary>
public  string dumpShaderDisassembly(){
return TorqueScriptTemplate.m_ts.fnPostEffect_dumpShaderDisassembly(_mSimObjectId);
}
/// <summary>
/// Enables the effect. )
/// 
/// </summary>
public  void enable(){
TorqueScriptTemplate.m_ts.fnPostEffect_enable(_mSimObjectId);
}
/// <summary>
/// @return Width over height of the backbuffer. )
/// 
/// </summary>
public  float getAspectRatio(){
return TorqueScriptTemplate.m_ts.fnPostEffect_getAspectRatio(_mSimObjectId);
}
/// <summary>
/// @return True if the effect is enabled. )
/// 
/// </summary>
public  bool isEnabledX(){
return TorqueScriptTemplate.m_ts.fnPostEffect_isEnabled(_mSimObjectId);
}
/// <summary>
/// Reloads the effect shader and textures. )
/// 
/// </summary>
public  void reload(){
TorqueScriptTemplate.m_ts.fnPostEffect_reload(_mSimObjectId);
}
/// <summary>
/// Remove a shader macro. This will usually be called within the preProcess callback.
///    @param key Macro to remove. )
/// 
/// </summary>
public  void removeShaderMacro(string key){
TorqueScriptTemplate.m_ts.fnPostEffect_removeShaderMacro(_mSimObjectId, key);
}
/// <summary>
/// Sets the value of a uniform defined in the shader. This will usually 
///    be called within the setShaderConsts callback. Array type constants are 
///    not supported.    
///    @param name Name of the constanst, prefixed with '$'. 
///    @param value Value to set, space seperate values with more than one element.
///    @tsexample
///    function MyPfx::setShaderConsts( %this )
///    {
///       // example float4 uniform
///       %this.setShaderConst( \"$colorMod\", \"1.0 0.9 1.0 1.0\" );
///       // example float1 uniform
///       %this.setShaderConst( \"$strength\", \"3.0\" );
///       // example integer uniform
///       %this.setShaderConst( \"$loops\", \"5\" );
///    }
///    @endtsexample )   
/// 
/// </summary>
public  void setShaderConst(string name, string value){
TorqueScriptTemplate.m_ts.fnPostEffect_setShaderConst(_mSimObjectId, name, value);
}
/// <summary>
///  ),
///    Adds a macro to the effect's shader or sets an existing one's value. 
///    This will usually be called within the onAdd or preProcess callback.
///    @param key lval of the macro.
///    @param value rval of the macro, or may be empty.
///    @tsexample
///    function MyPfx::onAdd( %this )
///    {
///       %this.setShaderMacro( \"NUM_SAMPLES\", \"10\" );
///       %this.setShaderMacro( \"HIGH_QUALITY_MODE\" );
///       
///       // In the shader looks like... 
///       // #define NUM_SAMPLES 10
///       // #define HIGH_QUALITY_MODE
///    }
///    @endtsexample )
/// 
/// </summary>
public  void setShaderMacro(string key, string value){
TorqueScriptTemplate.m_ts.fnPostEffect_setShaderMacro(_mSimObjectId, key, value);
}
/// <summary>
/// This is used to set the texture file and load the texture on a running effect. 
///    If the texture file is not different from the current file nothing is changed.  If 
///    the texture cannot be found a null texture is assigned.    
///    @param index The texture stage index. 
///    @param filePath The file name of the texture to set. )
/// 
/// </summary>
public  void setTexture(int index, string filePath){
TorqueScriptTemplate.m_ts.fnPostEffect_setTexture(_mSimObjectId, index, filePath);
}
/// <summary>
/// Toggles the effect between enabled / disabled.
///    @return True if effect is enabled. )
/// 
/// </summary>
public  bool toggle(){
return TorqueScriptTemplate.m_ts.fnPostEffect_toggle(_mSimObjectId);
}
}}
