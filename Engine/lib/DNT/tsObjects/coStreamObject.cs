
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoStreamObject : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coStreamObject(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoStreamObject))]
    public class coStreamObject: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coStreamObject(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coStreamObject(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coStreamObject(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coStreamObject ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coStreamObject ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coStreamObject ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coStreamObject(string ts)
            {
            return new coStreamObject(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coStreamObject ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coStreamObject(int ts)
            {
            return new coStreamObject(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coStreamObject ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coStreamObject(uint ts)
            {
            return new coStreamObject(ts);
            }
/// <summary>
/// @brief Copy from another StreamObject into this StreamObject
///    @param other The StreamObject to copy from.
///    @return True if the copy was successful.)
/// 
/// </summary>
public  bool copyFrom(string other){
return TorqueScriptTemplate.m_ts.fnStreamObject_copyFrom(_mSimObjectId, other);
}
/// <summary>
/// @brief Gets the position in the stream
///    
///    The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
///    five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
///    For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
///    the null terminator, and a newline.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains two lines of text repeated:
///    // Hello World
///    // Hello World
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Read in the first line
///    %line = %fsObject.readLine();
///    // Get the position of the stream
///    %position = %fsObject.getPosition();
///    // Print the current position
///    // Should be 13, 10 for the words, 1 for the space, 1 for the null terminator, and 1 for the newline
///    echo(%position);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Number of bytes which stream has parsed so far, null terminators and newlines are included
///    
///    @see setPosition())
/// 
/// </summary>
public  int getPosition(){
return TorqueScriptTemplate.m_ts.fnStreamObject_getPosition(_mSimObjectId);
}
/// <summary>
/// @brief Gets a printable string form of the stream's status
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Get the status and print it
///    %status = %fsObject.getStatus();
///    echo(%status);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return String containing status constant, one of the following:
/// 
///    	OK - Stream is active and no file errors
/// 
///    	IOError - Something went wrong during read or writing the stream
/// 
///    	EOS - End of Stream reached (mostly for reads)
/// 
///    	IllegalCall - An unsupported operation used.  Always w/ accompanied by AssertWarn
/// 
///      Closed - Tried to operate on a closed stream (or detached filter)
/// 
///    	UnknownError - Catch all for an error of some kind
/// 
///    	Invalid - Entire stream is invalid)
/// 
/// </summary>
public  string getStatus(){
return TorqueScriptTemplate.m_ts.fnStreamObject_getStatus(_mSimObjectId);
}
/// <summary>
/// @brief Gets the size of the stream
///    
///    The size is dependent on the type of stream being used. If it is a file stream, returned value will 
///    be the size of the file. If it is a memory stream, it will be the size of the allocated buffer.
///       
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains the following two lines:
///    // HelloWorld
///    // HelloWorld
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Found out how large the file stream is
///    // Then print it to the console
///    // Should be 22
///    %streamSize = %fsObject.getStreamSize();
///    echo(%streamSize);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Size of stream, in bytes)
/// 
/// </summary>
public  int getStreamSize(){
return TorqueScriptTemplate.m_ts.fnStreamObject_getStreamSize(_mSimObjectId);
}
/// <summary>
/// @brief Tests if the stream has reached the end of the file
///    
///    This is an alternative name for isEOS. Both functions are interchangeable. This simply exists 
///    for those familiar with some C++ file I/O standards.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Keep reading until we reach the end of the file
///    while( !%fsObject.isEOF() )
///    {
///       %line = %fsObject.readLine();
///       echo(%line);
///    }
///    // Made it to the end
///    echo(\"Finished reading file\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return True if the parser has reached the end of the file, false otherwise
///    
///    @see isEOS())
/// 
/// </summary>
public  bool isEOF(){
return TorqueScriptTemplate.m_ts.fnStreamObject_isEOF(_mSimObjectId);
}
/// <summary>
/// @brief Tests if the stream has reached the end of the file
///    
///    This is an alternative name for isEOF. Both functions are interchangeable. This simply exists 
///    for those familiar with some C++ file I/O standards.
/// 
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Keep reading until we reach the end of the file
///    while( !%fsObject.isEOS() )
///    {
///       %line = %fsObject.readLine();
///       echo(%line);
///    }
///    // Made it to the end
///    echo(\"Finished reading file\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return True if the parser has reached the end of the file, false otherwise
/// 
///    @see isEOF())
/// 
/// </summary>
public  bool isEOS(){
return TorqueScriptTemplate.m_ts.fnStreamObject_isEOS(_mSimObjectId);
}
/// <summary>
/// @brief Read a line from the stream.
///    
///    Emphasis on *line*, as in you cannot parse individual characters or chunks of data. 
///    There is no limitation as to what kind of data you can read.
///    
///    @tsexample
///    // Create a file stream object for reading
///    // This file contains the following two lines:
///    // HelloWorld
///    // HelloWorld
///    %fsObject = new FileStreamObject();
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Read in the first line
///    %line = %fsObject.readLine();
///    // Print the line we just read
///    echo(%line);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return String containing the line of data that was just read
///    
///    @see writeLine())
/// 
/// </summary>
public  string readLine(){
return TorqueScriptTemplate.m_ts.fnStreamObject_readLine(_mSimObjectId);
}
/// <summary>
/// @brief Read in a string up to the given maximum number of characters.
///    @param maxLength The maximum number of characters to read in.
///    @return The string that was read from the stream.
///    @see writeLongString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>
public  string readLongString(int maxLength){
return TorqueScriptTemplate.m_ts.fnStreamObject_readLongString(_mSimObjectId, maxLength);
}
/// <summary>
/// @brief Read a string up to a maximum of 256 characters
///    @return The string that was read from the stream.
///    @see writeString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>
public  string readString(){
return TorqueScriptTemplate.m_ts.fnStreamObject_readString(_mSimObjectId);
}
/// <summary>
/// @brief Read in a string and place it on the string table.
///    @param caseSensitive If false then case will not be taken into account when attempting 
///    to match the read in string with what is already in the string table.
///    @return The string that was read from the stream.
///    @see writeString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>
public  string readSTString(bool caseSensitive){
return TorqueScriptTemplate.m_ts.fnStreamObject_readSTString(_mSimObjectId, caseSensitive);
}
/// <summary>
/// @brief Gets the position in the stream
///    
///    The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
///    five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
///    For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
///    the null terminator, and a newline. Using setPosition allows you to skip to specific points of the file.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains the following two lines:
///    // 11111111111
///    // Hello World
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Skip ahead by 12, which will bypass the first line entirely
///    %fsObject.setPosition(12);
///    // Read in the next line
///    %line = %fsObject.readLine();
///    // Print the line just read in, should be \"Hello World\"
///    echo(%line);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Number of bytes which stream has parsed so far, null terminators and newlines are included
///    
///    @see getPosition())
/// 
/// </summary>
public  bool setPosition(int newPosition){
return TorqueScriptTemplate.m_ts.fnStreamObject_setPosition(_mSimObjectId, newPosition);
}
/// <summary>
/// @brief Write a line to the stream, if it was opened for writing.
///    
///    There is no limit as to what kind of data you can write. Any format and data is allowable, not just text. 
///    Be careful of what you write, as whitespace, current values, and literals will be preserved.
/// 
///    @param line The data we are writing out to file.
///    
///    @tsexample
///    // Create a file stream
///    %fsObject = new FileStreamObject();
///    // Open the file for writing
///    // If it does not exist, it is created. If it does exist, the file is cleared
///    %fsObject.open(\"./test.txt\", \"write\");
///    // Write a line to the file
///    %fsObject.writeLine(\"Hello World\");
///    // Write another line to the file
///    %fsObject.writeLine(\"Documentation Rocks!\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
///    
///    @see readLine())
/// 
/// </summary>
public  void writeLine(string line){
TorqueScriptTemplate.m_ts.fnStreamObject_writeLine(_mSimObjectId, line);
}
/// <summary>
/// @brief Write out a string up to the maximum number of characters.
///    @param maxLength The maximum number of characters that will be written.
///    @param string The string to write out to the stream.
///    @see readLongString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>
public  void writeLongString(int maxLength, string xstring){
TorqueScriptTemplate.m_ts.fnStreamObject_writeLongString(_mSimObjectId, maxLength, xstring);
}
/// <summary>
/// @brief Write out a string with a default maximum length of 256 characters.
///    @param string The string to write out to the stream
///    @param maxLength The maximum string length to write out with a default of 256 characters.  This 
///    value should not be larger than 256 as it is written to the stream as a single byte.
///    @see readString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>
public  void writeString(string xstring, int maxLength){
TorqueScriptTemplate.m_ts.fnStreamObject_writeString(_mSimObjectId, xstring, maxLength);
}
}}
