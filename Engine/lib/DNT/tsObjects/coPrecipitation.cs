
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoPrecipitation : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coPrecipitation(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoPrecipitation))]
    public class coPrecipitation: coGameBase
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPrecipitation(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPrecipitation(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coPrecipitation(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coPrecipitation ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coPrecipitation ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coPrecipitation ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPrecipitation(string ts)
            {
            return new coPrecipitation(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coPrecipitation ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPrecipitation(int ts)
            {
            return new coPrecipitation(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coPrecipitation ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coPrecipitation(uint ts)
            {
            return new coPrecipitation(ts);
            }
/// <summary>
/// Set to true to enable splash animations when drops collide with other surfaces. 
/// </summary>
public bool animateSplashes
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".animateSplashes").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".animateSplashes", value.AsString());
          }
       }
/// <summary>
/// Height (vertical dimension) of the precipitation box. 
/// </summary>
public float boxHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxHeight").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxHeight", value.AsString());
          }
       }
/// <summary>
/// Width and depth (horizontal dimensions) of the precipitation box. 
/// </summary>
public float boxWidth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".boxWidth").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".boxWidth", value.AsString());
          }
       }
/// <summary>
/// @brief Allow drops to collide with world objects.\n\n     If #animateSplashes is true, drops that collide with another object      will produce a simple splash animation.\n     @note This can be expensive as each drop will perform a raycast when      it is created to determine where it will hit. 
/// </summary>
public bool doCollision
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".doCollision").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".doCollision", value.AsString());
          }
       }
/// <summary>
/// @brief Length (in milliseconds) to display each drop frame.\n\n     If #dropAnimateMS = 0, drops select a single random frame at creation      that does not change throughout the drop's lifetime. If #dropAnimateMS       0, each drop cycles through the the available frames in the drop      texture at the given rate. 
/// </summary>
public int dropAnimateMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dropAnimateMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dropAnimateMS", value.AsString());
          }
       }
/// <summary>
/// Size of each drop of precipitation. This will scale the texture. 
/// </summary>
public float dropSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dropSize").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dropSize", value.AsString());
          }
       }
/// <summary>
/// The distance at which drops begin to fade out. 
/// </summary>
public float fadeDist
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeDist").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeDist", value.AsString());
          }
       }
/// <summary>
/// The distance at which drops are completely faded out. 
/// </summary>
public float fadeDistEnd
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fadeDistEnd").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fadeDistEnd", value.AsString());
          }
       }
/// <summary>
/// @brief Controls whether the Precipitation system follows the camera      or remains where it is first placed in the scene.\n\n     Set to true to make it seem like it is raining everywhere in the      level (ie. the Player will always be in the rain). Set to false      to have a single area affected by rain (ie. the Player can move in      and out of the rainy area). 
/// </summary>
public bool followCam
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".followCam").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".followCam", value.AsString());
          }
       }
private ColorF _glowIntensity = null;
/// <summary>
/// Set to 0 to disable the glow or or use it to control the intensity of each channel. 
/// </summary>
public ColorF glowIntensity
       {
       get
          {
          if (_glowIntensity!=null)
              _glowIntensity.DetachAllEvents();
           _glowIntensity = dnTorque.self.GetVar(_mSimObjectId + ".glowIntensity").AsColorF();
          _glowIntensity.OnChangeNotification +=_glowIntensity_OnChangeNotification;
          return _glowIntensity;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".glowIntensity", value.AsString());
          }
       }
void _glowIntensity_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".glowIntensity", e.NewValue);
       }
/// <summary>
/// Allow drops to collide with Player objects; only valid if #doCollision is true. 
/// </summary>
public bool hitPlayers
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".hitPlayers").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".hitPlayers", value.AsString());
          }
       }
/// <summary>
/// Allow drops to collide with Vehicle objects; only valid if #doCollision is true. 
/// </summary>
public bool hitVehicles
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".hitVehicles").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".hitVehicles", value.AsString());
          }
       }
/// <summary>
/// @brief Maximum mass of a drop.\n\n     Drop mass determines how strongly the drop is affected by wind and      turbulence. On creation, the drop will be assigned a random speed      between #minMass and #minMass. 
/// </summary>
public float maxMass
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxMass").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxMass", value.AsString());
          }
       }
/// <summary>
/// @brief Maximum speed at which a drop will fall.\n\n     On creation, the drop will be assigned a random speed between #minSpeed      and #maxSpeed. 
/// </summary>
public float maxSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSpeed", value.AsString());
          }
       }
/// <summary>
/// Radius at which precipitation drops spiral when turbulence is enabled. 
/// </summary>
public float maxTurbulence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxTurbulence").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxTurbulence", value.AsString());
          }
       }
/// <summary>
/// @brief Minimum mass of a drop.\n\n     Drop mass determines how strongly the drop is affected by wind and      turbulence. On creation, the drop will be assigned a random speed      between #minMass and #minMass. 
/// </summary>
public float minMass
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minMass").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minMass", value.AsString());
          }
       }
/// <summary>
/// @brief Minimum speed at which a drop will fall.\n\n     On creation, the drop will be assigned a random speed between #minSpeed      and #maxSpeed. 
/// </summary>
public float minSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minSpeed", value.AsString());
          }
       }
/// <summary>
/// @brief Maximum number of drops allowed to exist in the precipitation      box at any one time.\n\n     The actual number of drops in the effect depends on the current      percentage, which can change over time using modifyStorm(). 
/// </summary>
public int numDrops
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".numDrops").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".numDrops", value.AsString());
          }
       }
/// <summary>
/// @brief This enables precipitation rendering during reflection passes.\n\n     @note This is expensive. 
/// </summary>
public bool reflect
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflect").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflect", value.AsString());
          }
       }
/// <summary>
/// Set to true to include the camera velocity when calculating drop      rotation speed. 
/// </summary>
public bool rotateWithCamVel
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rotateWithCamVel").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rotateWithCamVel", value.AsString());
          }
       }
/// <summary>
/// Lifetime of splashes in milliseconds. 
/// </summary>
public int splashMS
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashMS").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashMS", value.AsString());
          }
       }
/// <summary>
/// Size of each splash animation when a drop collides with another surface. 
/// </summary>
public float splashSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".splashSize").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".splashSize", value.AsString());
          }
       }
/// <summary>
/// Speed at which precipitation drops spiral when turbulence is enabled. 
/// </summary>
public float turbulenceSpeed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".turbulenceSpeed").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".turbulenceSpeed", value.AsString());
          }
       }
/// <summary>
/// Set to true to enable shading of the drops and splashes by the sun color. 
/// </summary>
public bool useLighting
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useLighting").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useLighting", value.AsString());
          }
       }
/// <summary>
/// Set to true to make drops true (non axis-aligned) billboards. 
/// </summary>
public bool useTrueBillboards
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useTrueBillboards").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useTrueBillboards", value.AsString());
          }
       }
/// <summary>
/// Check to enable turbulence. This causes precipitation drops to spiral      while falling. 
/// </summary>
public bool useTurbulence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useTurbulence").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useTurbulence", value.AsString());
          }
       }
/// <summary>
/// Controls whether drops are affected by wind.\n     @see ForestWindEmitter 
/// </summary>
public bool useWind
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useWind").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useWind", value.AsString());
          }
       }
/// <summary>
/// Smoothly change the maximum number of drops in the effect (from current 
///    value to #numDrops * @a percentage).
///    This method can be used to simulate a storm building or fading in intensity 
///    as the number of drops in the Precipitation box changes.
///    @param percentage New maximum number of drops value (as a percentage of 
///    #numDrops). Valid range is 0-1.
///    @param seconds Length of time (in seconds) over which to increase the drops 
///    percentage value. Set to 0 to change instantly.
///    @tsexample
///    %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
///    %seconds = 5.0;     // The length of time over which to make the change.
///    %precipitation.modifyStorm( %percentage, %seconds );
///    @endtsexample )
/// 
/// </summary>
public  void modifyStorm(float percentage, float seconds){
TorqueScriptTemplate.m_ts.fnPrecipitation_modifyStorm(_mSimObjectId, percentage, seconds);
}
/// <summary>
/// Sets the maximum number of drops in the effect, as a percentage of #numDrops.
///    The change occurs instantly (use modifyStorm() to change the number of drops 
///    over a period of time.
///    @param percentage New maximum number of drops value (as a percentage of 
///    #numDrops). Valid range is 0-1.
///    @tsexample
///    %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
///    %precipitation.setPercentage( %percentage );
///    @endtsexample
///    @see modifyStorm )
/// 
/// </summary>
public  void setPercentage(float percentage){
TorqueScriptTemplate.m_ts.fnPrecipitation_setPercentage(_mSimObjectId, percentage);
}
/// <summary>
/// Smoothly change the turbulence parameters over a period of time.
///    @param max New #maxTurbulence value. Set to 0 to disable turbulence.
///    @param speed New #turbulenceSpeed value.
///    @param seconds Length of time (in seconds) over which to interpolate the 
///    turbulence settings. Set to 0 to change instantly.
///    @tsexample
///    %turbulence = 0.5;     // Set the new turbulence value. Set to 0 to disable turbulence.
///    %speed = 5.0;          // The new speed of the turbulance effect.
///    %seconds = 5.0;        // The length of time over which to make the change.
///    %precipitation.setTurbulence( %turbulence, %speed, %seconds );
///    @endtsexample )
/// 
/// </summary>
public  void setTurbulence(float max, float speed, float seconds){
TorqueScriptTemplate.m_ts.fnPrecipitation_setTurbulence(_mSimObjectId, max, speed, seconds);
}
}}
