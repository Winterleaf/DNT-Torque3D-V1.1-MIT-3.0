
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoItemData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coItemData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoItemData))]
    public class coItemData: coShapeBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coItemData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coItemData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coItemData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coItemData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coItemData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coItemData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coItemData(string ts)
            {
            return new coItemData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coItemData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coItemData(int ts)
            {
            return new coItemData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coItemData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coItemData(uint ts)
            {
            return new coItemData(ts);
            }
/// <summary>
/// A floating-point value specifying how 'bouncy' this ItemData is.
/// </summary>
public float elasticity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".elasticity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".elasticity", value.AsString());
          }
       }
/// <summary>
/// A floating-point value specifying how much velocity is lost to impact and sliding friction.
/// </summary>
public float friction
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".friction").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".friction", value.AsString());
          }
       }
/// <summary>
/// Floating point value to multiply the existing gravity with, just for this ItemData.
/// </summary>
public float gravityMod
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".gravityMod").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".gravityMod", value.AsString());
          }
       }
private ColorF _lightColor = null;
/// <summary>
/// @brief Color value to make this light. Example: \1.0,1.0,1.0\\n\n   @see lightType\n
/// </summary>
public ColorF lightColor
       {
       get
          {
          if (_lightColor!=null)
              _lightColor.DetachAllEvents();
           _lightColor = dnTorque.self.GetVar(_mSimObjectId + ".lightColor").AsColorF();
          _lightColor.OnChangeNotification +=_lightColor_OnChangeNotification;
          return _lightColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightColor", value.AsString());
          }
       }
void _lightColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".lightColor", e.NewValue);
       }
/// <summary>
/// @brief If true, this ItemData will only cast a light if the Item for this ItemData has a static value of true.\n\n   @see lightType\n
/// </summary>
public bool lightOnlyStatic
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightOnlyStatic").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightOnlyStatic", value.AsString());
          }
       }
/// <summary>
/// @brief Distance from the center point of this ItemData for the light to affect\n\n   @see lightType\n
/// </summary>
public float lightRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightRadius", value.AsString());
          }
       }
/// <summary>
/// @brief Time value for the light of this ItemData, used to control the pulse speed of the PulsingLight LightType.\n\n   @see lightType\n
/// </summary>
public int lightTime
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lightTime").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightTime", value.AsString());
          }
       }
/// <summary>
/// Type of light to apply to this ItemData. Options are NoLight, ConstantLight, PulsingLight. Default is NoLight. 
/// </summary>
public Item__LightType lightType
       {
       get
          {          return (Item__LightType)Enum.Parse(typeof(Item__LightType), dnTorque.self.GetVar(_mSimObjectId + ".lightType"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lightType", value.ToString());
          }
       }
/// <summary>
/// Maximum velocity that this ItemData is able to move.
/// </summary>
public float maxVelocity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxVelocity").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxVelocity", value.AsString());
          }
       }
/// <summary>
/// @brief Determines if only simple server-side collision will be used (for pick ups).\n\n   If set to true then only simple, server-side collision detection will be used. This is often the case    if the item is used for a pick up object, such as ammo. If set to false then a full collision volume    will be used as defined by the shape. The default is true.\n   @note Only applies when using a physics library.\n   @see TurretShape and ProximityMine for examples that should set this to false to allow them to be    shot by projectiles.\n
/// </summary>
public bool simpleServerCollision
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".simpleServerCollision").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".simpleServerCollision", value.AsString());
          }
       }
/// <summary>
/// @brief If true, ItemData will 'stick' to any surface it collides with.\n\n   When an item does stick to a surface, the Item::onStickyCollision() callback is called. The Item has methods to retrieve    the world position and normal the Item is stuck to.\n   @note Valid objects to stick to must be of StaticShapeObjectType.\n
/// </summary>
public bool sticky
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sticky").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sticky", value.AsString());
          }
       }
}}
