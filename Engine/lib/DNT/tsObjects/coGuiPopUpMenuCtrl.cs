
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiPopUpMenuCtrl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiPopUpMenuCtrl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiPopUpMenuCtrl))]
    public class coGuiPopUpMenuCtrl: coGuiTextCtrl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiPopUpMenuCtrl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiPopUpMenuCtrl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiPopUpMenuCtrl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiPopUpMenuCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiPopUpMenuCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiPopUpMenuCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiPopUpMenuCtrl(string ts)
            {
            return new coGuiPopUpMenuCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiPopUpMenuCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiPopUpMenuCtrl(int ts)
            {
            return new coGuiPopUpMenuCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiPopUpMenuCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiPopUpMenuCtrl(uint ts)
            {
            return new coGuiPopUpMenuCtrl(ts);
            }
/// <summary>
/// 
/// </summary>
public String bitmap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bitmap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bitmap", value.AsString());
          }
       }
private Point2I _bitmapBounds = null;
/// <summary>
/// 
/// </summary>
public Point2I bitmapBounds
       {
       get
          {
          if (_bitmapBounds!=null)
              _bitmapBounds.DetachAllEvents();
           _bitmapBounds = dnTorque.self.GetVar(_mSimObjectId + ".bitmapBounds").AsPoint2I();
          _bitmapBounds.OnChangeNotification +=_bitmapBounds_OnChangeNotification;
          return _bitmapBounds;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bitmapBounds", value.AsString());
          }
       }
void _bitmapBounds_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".bitmapBounds", e.NewValue);
       }
/// <summary>
/// 
/// </summary>
public int maxPopupHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxPopupHeight").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxPopupHeight", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool reverseTextList
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reverseTextList").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reverseTextList", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool sbUsesNAColor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sbUsesNAColor").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sbUsesNAColor", value.AsString());
          }
       }
/// <summary>
/// ( GuiPopUpMenuCtrl, add, void, 3, 5, (string name, int idNum, int scheme=0))
/// 
/// </summary>
public  void add(string a2, string a3= "", string a4= ""){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_add(_mSimObjectId, a2, a3, a4);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, addScheme, void, 6, 6, (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
/// 
/// </summary>
public  void addScheme(string a2, string a3, string a4, string a5){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_addScheme(_mSimObjectId, a2, a3, a4, a5);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, changeTextById, void, 4, 4, ( int id, string text ) )
/// 
/// </summary>
public  void changeTextById(string a2, string a3){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_changeTextById(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, clear, void, 2, 2, Clear the popup list.)
/// 
/// </summary>
public  new  void clear(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_clear(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, clearEntry, void, 3, 3, (S32 entry))
/// 
/// </summary>
public  void clearEntry(string a2){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_clearEntry(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, findText, S32, 3, 3, (string text)
///               Returns the position of the first entry containing the specified text.)
/// 
/// </summary>
public  int findText(string a2){
return TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_findText(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, forceClose, void, 2, 2, )
/// 
/// </summary>
public  void forceClose(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_forceClose(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, forceOnAction, void, 2, 2, )
/// 
/// </summary>
public  void forceOnAction(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_forceOnAction(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getSelected, S32, 2, 2, )
/// 
/// </summary>
public  int getSelected(){
return TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_getSelected(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getText, const char*, 2, 2, )
/// 
/// </summary>
public  string getText(){
return TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_getText(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getTextById, const char*, 3, 3,  (int id))
/// 
/// </summary>
public  string getTextById(string a2){
return TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_getTextById(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, replaceText, void, 3, 3, (bool doReplaceText))
/// 
/// </summary>
public  void replaceText(string a2){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_replaceText(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setEnumContent, void, 4, 4, (string class, string enum)
///               This fills the popup with a classrep's field enumeration type info.
///               More of a helper function than anything.   If console access to the field list is added, 
///               at least for the enumerated types, then this should go away..)
/// 
/// </summary>
public  void setEnumContent(string a2, string a3){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_setEnumContent(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setFirstSelected, void, 2, 3, ([scriptCallback=true]))
/// 
/// </summary>
public  void setFirstSelected(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_setFirstSelected(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setNoneSelected, void, 2, 2, )
/// 
/// </summary>
public  void setNoneSelected(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_setNoneSelected(_mSimObjectId);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setSelected, void, 3, 4, (int id, [scriptCallback=true]))
/// 
/// </summary>
public  void setSelected(string a2, string a3= ""){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_setSelected(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, size, S32, 2, 2, Get the size of the menu - the number of entries in it.)
/// 
/// </summary>
public  int size(){
return TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_size(_mSimObjectId);
}
/// <summary>
/// (GuiPopUpMenuCtrl, sort, void, 2, 2, Sort the list alphabetically.)
/// 
/// </summary>
public  void sort(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_sort(_mSimObjectId);
}
/// <summary>
/// (GuiPopUpMenuCtrl, sortID, void, 2, 2, Sort the list by ID.)
/// 
/// </summary>
public  void sortID(){
TorqueScriptTemplate.m_ts.fnGuiPopUpMenuCtrl_sortID(_mSimObjectId);
}
}}
