
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGroundCover : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGroundCover(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGroundCover))]
    public class coGroundCover: coSceneObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGroundCover(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGroundCover(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGroundCover(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGroundCover ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGroundCover ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGroundCover ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGroundCover(string ts)
            {
            return new coGroundCover(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGroundCover ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGroundCover(int ts)
            {
            return new coGroundCover(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGroundCover ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGroundCover(uint ts)
            {
            return new coGroundCover(ts);
            }
private RectF _billboardUVs = null;
/// <summary>
/// Subset material UV coordinates for this cover billboard. 
/// </summary>
public RectF billboardUVs
       {
       get
          {
          if (_billboardUVs!=null)
              _billboardUVs.DetachAllEvents();
           _billboardUVs = dnTorque.self.GetVar(_mSimObjectId + ".billboardUVs").AsRectF();
          _billboardUVs.OnChangeNotification +=_billboardUVs_OnChangeNotification;
          return _billboardUVs;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".billboardUVs", value.AsString());
          }
       }
void _billboardUVs_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".billboardUVs", e.NewValue);
       }
/// <summary>
/// An exponent used to bias between the minimum and maximum clump counts for a particular clump. 
/// </summary>
public float clumpExponent
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".clumpExponent").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".clumpExponent", value.AsString());
          }
       }
/// <summary>
/// The maximum clump radius. 
/// </summary>
public float clumpRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".clumpRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".clumpRadius", value.AsString());
          }
       }
/// <summary>
/// This is less than or equal to radius and defines when fading of cover elements begins. 
/// </summary>
public float dissolveRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dissolveRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dissolveRadius", value.AsString());
          }
       }
/// <summary>
/// The number of cells per axis in the grid. 
/// </summary>
public int gridSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".gridSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".gridSize", value.AsString());
          }
       }
/// <summary>
/// Indicates that the terrain material index given in 'layer' is an exclusion mask. 
/// </summary>
public bool invertLayer
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".invertLayer").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".invertLayer", value.AsString());
          }
       }
/// <summary>
/// Terrain material name to limit coverage to, or blank to not limit. 
/// </summary>
public String layer
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".layer").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".layer", value.AsString());
          }
       }
/// <summary>
/// Debug parameter for locking the culling frustum which will freeze the cover generation. 
/// </summary>
public bool lockFrustum
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".lockFrustum").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lockFrustum", value.AsString());
          }
       }
/// <summary>
/// Material used by all GroundCover segments. 
/// </summary>
public String material
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".material").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".material", value.AsString());
          }
       }
/// <summary>
/// The maximum amout of degrees the billboard will tilt down to match the camera. 
/// </summary>
public float maxBillboardTiltAngle
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxBillboardTiltAngle").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxBillboardTiltAngle", value.AsString());
          }
       }
/// <summary>
/// The maximum amount of elements in a clump. 
/// </summary>
public int maxClumpCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxClumpCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxClumpCount", value.AsString());
          }
       }
/// <summary>
/// The maximum amount of cover elements to include in the grid at any one time. 
/// </summary>
public int maxElements
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxElements").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxElements", value.AsString());
          }
       }
/// <summary>
/// The maximum world space elevation for placement. 
/// </summary>
public float maxElevation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxElevation").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxElevation", value.AsString());
          }
       }
/// <summary>
/// The maximum slope angle in degrees for placement. 
/// </summary>
public float maxSlope
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxSlope").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxSlope", value.AsString());
          }
       }
/// <summary>
/// The minimum amount of elements in a clump. 
/// </summary>
public int minClumpCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minClumpCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minClumpCount", value.AsString());
          }
       }
/// <summary>
/// The minimum world space elevation for placement. 
/// </summary>
public float minElevation
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".minElevation").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".minElevation", value.AsString());
          }
       }
/// <summary>
/// Debug parameter for turning off billboard rendering. 
/// </summary>
public bool noBillboards
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".noBillboards").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".noBillboards", value.AsString());
          }
       }
/// <summary>
/// Debug parameter for turning off shape rendering. 
/// </summary>
public bool noShapes
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".noShapes").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".noShapes", value.AsString());
          }
       }
/// <summary>
/// The probability of one cover type verses another (relative to all cover types). 
/// </summary>
public float probability
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".probability").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".probability", value.AsString());
          }
       }
/// <summary>
/// Outer generation radius from the current camera position. 
/// </summary>
public float radius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".radius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".radius", value.AsString());
          }
       }
/// <summary>
/// Scales the various culling radii when rendering a reflection. Typically for water. 
/// </summary>
public float reflectScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".reflectScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".reflectScale", value.AsString());
          }
       }
/// <summary>
/// Debug parameter for displaying the grid cells. 
/// </summary>
public bool renderCells
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".renderCells").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderCells", value.AsString());
          }
       }
/// <summary>
/// This RNG seed is saved and sent to clients for generating the same cover. 
/// </summary>
public int seed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".seed").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".seed", value.AsString());
          }
       }
/// <summary>
/// This is the distance at which DTS elements are completely culled out. 
/// </summary>
public float shapeCullRadius
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeCullRadius").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeCullRadius", value.AsString());
          }
       }
/// <summary>
/// The cover shape filename. [Optional] 
/// </summary>
public String shapeFilename
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeFilename").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeFilename", value.AsString());
          }
       }
/// <summary>
/// Whether DTS elements should cast shadows or not. 
/// </summary>
public bool shapesCastShadows
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapesCastShadows").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapesCastShadows", value.AsString());
          }
       }
/// <summary>
/// An exponent used to bias between the minimum and maximum random sizes. 
/// </summary>
public float sizeExponent
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sizeExponent").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizeExponent", value.AsString());
          }
       }
/// <summary>
/// The maximum random size of this cover type. 
/// </summary>
public float sizeMax
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sizeMax").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizeMax", value.AsString());
          }
       }
/// <summary>
/// The minimum random size for each cover type. 
/// </summary>
public float sizeMin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sizeMin").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizeMin", value.AsString());
          }
       }
private Point2F _windDirection = null;
/// <summary>
/// The direction of the wind. 
/// </summary>
public Point2F windDirection
       {
       get
          {
          if (_windDirection!=null)
              _windDirection.DetachAllEvents();
           _windDirection = dnTorque.self.GetVar(_mSimObjectId + ".windDirection").AsPoint2F();
          _windDirection.OnChangeNotification +=_windDirection_OnChangeNotification;
          return _windDirection;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windDirection", value.AsString());
          }
       }
void _windDirection_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".windDirection", e.NewValue);
       }
/// <summary>
/// Controls how often the wind gust peaks per second. 
/// </summary>
public float windGustFrequency
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windGustFrequency").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windGustFrequency", value.AsString());
          }
       }
/// <summary>
/// The length in meters between peaks in the wind gust. 
/// </summary>
public float windGustLength
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windGustLength").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windGustLength", value.AsString());
          }
       }
/// <summary>
/// The maximum distance in meters that the peak wind gust will displace an element. 
/// </summary>
public float windGustStrength
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windGustStrength").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windGustStrength", value.AsString());
          }
       }
/// <summary>
/// The wind effect scale. 
/// </summary>
public float windScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windScale").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windScale", value.AsString());
          }
       }
/// <summary>
/// Controls the overall rapidity of the wind turbulence. 
/// </summary>
public float windTurbulenceFrequency
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windTurbulenceFrequency").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windTurbulenceFrequency", value.AsString());
          }
       }
/// <summary>
/// The maximum distance in meters that the turbulence can displace a ground cover element. 
/// </summary>
public float windTurbulenceStrength
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".windTurbulenceStrength").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".windTurbulenceStrength", value.AsString());
          }
       }
/// <summary>
/// Offset along the Z axis to render the ground cover. 
/// </summary>
public float zOffset
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zOffset").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zOffset", value.AsString());
          }
       }
}}
