
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiEditCtrl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiEditCtrl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiEditCtrl))]
    public class coGuiEditCtrl: coGuiControl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiEditCtrl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiEditCtrl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiEditCtrl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiEditCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiEditCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiEditCtrl(string ts)
            {
            return new coGuiEditCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiEditCtrl(int ts)
            {
            return new coGuiEditCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiEditCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiEditCtrl(uint ts)
            {
            return new coGuiEditCtrl(ts);
            }
/// <summary>
/// If true, lines will be drawn extending along the edges of selected objects. 
/// </summary>
public bool drawBorderLines
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".drawBorderLines").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".drawBorderLines", value.AsString());
          }
       }
/// <summary>
/// If true, guides will be included in rendering. 
/// </summary>
public bool drawGuides
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".drawGuides").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".drawGuides", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public String editCtrl
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".editCtrl").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".editCtrl", value.AsString());
          }
       }
/// <summary>
/// If true, rectangle selection will only select controls fully inside the drag rectangle. 
/// </summary>
public bool fullBoxSelection
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fullBoxSelection").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fullBoxSelection", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public String refCtrl
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".refCtrl").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".refCtrl", value.AsString());
          }
       }
/// <summary>
/// Distance in pixels that edge and center snapping will work across. 
/// </summary>
public int snapSensitivity
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapSensitivity").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapSensitivity", value.AsString());
          }
       }
/// <summary>
/// If true, edge and center snapping will work against canvas (toplevel control). 
/// </summary>
public bool snapToCanvas
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapToCanvas").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapToCanvas", value.AsString());
          }
       }
/// <summary>
/// If true, selection centers will snap into alignment when moved or resized. 
/// </summary>
public bool snapToCenters
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapToCenters").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapToCenters", value.AsString());
          }
       }
/// <summary>
/// If true, edge and center snapping will work against controls. 
/// </summary>
public bool snapToControls
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapToControls").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapToControls", value.AsString());
          }
       }
/// <summary>
/// If true, selection edges will snap into alignment when moved or resized. 
/// </summary>
public bool snapToEdges
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapToEdges").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapToEdges", value.AsString());
          }
       }
/// <summary>
/// If true, edge and center snapping will work against guides. 
/// </summary>
public bool snapToGuides
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".snapToGuides").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".snapToGuides", value.AsString());
          }
       }
/// <summary>
/// ( GuiEditCtrl, addNewCtrl, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>
public  void addNewCtrl(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_addNewCtrl(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, addSelection, void, 3, 3, selects a control.)
/// 
/// </summary>
public  void addSelection(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_addSelection(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, bringToFront, void, 2, 2, )
/// 
/// </summary>
public  void bringToFront(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_bringToFront(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, clearGuides, void, 2, 3, ( [ int axis ] ) - Clear all currently set guide lines. )
/// 
/// </summary>
public  void clearGuides(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_clearGuides(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, clearSelection, void, 2, 2, Clear selected controls list.)
/// 
/// </summary>
public  void clearSelection(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_clearSelection(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, deleteSelection, void, 2, 2, () - Delete the selected controls.)
/// 
/// </summary>
public  void deleteSelection(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_deleteSelection(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, fitIntoParents, void, 2, 4, ( bool width=true, bool height=true ) - Fit selected controls into their parents. )
/// 
/// </summary>
public  void fitIntoParents(string a2= "", string a3= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_fitIntoParents(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiEditCtrl, getContentControl, S32, 2, 2, () - Return the toplevel control edited inside the GUI editor. )
/// 
/// </summary>
public  int getContentControl(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getContentControl(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, getCurrentAddSet, S32, 2, 2, Returns the set to which new controls will be added)
/// 
/// </summary>
public  int getCurrentAddSet(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getCurrentAddSet(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, getMouseMode, const char*, 2, 2, () - Return the current mouse mode. )
/// 
/// </summary>
public  string getMouseMode(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getMouseMode(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, getNumSelected, S32, 2, 2, () - Return the number of controls currently selected. )
/// 
/// </summary>
public  int getNumSelected(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getNumSelected(_mSimObjectId);
}
/// <summary>
/// Gets the set of GUI controls currently selected in the editor. )
/// 
/// </summary>
public  string getSelection(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getSelection(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, getSelectionGlobalBounds, const char*, 2, 2, () - Returns global bounds of current selection as vector 'x y width height'. )
/// 
/// </summary>
public  string getSelectionGlobalBounds(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getSelectionGlobalBounds(_mSimObjectId);
}
/// <summary>
/// Gets the GUI controls(s) that are currently in the trash.)
/// 
/// </summary>
public  string getTrash(){
return TorqueScriptTemplate.m_ts.fnGuiEditCtrl_getTrash(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, justify, void, 3, 3, (int mode) )
/// 
/// </summary>
public  void justify(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_justify(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, loadSelection, void, 2, 3, ( string fileName=null ) - Load selection from file or clipboard.)
/// 
/// </summary>
public  void loadSelection(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_loadSelection(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, moveSelection, void, 4, 4, (int dx, int dy) - Move all controls in the selection by (dx,dy) pixels.)
/// 
/// </summary>
public  void moveSelection(string a2, string a3){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_moveSelection(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiEditCtrl, pushToBack, void, 2, 2, )
/// 
/// </summary>
public  void pushToBack(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_pushToBack(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, readGuides, void, 3, 4, ( GuiControl ctrl [, int axis ] ) - Read the guides from the given control. )
/// 
/// </summary>
public  void readGuides(string a2, string a3= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_readGuides(_mSimObjectId, a2, a3);
}
/// <summary>
/// ( GuiEditCtrl, removeSelection, void, 3, 3, deselects a control.)
/// 
/// </summary>
public  void removeSelection(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_removeSelection(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, saveSelection, void, 2, 3, ( string fileName=null ) - Save selection to file or clipboard.)
/// 
/// </summary>
public  void saveSelection(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_saveSelection(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, select, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>
public  void select(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_select(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, selectAll, void, 2, 2, ())
/// 
/// </summary>
public  void selectAll(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_selectAll(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, selectChildren, void, 2, 3, ( bool addToSelection=false ) - Select children of currently selected controls. )
/// 
/// </summary>
public  void selectChildren(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_selectChildren(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, selectParents, void, 2, 3, ( bool addToSelection=false ) - Select parents of currently selected controls. )
/// 
/// </summary>
public  void selectParents(string a2= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_selectParents(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, setContentControl, void, 3, 3, ( GuiControl ctrl ) - Set the toplevel control to edit in the GUI editor. )
/// 
/// </summary>
public  void setContentControl(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_setContentControl(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, setCurrentAddSet, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>
public  void setCurrentAddSet(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_setCurrentAddSet(_mSimObjectId, a2);
}
/// <summary>
/// (GuiEditCtrl, setSnapToGrid, void, 3, 3, GuiEditCtrl.setSnapToGrid(gridsize))
/// 
/// </summary>
public  void setSnapToGrid(string a2){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_setSnapToGrid(_mSimObjectId, a2);
}
/// <summary>
/// ( GuiEditCtrl, toggle, void, 2, 2, Toggle activation.)
/// 
/// </summary>
public  void toggle(){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_toggle(_mSimObjectId);
}
/// <summary>
/// ( GuiEditCtrl, writeGuides, void, 3, 4, ( GuiControl ctrl [, int axis ] ) - Write the guides to the given control. )
/// 
/// </summary>
public  void writeGuides(string a2, string a3= ""){
TorqueScriptTemplate.m_ts.fnGuiEditCtrl_writeGuides(_mSimObjectId, a2, a3);
}
}}
