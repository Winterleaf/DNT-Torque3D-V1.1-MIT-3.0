
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoTSShapeConstructor : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coTSShapeConstructor(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoTSShapeConstructor))]
    public class coTSShapeConstructor: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coTSShapeConstructor(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coTSShapeConstructor(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coTSShapeConstructor(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coTSShapeConstructor ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coTSShapeConstructor ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coTSShapeConstructor ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coTSShapeConstructor(string ts)
            {
            return new coTSShapeConstructor(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coTSShapeConstructor ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coTSShapeConstructor(int ts)
            {
            return new coTSShapeConstructor(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coTSShapeConstructor ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coTSShapeConstructor(uint ts)
            {
            return new coTSShapeConstructor(ts);
            }
/// <summary>
/// Translate COLLADA model on import so the origin is at the center. No effect for DTS files. 
/// </summary>
public bool adjustCenter
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".adjustCenter").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".adjustCenter", value.AsString());
          }
       }
/// <summary>
/// Translate COLLADA model on import so origin is at the (Z axis) bottom of the model. No effect for DTS files.\n   This can be used along with adjustCenter to have the origin at the    center of the bottom of the model.\n   @see adjustCenter 
/// </summary>
public bool adjustFloor
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".adjustFloor").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".adjustFloor", value.AsString());
          }
       }
/// <summary>
/// TAB separated patterns of nodes to import even if in neverImport list. No effect for DTS files.\n   Torque allows unwanted nodes in COLLADA (.dae) files to to be ignored    during import. This field contains a TAB separated list of patterns to    match node names. Any node that matches one of the patterns in the list    will balways/b be imported, even if it also matches the neverImport list\n   @see neverImport\n\n   @tsexample\n   singleton TSShapeConstructor(MyShapeDae)\n   {\n     baseShape = \./myShape.dae\;\n     alwaysImport = \mount*\ TAB \eye\;\n     neverImport = \*-PIVOT\;\n   }\n   @endtsexample 
/// </summary>
public String alwaysImport
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alwaysImport").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alwaysImport", value.AsString());
          }
       }
/// <summary>
/// TAB separated patterns of meshes to import even if in neverImportMesh list. No effect for DTS files.\n   Torque allows unwanted meshes in COLLADA (.dae) files to to be ignored    during import. This field contains a TAB separated list of patterns to    match mesh names. Any mesh that matches one of the patterns in the list    will balways/b be imported, even if it also matches the neverImportMesh list\n   @see neverImportMesh\n\n   @tsexample\n   singleton TSShapeConstructor(MyShapeDae)\n   {\n     baseShape = \./myShape.dae\;\n     alwaysImportMesh = \body*\ TAB \armor\ TAB \bounds\;\n     neverImportMesh = \*-dummy\;\n   }\n   @endtsexample 
/// </summary>
public String alwaysImportMesh
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alwaysImportMesh").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alwaysImportMesh", value.AsString());
          }
       }
/// <summary>
/// Specifies the path to the DTS or DAE file to be operated on by this object.\n   Since the TSShapeConstructor script must be in the same folder as the DTS or    DAE file, it is recommended to use a relative path so that the shape and    script files can be copied to another location without having to modify the    path. 
/// </summary>
public String baseShape
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".baseShape").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".baseShape", value.AsString());
          }
       }
/// <summary>
/// Forces update of the materials.cs file in the same folder as the COLLADA    (.dae) file, even if Materials already exist. No effect for DTS files.\n   Normally only Materials that are not already defined are written to materials.cs. 
/// </summary>
public bool forceUpdateMaterials
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".forceUpdateMaterials").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".forceUpdateMaterials", value.AsString());
          }
       }
/// <summary>
/// Ignore scale elements inside COLLADA nodes. No effect for DTS files.\n   This field is a workaround for certain exporters that generate bad node    scaling, and is not usually required. 
/// </summary>
public bool ignoreNodeScale
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ignoreNodeScale").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ignoreNodeScale", value.AsString());
          }
       }
/// <summary>
/// Control how the COLLADA (.dae) importer interprets LOD in the model. No effect for DTS files.\n   Set to one of the following values:\n   dldtDetectDTS/dtddThe default value. Instructs the importer to search for a 'baseXXX-startXXX' node hierarchy at the root level. If found, the importer acts as if ''TrailingNumber'' was set. Otherwise, all geometry is imported at a single detail size./dd   dtSingleSize/dtddAll geometry is imported at a fixed detail size. Numbers at the end of geometry node's are ignored./dd   dtTrailingNumber/dtddNumbers at the end of geometry node's name are interpreted as the detail size (similar to DTS exporting). Geometry instances with the same base name but different trailing number are grouped into the same object./dd   dtDEFAULT/dtddThe default value. Use the value in the .dae file (defaults to Z_AXIS if the up_axis element is not present)./dd/dl 
/// </summary>
public ColladaUtils__ImportOptions__eLodType lodType
       {
       get
          {          return (ColladaUtils__ImportOptions__eLodType)Enum.Parse(typeof(ColladaUtils__ImportOptions__eLodType), dnTorque.self.GetVar(_mSimObjectId + ".lodType"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".lodType", value.ToString());
          }
       }
/// <summary>
/// Prefix to apply to all material map names in the COLLADA (.dae) file. No effect for DTS files.\n   This field is useful to avoid material name clashes for exporters that generate generic material    names like \texture0\ or \material1\. 
/// </summary>
public String matNamePrefix
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".matNamePrefix").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".matNamePrefix", value.AsString());
          }
       }
/// <summary>
/// TAB separated patterns of nodes to ignore on loading. No effect for DTS files.\n   Torque allows unwanted nodes in COLLADA (.dae) files to to be ignored    during import. This field contains a TAB separated list of patterns to    match node names. Any node that matches one of the patterns in the list will    not be imported (unless it matches the alwaysImport list.\n   @see alwaysImport 
/// </summary>
public String neverImport
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".neverImport").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".neverImport", value.AsString());
          }
       }
/// <summary>
/// TAB separated patterns of meshes to ignore on loading. No effect for DTS files.\n   Torque allows unwanted meshes in COLLADA (.dae) files to to be ignored    during import. This field contains a TAB separated list of patterns to    match mesh names. Any mesh that matches one of the patterns in the list will    not be imported (unless it matches the alwaysImportMesh list.\n   @see alwaysImportMesh 
/// </summary>
public String neverImportMesh
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".neverImportMesh").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".neverImportMesh", value.AsString());
          }
       }
/// <summary>
/// Legacy method of adding sequences to a DTS or DAE shape after loading.\n\n   @tsexample\n   singleton TSShapeConstructor(MyShapeDae)\n   {\n     baseShape = \./myShape.dae\;\n     sequence = \../anims/root.dae root\;\n     sequence = \../anims/walk.dae walk\;\n     sequence = \../anims/jump.dsq jump\;\n   }\n   @endtsexample 
/// </summary>
public String sequence
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sequence").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sequence", value.AsString());
          }
       }
/// <summary>
/// Sets the detail size when lodType is set to SingleSize. No effect otherwise, and no effect for DTS files.\n   @see lodType 
/// </summary>
public int singleDetailSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".singleDetailSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".singleDetailSize", value.AsString());
          }
       }
/// <summary>
/// Override the unit element in the COLLADA (.dae) file. No effect for DTS files.\n   COLLADA (.dae) files usually contain a unit element that indicates the    'real world' units that the model is described in. It means you can work    in sensible and meaningful units in your modeling app.br\n   For example, if you were modeling a small object like a cup, it might make    sense to work in inches (1 MAX unit = 1 inch), but if you were modeling a    building, it might make more sense to work in feet (1 MAX unit = 1 foot).    If you export both models to COLLADA, T3D will automatically scale them    appropriately. 1 T3D unit = 1 meter, so the cup would be scaled down by 0.0254,    and the building scaled down by 0.3048, given them both the correct scale    relative to each other.br\n   Omit the field or set to -1 to use the value in the .dae file (1.0 if the    unit element is not present) 
/// </summary>
public float unit
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".unit").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".unit", value.AsString());
          }
       }
/// <summary>
/// Override the up_axis element in the COLLADA (.dae) file. No effect for DTS files.\n   Set to one of the following values:\n   dldtX_AXIS/dtddPositive X points up. Model will be rotated into Torque's coordinate system (Z up)./dd   dtY_AXIS/dtddPositive Y points up. Model will be rotated into Torque's coordinate system (Z up)./dd   dtZ_AXIS/dtddPositive Z points up. No rotation will be applied to the model./dd   dtDEFAULT/dtddThe default value. Use the value in the .dae file (defaults to Z_AXIS if the up_axis element is not present)./dd/dl 
/// </summary>
public int upAxis
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".upAxis").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".upAxis", value.AsString());
          }
       }
}}
