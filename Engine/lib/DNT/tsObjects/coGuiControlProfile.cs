
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiControlProfile : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiControlProfile(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiControlProfile))]
    public class coGuiControlProfile: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiControlProfile(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiControlProfile(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiControlProfile(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiControlProfile ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiControlProfile ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiControlProfile ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiControlProfile(string ts)
            {
            return new coGuiControlProfile(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiControlProfile ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiControlProfile(int ts)
            {
            return new coGuiControlProfile(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiControlProfile ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiControlProfile(uint ts)
            {
            return new coGuiControlProfile(ts);
            }
/// <summary>
/// Automatically adjust height of control to fit contents. 
/// </summary>
public bool autoSizeHeight
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".autoSizeHeight").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".autoSizeHeight", value.AsString());
          }
       }
/// <summary>
/// Automatically adjust width of control to fit contents. 
/// </summary>
public bool autoSizeWidth
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".autoSizeWidth").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".autoSizeWidth", value.AsString());
          }
       }
private ColorI _bevelColorHL = null;
/// <summary>
/// 
/// </summary>
public ColorI bevelColorHL
       {
       get
          {
          if (_bevelColorHL!=null)
              _bevelColorHL.DetachAllEvents();
           _bevelColorHL = dnTorque.self.GetVar(_mSimObjectId + ".bevelColorHL").AsColorI();
          _bevelColorHL.OnChangeNotification +=_bevelColorHL_OnChangeNotification;
          return _bevelColorHL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bevelColorHL", value.AsString());
          }
       }
void _bevelColorHL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".bevelColorHL", e.NewValue);
       }
private ColorI _bevelColorLL = null;
/// <summary>
/// 
/// </summary>
public ColorI bevelColorLL
       {
       get
          {
          if (_bevelColorLL!=null)
              _bevelColorLL.DetachAllEvents();
           _bevelColorLL = dnTorque.self.GetVar(_mSimObjectId + ".bevelColorLL").AsColorI();
          _bevelColorLL.OnChangeNotification +=_bevelColorLL_OnChangeNotification;
          return _bevelColorLL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bevelColorLL", value.AsString());
          }
       }
void _bevelColorLL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".bevelColorLL", e.NewValue);
       }
/// <summary>
/// Texture to use for rendering control. 
/// </summary>
public String bitmap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".bitmap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".bitmap", value.AsString());
          }
       }
/// <summary>
/// Border type (0=no border). 
/// </summary>
public int border
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".border").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".border", value.AsString());
          }
       }
private ColorI _borderColor = null;
/// <summary>
/// Color to draw border with. 
/// </summary>
public ColorI borderColor
       {
       get
          {
          if (_borderColor!=null)
              _borderColor.DetachAllEvents();
           _borderColor = dnTorque.self.GetVar(_mSimObjectId + ".borderColor").AsColorI();
          _borderColor.OnChangeNotification +=_borderColor_OnChangeNotification;
          return _borderColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".borderColor", value.AsString());
          }
       }
void _borderColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".borderColor", e.NewValue);
       }
private ColorI _borderColorHL = null;
/// <summary>
/// 
/// </summary>
public ColorI borderColorHL
       {
       get
          {
          if (_borderColorHL!=null)
              _borderColorHL.DetachAllEvents();
           _borderColorHL = dnTorque.self.GetVar(_mSimObjectId + ".borderColorHL").AsColorI();
          _borderColorHL.OnChangeNotification +=_borderColorHL_OnChangeNotification;
          return _borderColorHL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".borderColorHL", value.AsString());
          }
       }
void _borderColorHL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".borderColorHL", e.NewValue);
       }
private ColorI _borderColorNA = null;
/// <summary>
/// 
/// </summary>
public ColorI borderColorNA
       {
       get
          {
          if (_borderColorNA!=null)
              _borderColorNA.DetachAllEvents();
           _borderColorNA = dnTorque.self.GetVar(_mSimObjectId + ".borderColorNA").AsColorI();
          _borderColorNA.OnChangeNotification +=_borderColorNA_OnChangeNotification;
          return _borderColorNA;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".borderColorNA", value.AsString());
          }
       }
void _borderColorNA_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".borderColorNA", e.NewValue);
       }
/// <summary>
/// Thickness of border in pixels. 
/// </summary>
public int borderThickness
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".borderThickness").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".borderThickness", value.AsString());
          }
       }
/// <summary>
/// Whether the control can have the keyboard focus. 
/// </summary>
public bool canKeyFocus
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".canKeyFocus").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".canKeyFocus", value.AsString());
          }
       }
/// <summary>
/// Category under which the profile will appear in the editor.  
/// </summary>
public String category
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".category").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".category", value.AsString());
          }
       }
private ColorI _cursorColor = null;
/// <summary>
/// Color to use for the text cursor. 
/// </summary>
public ColorI cursorColor
       {
       get
          {
          if (_cursorColor!=null)
              _cursorColor.DetachAllEvents();
           _cursorColor = dnTorque.self.GetVar(_mSimObjectId + ".cursorColor").AsColorI();
          _cursorColor.OnChangeNotification +=_cursorColor_OnChangeNotification;
          return _cursorColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cursorColor", value.AsString());
          }
       }
void _cursorColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".cursorColor", e.NewValue);
       }
private ColorI _fillColor = null;
/// <summary>
/// 
/// </summary>
public ColorI fillColor
       {
       get
          {
          if (_fillColor!=null)
              _fillColor.DetachAllEvents();
           _fillColor = dnTorque.self.GetVar(_mSimObjectId + ".fillColor").AsColorI();
          _fillColor.OnChangeNotification +=_fillColor_OnChangeNotification;
          return _fillColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fillColor", value.AsString());
          }
       }
void _fillColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fillColor", e.NewValue);
       }
private ColorI _fillColorHL = null;
/// <summary>
/// 
/// </summary>
public ColorI fillColorHL
       {
       get
          {
          if (_fillColorHL!=null)
              _fillColorHL.DetachAllEvents();
           _fillColorHL = dnTorque.self.GetVar(_mSimObjectId + ".fillColorHL").AsColorI();
          _fillColorHL.OnChangeNotification +=_fillColorHL_OnChangeNotification;
          return _fillColorHL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fillColorHL", value.AsString());
          }
       }
void _fillColorHL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fillColorHL", e.NewValue);
       }
private ColorI _fillColorNA = null;
/// <summary>
/// 
/// </summary>
public ColorI fillColorNA
       {
       get
          {
          if (_fillColorNA!=null)
              _fillColorNA.DetachAllEvents();
           _fillColorNA = dnTorque.self.GetVar(_mSimObjectId + ".fillColorNA").AsColorI();
          _fillColorNA.OnChangeNotification +=_fillColorNA_OnChangeNotification;
          return _fillColorNA;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fillColorNA", value.AsString());
          }
       }
void _fillColorNA_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fillColorNA", e.NewValue);
       }
private ColorI _fillColorSEL = null;
/// <summary>
/// 
/// </summary>
public ColorI fillColorSEL
       {
       get
          {
          if (_fillColorSEL!=null)
              _fillColorSEL.DetachAllEvents();
           _fillColorSEL = dnTorque.self.GetVar(_mSimObjectId + ".fillColorSEL").AsColorI();
          _fillColorSEL.OnChangeNotification +=_fillColorSEL_OnChangeNotification;
          return _fillColorSEL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fillColorSEL", value.AsString());
          }
       }
void _fillColorSEL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fillColorSEL", e.NewValue);
       }
/// <summary>
/// 
/// </summary>
public FontCharset fontCharset
       {
       get
          {          return (FontCharset)Enum.Parse(typeof(FontCharset), dnTorque.self.GetVar(_mSimObjectId + ".fontCharset"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontCharset", value.ToString());
          }
       }
private ColorI _fontColor = null;
/// <summary>
/// Font color for normal text (same as fontColors[0]). 
/// </summary>
public ColorI fontColor
       {
       get
          {
          if (_fontColor!=null)
              _fontColor.DetachAllEvents();
           _fontColor = dnTorque.self.GetVar(_mSimObjectId + ".fontColor").AsColorI();
          _fontColor.OnChangeNotification +=_fontColor_OnChangeNotification;
          return _fontColor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColor", value.AsString());
          }
       }
void _fontColor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColor", e.NewValue);
       }
private ColorI _fontColorHL = null;
/// <summary>
/// Font color for highlighted text (same as fontColors[1]). 
/// </summary>
public ColorI fontColorHL
       {
       get
          {
          if (_fontColorHL!=null)
              _fontColorHL.DetachAllEvents();
           _fontColorHL = dnTorque.self.GetVar(_mSimObjectId + ".fontColorHL").AsColorI();
          _fontColorHL.OnChangeNotification +=_fontColorHL_OnChangeNotification;
          return _fontColorHL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColorHL", value.AsString());
          }
       }
void _fontColorHL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColorHL", e.NewValue);
       }
private ColorI _fontColorLink = null;
/// <summary>
/// Font color for links in text (same as fontColors[4]). 
/// </summary>
public ColorI fontColorLink
       {
       get
          {
          if (_fontColorLink!=null)
              _fontColorLink.DetachAllEvents();
           _fontColorLink = dnTorque.self.GetVar(_mSimObjectId + ".fontColorLink").AsColorI();
          _fontColorLink.OnChangeNotification +=_fontColorLink_OnChangeNotification;
          return _fontColorLink;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColorLink", value.AsString());
          }
       }
void _fontColorLink_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColorLink", e.NewValue);
       }
private ColorI _fontColorLinkHL = null;
/// <summary>
/// Font color for highlighted links in text (same as fontColors[5]). 
/// </summary>
public ColorI fontColorLinkHL
       {
       get
          {
          if (_fontColorLinkHL!=null)
              _fontColorLinkHL.DetachAllEvents();
           _fontColorLinkHL = dnTorque.self.GetVar(_mSimObjectId + ".fontColorLinkHL").AsColorI();
          _fontColorLinkHL.OnChangeNotification +=_fontColorLinkHL_OnChangeNotification;
          return _fontColorLinkHL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColorLinkHL", value.AsString());
          }
       }
void _fontColorLinkHL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColorLinkHL", e.NewValue);
       }
private ColorI _fontColorNA = null;
/// <summary>
/// Font color when control is not active/disabled (same as fontColors[2]). 
/// </summary>
public ColorI fontColorNA
       {
       get
          {
          if (_fontColorNA!=null)
              _fontColorNA.DetachAllEvents();
           _fontColorNA = dnTorque.self.GetVar(_mSimObjectId + ".fontColorNA").AsColorI();
          _fontColorNA.OnChangeNotification +=_fontColorNA_OnChangeNotification;
          return _fontColorNA;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColorNA", value.AsString());
          }
       }
void _fontColorNA_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColorNA", e.NewValue);
       }
private ColorI _fontColors = null;
/// <summary>
/// Font colors to use for different text types/states. 
/// </summary>
public ColorI fontColors
       {
       get
          {
          if (_fontColors!=null)
              _fontColors.DetachAllEvents();
           _fontColors = dnTorque.self.GetVar(_mSimObjectId + ".fontColors").AsColorI();
          _fontColors.OnChangeNotification +=_fontColors_OnChangeNotification;
          return _fontColors;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColors", value.AsString());
          }
       }
void _fontColors_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColors", e.NewValue);
       }
private ColorI _fontColorSEL = null;
/// <summary>
/// Font color for selected text (same as fontColors[3]). 
/// </summary>
public ColorI fontColorSEL
       {
       get
          {
          if (_fontColorSEL!=null)
              _fontColorSEL.DetachAllEvents();
           _fontColorSEL = dnTorque.self.GetVar(_mSimObjectId + ".fontColorSEL").AsColorI();
          _fontColorSEL.OnChangeNotification +=_fontColorSEL_OnChangeNotification;
          return _fontColorSEL;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontColorSEL", value.AsString());
          }
       }
void _fontColorSEL_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".fontColorSEL", e.NewValue);
       }
/// <summary>
/// Font size in points. 
/// </summary>
public int fontSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fontSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontSize", value.AsString());
          }
       }
/// <summary>
/// Name of font family and typeface (e.g. \Arial Bold\). 
/// </summary>
public String fontType
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fontType").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fontType", value.AsString());
          }
       }
/// <summary>
/// If true, 'bitmap' is an array of images. 
/// </summary>
public bool hasBitmapArray
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".hasBitmapArray").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".hasBitmapArray", value.AsString());
          }
       }
/// <summary>
/// Horizontal alignment for text. 
/// </summary>
public GuiControlProfile__AlignmentType justify
       {
       get
          {          return (GuiControlProfile__AlignmentType)Enum.Parse(typeof(GuiControlProfile__AlignmentType), dnTorque.self.GetVar(_mSimObjectId + ".justify"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".justify", value.ToString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool modal
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".modal").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".modal", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool mouseOverSelected
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mouseOverSelected").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mouseOverSelected", value.AsString());
          }
       }
/// <summary>
/// Whether control should only accept numerical data (GuiTextEditCtrl). 
/// </summary>
public bool numbersOnly
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".numbersOnly").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".numbersOnly", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool opaque
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".opaque").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".opaque", value.AsString());
          }
       }
/// <summary>
/// 
/// </summary>
public String profileForChildren
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".profileForChildren").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".profileForChildren", value.AsString());
          }
       }
/// <summary>
/// Whether to add automatic tab event when return is pressed so focus moves on to next control (GuiTextEditCtrl). 
/// </summary>
public bool returnTab
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".returnTab").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".returnTab", value.AsString());
          }
       }
/// <summary>
/// Sound to play when mouse has been pressed on control. 
/// </summary>
public coSFXTrack soundButtonDown
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundButtonDown");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundButtonDown", value.ToString());
          }
       }
/// <summary>
/// Sound to play when mouse is hovering over control. 
/// </summary>
public coSFXTrack soundButtonOver
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".soundButtonOver");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".soundButtonOver", value.ToString());
          }
       }
/// <summary>
/// 
/// </summary>
public bool tab
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".tab").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".tab", value.AsString());
          }
       }
private Point2I _textOffset = null;
/// <summary>
/// 
/// </summary>
public Point2I textOffset
       {
       get
          {
          if (_textOffset!=null)
              _textOffset.DetachAllEvents();
           _textOffset = dnTorque.self.GetVar(_mSimObjectId + ".textOffset").AsPoint2I();
          _textOffset.OnChangeNotification +=_textOffset_OnChangeNotification;
          return _textOffset;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".textOffset", value.AsString());
          }
       }
void _textOffset_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".textOffset", e.NewValue);
       }
/// <summary>
/// ( GuiControlProfile, getStringWidth, S32, 3, 3, ( pString ) )
/// 
/// </summary>
public  int getStringWidth(string a2){
return TorqueScriptTemplate.m_ts.fnGuiControlProfile_getStringWidth(_mSimObjectId, a2);
}
}}
