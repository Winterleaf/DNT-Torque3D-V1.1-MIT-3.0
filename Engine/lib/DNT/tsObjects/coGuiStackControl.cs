
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiStackControl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiStackControl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiStackControl))]
    public class coGuiStackControl: coGuiControl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiStackControl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiStackControl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiStackControl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiStackControl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiStackControl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiStackControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiStackControl(string ts)
            {
            return new coGuiStackControl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiStackControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiStackControl(int ts)
            {
            return new coGuiStackControl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiStackControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiStackControl(uint ts)
            {
            return new coGuiStackControl(ts);
            }
/// <summary>
/// Determines whether to reposition child controls.\n\n   If true, horizontally stacked children are aligned along the top edge of    the stack control. Vertically stacked children are aligned along the left    edge of the stack control. If false, horizontally stacked children retain    their Y position, and vertically stacked children retain their X position. 
/// </summary>
public bool changeChildPosition
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".changeChildPosition").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".changeChildPosition", value.AsString());
          }
       }
/// <summary>
/// Determines whether to resize child controls.\n\n   If true, horizontally stacked children keep their width, but have their    height set to the stack control height. Vertically stacked children keep    their height, but have their width set to the stack control width. If    false, child controls are not resized. 
/// </summary>
public bool changeChildSizeToFit
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".changeChildSizeToFit").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".changeChildSizeToFit", value.AsString());
          }
       }
/// <summary>
/// Determines whether to resize the stack control along the non-stack axis (change    height for horizontal stacking, change width for vertical stacking). No effect    if dynamicSize is false.\n\n   If true, the stack will be resized to the maximum of the child control widths/heights.    If false, the stack will not be resized. 
/// </summary>
public bool dynamicNonStackExtent
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dynamicNonStackExtent").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dynamicNonStackExtent", value.AsString());
          }
       }
/// <summary>
/// Determines whether to reposition the stack along the stack axis when it is    auto-resized. No effect if dynamicSize is false.\n\n   If true, the stack will grow left for horizontal stacking, and grow up for vertical stacking.\n   If false, the stack will grow right for horizontal stacking, and grow down for vertical stacking.\n 
/// </summary>
public bool dynamicPos
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dynamicPos").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dynamicPos", value.AsString());
          }
       }
/// <summary>
/// Determines whether to resize the stack control along the stack axis (change    width for horizontal stacking, change height for vertical stacking).\n\n   If true, the stack width/height will be resized to the sum of the child control widths/heights.    If false, the stack will not be resized. 
/// </summary>
public bool dynamicSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dynamicSize").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dynamicSize", value.AsString());
          }
       }
/// <summary>
/// Controls the type of horizontal stacking to use (iLeft to Right/i or    iRight to Left/i) 
/// </summary>
public GuiStackControl__HorizontalType horizStacking
       {
       get
          {          return (GuiStackControl__HorizontalType)Enum.Parse(typeof(GuiStackControl__HorizontalType), dnTorque.self.GetVar(_mSimObjectId + ".horizStacking"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".horizStacking", value.ToString());
          }
       }
/// <summary>
/// Distance (in pixels) between stacked child controls. 
/// </summary>
public int padding
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".padding").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".padding", value.AsString());
          }
       }
/// <summary>
/// Determines the method used to position the child controls.\n\n 
/// </summary>
public GuiStackControl__StackingType stackingType
       {
       get
          {          return (GuiStackControl__StackingType)Enum.Parse(typeof(GuiStackControl__StackingType), dnTorque.self.GetVar(_mSimObjectId + ".stackingType"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stackingType", value.ToString());
          }
       }
/// <summary>
/// Controls the type of vertical stacking to use (iTop to Bottom/i or    iBottom to Top/i) 
/// </summary>
public GuiStackControl__VerticalType vertStacking
       {
       get
          {          return (GuiStackControl__VerticalType)Enum.Parse(typeof(GuiStackControl__VerticalType), dnTorque.self.GetVar(_mSimObjectId + ".vertStacking"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertStacking", value.ToString());
          }
       }
/// <summary>
/// Prevents control from restacking - useful when adding or removing child controls
///    @param freeze True to freeze the control, false to unfreeze it
///    @tsexample
///    %stackCtrl.freeze(true);
///    // add controls to stack
///    %stackCtrl.freeze(false);
///    @endtsexample )
/// 
/// </summary>
public  void freeze(bool freeze){
TorqueScriptTemplate.m_ts.fnGuiStackControl_freeze(_mSimObjectId, freeze);
}
/// <summary>
/// Return whether or not this control is frozen )
/// 
/// </summary>
public  bool isFrozen(){
return TorqueScriptTemplate.m_ts.fnGuiStackControl_isFrozen(_mSimObjectId);
}
/// <summary>
/// Restack the child controls. )
/// 
/// </summary>
public  void updateStack(){
TorqueScriptTemplate.m_ts.fnGuiStackControl_updateStack(_mSimObjectId);
}
}}
