
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoWheeledVehicle : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coWheeledVehicle(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoWheeledVehicle))]
    public class coWheeledVehicle: coVehicle
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coWheeledVehicle(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coWheeledVehicle(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coWheeledVehicle(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coWheeledVehicle ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coWheeledVehicle ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coWheeledVehicle ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWheeledVehicle(string ts)
            {
            return new coWheeledVehicle(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coWheeledVehicle ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWheeledVehicle(int ts)
            {
            return new coWheeledVehicle(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coWheeledVehicle ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coWheeledVehicle(uint ts)
            {
            return new coWheeledVehicle(ts);
            }
/// <summary>
/// @brief Get the number of wheels on this vehicle.
///    @return the number of wheels (equal to the number of hub nodes defined in the model) )
/// 
/// </summary>
public  int getWheelCount(){
return TorqueScriptTemplate.m_ts.fnWheeledVehicle_getWheelCount(_mSimObjectId);
}
/// <summary>
/// @brief Set whether the wheel is powered (has torque applied from the engine).
///    A rear wheel drive car for example would set the front wheels to false, 
///    and the rear wheels to true.
///    @param wheel index of the wheel to set (hub node #)
///    @param powered flag indicating whether to power the wheel or not
///    @return true if successful, false if failed )
/// 
/// </summary>
public  bool setWheelPowered(int wheel, bool powered){
return TorqueScriptTemplate.m_ts.fnWheeledVehicle_setWheelPowered(_mSimObjectId, wheel, powered);
}
/// <summary>
/// @brief Set the WheeledVehicleSpring datablock for this wheel.
///    @param wheel index of the wheel to set (hub node #)
///    @param spring WheeledVehicleSpring datablock
///    @return true if successful, false if failed
///    @tsexample
///    %obj.setWheelSpring( 0, FrontSpring );
///    @endtsexample )
/// 
/// </summary>
public  bool setWheelSpring(int wheel, string spring){
return TorqueScriptTemplate.m_ts.fnWheeledVehicle_setWheelSpring(_mSimObjectId, wheel, spring);
}
/// <summary>
/// @brief Set how much the wheel is affected by steering.
///    The steering factor controls how much the wheel is rotated by the vehicle 
///    steering. For example, most cars would have their front wheels set to 1.0, 
///    and their rear wheels set to 0 since only the front wheels should turn.
///    Negative values will turn the wheel in the opposite direction to the steering 
///    angle.
///    @param wheel index of the wheel to set (hub node #)
///    @param steering steering factor from -1 (full inverse) to 1 (full)
///    @return true if successful, false if failed )
/// 
/// </summary>
public  bool setWheelSteering(int wheel, float steering){
return TorqueScriptTemplate.m_ts.fnWheeledVehicle_setWheelSteering(_mSimObjectId, wheel, steering);
}
/// <summary>
/// @brief Set the WheeledVehicleTire datablock for this wheel.
///    @param wheel index of the wheel to set (hub node #)
///    @param tire WheeledVehicleTire datablock
///    @return true if successful, false if failed
///    @tsexample
///    %obj.setWheelTire( 0, FrontTire );
///    @endtsexample )
/// 
/// </summary>
public  bool setWheelTire(int wheel, string tire){
return TorqueScriptTemplate.m_ts.fnWheeledVehicle_setWheelTire(_mSimObjectId, wheel, tire);
}
}}
