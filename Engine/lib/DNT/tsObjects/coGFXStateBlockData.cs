
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGFXStateBlockData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGFXStateBlockData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGFXStateBlockData))]
    public class coGFXStateBlockData: coSimObject
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGFXStateBlockData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGFXStateBlockData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGFXStateBlockData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGFXStateBlockData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGFXStateBlockData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGFXStateBlockData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(string ts)
            {
            return new coGFXStateBlockData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGFXStateBlockData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(int ts)
            {
            return new coGFXStateBlockData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGFXStateBlockData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGFXStateBlockData(uint ts)
            {
            return new coGFXStateBlockData(ts);
            }
/// <summary>
/// Set to true if the alpha test state is not all defaults. 
/// </summary>
public bool alphaDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaDefined", value.AsString());
          }
       }
/// <summary>
/// Enables per-pixel alpha testing. The default is false. 
/// </summary>
public bool alphaTestEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaTestEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestEnable", value.AsString());
          }
       }
/// <summary>
/// The test function used to accept or reject a pixel based on its alpha value. The default is GFXCmpGreaterEqual. 
/// </summary>
public TypeGFXCmpFunc alphaTestFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".alphaTestFunc").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestFunc", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The reference alpha value against which pixels are tested. The default is zero. 
/// </summary>
public int alphaTestRef
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".alphaTestRef").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".alphaTestRef", value.AsString());
          }
       }
/// <summary>
/// Set to true if the alpha blend state is not all defaults. 
/// </summary>
public bool blendDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".blendDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendDefined", value.AsString());
          }
       }
/// <summary>
/// The destination blend state. The default is GFXBlendZero. 
/// </summary>
public TypeGFXBlend blendDest
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".blendDest").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendDest", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// Enables alpha blending. The default is false. 
/// </summary>
public bool blendEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".blendEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendEnable", value.AsString());
          }
       }
/// <summary>
/// The arithmetic operation applied to alpha blending. The default is GFXBlendOpAdd. 
/// </summary>
public TypeGFXBlendOp blendOp
       {
       get
          {          return (TypeGFXBlendOp)Enum.Parse(typeof(TypeGFXBlendOp), dnTorque.self.GetVar(_mSimObjectId + ".blendOp").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendOp", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The source blend state. The default is GFXBlendOne. 
/// </summary>
public TypeGFXBlend blendSrc
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".blendSrc").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".blendSrc", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// Enables alpha channel writes. The default is true. 
/// </summary>
public bool colorWriteAlpha
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteAlpha").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteAlpha", value.AsString());
          }
       }
/// <summary>
/// Enables blue channel writes. The default is true. 
/// </summary>
public bool colorWriteBlue
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteBlue").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteBlue", value.AsString());
          }
       }
/// <summary>
/// Set to true if the color write state is not all defaults. 
/// </summary>
public bool colorWriteDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteDefined", value.AsString());
          }
       }
/// <summary>
/// Enables green channel writes. The default is true. 
/// </summary>
public bool colorWriteGreen
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteGreen").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteGreen", value.AsString());
          }
       }
/// <summary>
/// Enables red channel writes. The default is true. 
/// </summary>
public bool colorWriteRed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colorWriteRed").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colorWriteRed", value.AsString());
          }
       }
/// <summary>
/// Set to true if the culling state is not all defaults. 
/// </summary>
public bool cullDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cullDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cullDefined", value.AsString());
          }
       }
/// <summary>
/// Defines how back facing triangles are culled if at all. The default is GFXCullCCW. 
/// </summary>
public TypeGFXCullMode cullMode
       {
       get
          {          return (TypeGFXCullMode)Enum.Parse(typeof(TypeGFXCullMode), dnTorque.self.GetVar(_mSimObjectId + ".cullMode").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cullMode", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// Enables fixed function lighting when rendering without a shader on geometry with vertex normals. The default is false. 
/// </summary>
public bool ffLighting
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".ffLighting").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".ffLighting", value.AsString());
          }
       }
/// <summary>
/// Set to true if the sampler states are not all defaults. 
/// </summary>
public bool samplersDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".samplersDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".samplersDefined", value.AsString());
          }
       }
/// <summary>
/// The array of texture sampler states.\n     @note Not all graphics devices support 16 samplers. In general      all systems support 4 samplers with most modern cards doing 8. 
/// </summary>
public coGFXSamplerStateData samplerStates
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".samplerStates");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".samplerStates", value.ToString());
          }
       }
/// <summary>
/// Set to true if the seperate alpha blend state is not all defaults. 
/// </summary>
public bool separateAlphaBlendDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendDefined", value.AsString());
          }
       }
/// <summary>
/// The destination blend state. The default is GFXBlendZero. 
/// </summary>
public TypeGFXBlend separateAlphaBlendDest
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendDest").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendDest", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// Enables the separate blend mode for the alpha channel. The default is false. 
/// </summary>
public bool separateAlphaBlendEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendEnable", value.AsString());
          }
       }
/// <summary>
/// The arithmetic operation applied to separate alpha blending. The default is GFXBlendOpAdd. 
/// </summary>
public TypeGFXBlendOp separateAlphaBlendOp
       {
       get
          {          return (TypeGFXBlendOp)Enum.Parse(typeof(TypeGFXBlendOp), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendOp").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendOp", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The source blend state. The default is GFXBlendOne. 
/// </summary>
public TypeGFXBlend separateAlphaBlendSrc
       {
       get
          {          return (TypeGFXBlend)Enum.Parse(typeof(TypeGFXBlend), dnTorque.self.GetVar(_mSimObjectId + ".separateAlphaBlendSrc").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".separateAlphaBlendSrc", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// Set to true if the stencil state is not all defaults. 
/// </summary>
public bool stencilDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilDefined", value.AsString());
          }
       }
/// <summary>
/// Enables stenciling. The default is false. 
/// </summary>
public bool stencilEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilEnable", value.AsString());
          }
       }
/// <summary>
/// The stencil operation to perform if the stencil test fails. The default is GFXStencilOpKeep. 
/// </summary>
public TypeGFXStencilOp stencilFailOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilFailOp").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilFailOp", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The comparison function to test the reference value to a stencil buffer entry. The default is GFXCmpNever. 
/// </summary>
public TypeGFXCmpFunc stencilFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".stencilFunc").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilFunc", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default is 0xFFFFFFFF. 
/// </summary>
public int stencilMask
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilMask").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilMask", value.AsString());
          }
       }
/// <summary>
/// The stencil operation to perform if both the stencil and the depth tests pass. The default is GFXStencilOpKeep. 
/// </summary>
public TypeGFXStencilOp stencilPassOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilPassOp").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilPassOp", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// The reference value for the stencil test. The default is zero. 
/// </summary>
public int stencilRef
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilRef").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilRef", value.AsString());
          }
       }
/// <summary>
/// The write mask applied to values written into the stencil buffer. The default is 0xFFFFFFFF. 
/// </summary>
public int stencilWriteMask
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".stencilWriteMask").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilWriteMask", value.AsString());
          }
       }
/// <summary>
/// The stencil operation to perform if the stencil test passes and the depth test fails. The default is GFXStencilOpKeep. 
/// </summary>
public TypeGFXStencilOp stencilZFailOp
       {
       get
          {          return (TypeGFXStencilOp)Enum.Parse(typeof(TypeGFXStencilOp), dnTorque.self.GetVar(_mSimObjectId + ".stencilZFailOp").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".stencilZFailOp", value.ToString().Replace("zz_zz"," "));
          }
       }
private ColorI _textureFactor = null;
/// <summary>
/// The color used for multiple-texture blending with the GFXTATFactor texture-blending argument or      the GFXTOPBlendFactorAlpha texture-blending operation. The default is opaque white (255, 255, 255, 255). 
/// </summary>
public ColorI textureFactor
       {
       get
          {
          if (_textureFactor!=null)
              _textureFactor.DetachAllEvents();
           _textureFactor = dnTorque.self.GetVar(_mSimObjectId + ".textureFactor").AsColorI();
          _textureFactor.OnChangeNotification +=_textureFactor_OnChangeNotification;
          return _textureFactor;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".textureFactor", value.AsString());
          }
       }
void _textureFactor_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".textureFactor", e.NewValue);
       }
/// <summary>
/// Enables fixed function vertex coloring when rendering without a shader. The default is false. 
/// </summary>
public bool vertexColorEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".vertexColorEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".vertexColorEnable", value.AsString());
          }
       }
/// <summary>
/// A floating-point bias used when comparing depth values. The default is zero. 
/// </summary>
public float zBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zBias", value.AsString());
          }
       }
/// <summary>
/// Set to true if the depth state is not all defaults. 
/// </summary>
public bool zDefined
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zDefined").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zDefined", value.AsString());
          }
       }
/// <summary>
/// Enables z-buffer reads. The default is true. 
/// </summary>
public bool zEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zEnable", value.AsString());
          }
       }
/// <summary>
/// The depth comparision function which a pixel must pass to be written to the z-buffer. The default is GFXCmpLessEqual. 
/// </summary>
public TypeGFXCmpFunc zFunc
       {
       get
          {          return (TypeGFXCmpFunc)Enum.Parse(typeof(TypeGFXCmpFunc), dnTorque.self.GetVar(_mSimObjectId + ".zFunc").Replace(" ", "zz_zz"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zFunc", value.ToString().Replace("zz_zz"," "));
          }
       }
/// <summary>
/// An additional floating-point bias based on the maximum depth slop of the triangle being rendered. The default is zero. 
/// </summary>
public float zSlopeBias
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zSlopeBias").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zSlopeBias", value.AsString());
          }
       }
/// <summary>
/// Enables z-buffer writes. The default is true. 
/// </summary>
public bool zWriteEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".zWriteEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".zWriteEnable", value.AsString());
          }
       }
}}
