
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiDynamicCtrlArrayControl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiDynamicCtrlArrayControl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiDynamicCtrlArrayControl))]
    public class coGuiDynamicCtrlArrayControl: coGuiControl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiDynamicCtrlArrayControl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiDynamicCtrlArrayControl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiDynamicCtrlArrayControl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiDynamicCtrlArrayControl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiDynamicCtrlArrayControl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiDynamicCtrlArrayControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiDynamicCtrlArrayControl(string ts)
            {
            return new coGuiDynamicCtrlArrayControl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiDynamicCtrlArrayControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiDynamicCtrlArrayControl(int ts)
            {
            return new coGuiDynamicCtrlArrayControl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiDynamicCtrlArrayControl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiDynamicCtrlArrayControl(uint ts)
            {
            return new coGuiDynamicCtrlArrayControl(ts);
            }
/// <summary>
/// When true, the cell size is set to the widest/tallest child control. 
/// </summary>
public bool autoCellSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".autoCellSize").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".autoCellSize", value.AsString());
          }
       }
/// <summary>
/// Number of columns the child controls have been arranged into. This    value is calculated automatically when children are added, removed or    resized; writing it directly has no effect. 
/// </summary>
public int colCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colCount", value.AsString());
          }
       }
/// <summary>
/// Width of each column. If iautoCellSize/i is set, this will be    calculated automatically from the widest child control 
/// </summary>
public int colSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colSize", value.AsString());
          }
       }
/// <summary>
/// Spacing between columns 
/// </summary>
public int colSpacing
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".colSpacing").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".colSpacing", value.AsString());
          }
       }
/// <summary>
/// If true, the width or height of this control will be automatically    calculated based on the number of child controls (width if    ifillRowFirst/i is false, height if ifillRowFirst/i is true). 
/// </summary>
public bool dynamicSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".dynamicSize").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".dynamicSize", value.AsString());
          }
       }
/// <summary>
/// Controls whether rows or columns are filled first.\n\nIf true, controls are    added to the grid left-to-right (to fill a row
/// </summary>
public bool fillRowFirst
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".fillRowFirst").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".fillRowFirst", value.AsString());
          }
       }
/// <summary>
/// When true, the array will not update when new children are added or in    response to child resize events. This is useful to prevent unnecessary    resizing when adding, removing or resizing a number of child controls. 
/// </summary>
public bool frozen
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".frozen").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".frozen", value.AsString());
          }
       }
private RectSpacingI _padding = null;
/// <summary>
/// Padding around the top, bottom, left, and right of this control. This    reduces the area available for child controls. 
/// </summary>
public RectSpacingI padding
       {
       get
          {
          if (_padding!=null)
              _padding.DetachAllEvents();
           _padding = dnTorque.self.GetVar(_mSimObjectId + ".padding").AsRectSpacingI();
          _padding.OnChangeNotification +=_padding_OnChangeNotification;
          return _padding;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".padding", value.AsString());
          }
       }
void _padding_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".padding", e.NewValue);
       }
/// <summary>
/// Number of rows the child controls have been arranged into. This value    is calculated automatically when children are added, removed or resized;    writing it directly has no effect. 
/// </summary>
public int rowCount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rowCount").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rowCount", value.AsString());
          }
       }
/// <summary>
/// Height of each row. If iautoCellSize/i is set, this will be    calculated automatically from the tallest child control 
/// </summary>
public int rowSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rowSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rowSize", value.AsString());
          }
       }
/// <summary>
/// Spacing between rows 
/// </summary>
public int rowSpacing
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".rowSpacing").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".rowSpacing", value.AsString());
          }
       }
/// <summary>
/// Recalculates the position and size of this control and all its children. )
/// 
/// </summary>
public  void refresh(){
TorqueScriptTemplate.m_ts.fnGuiDynamicCtrlArrayControl_refresh(_mSimObjectId);
}
}}
