
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoAITurretShape : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coAITurretShape(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoAITurretShape))]
    public class coAITurretShape: coTurretShape
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coAITurretShape(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coAITurretShape(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coAITurretShape(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coAITurretShape ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coAITurretShape ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coAITurretShape ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coAITurretShape(string ts)
            {
            return new coAITurretShape(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coAITurretShape ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coAITurretShape(int ts)
            {
            return new coAITurretShape(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coAITurretShape ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coAITurretShape(uint ts)
            {
            return new coAITurretShape(ts);
            }
/// <summary>
/// @brief Activate a turret from a deactive state.)
/// 
/// </summary>
public  void activateTurret(){
TorqueScriptTemplate.m_ts.fnAITurretShape_activateTurret(_mSimObjectId);
}
/// <summary>
/// @brief Adds object to the turret's ignore list.
///    All objects in this list will be ignored by the turret's targeting.
///    @param obj The ShapeBase object to ignore.)
/// 
/// </summary>
public  void addToIgnoreList(string obj){
TorqueScriptTemplate.m_ts.fnAITurretShape_addToIgnoreList(_mSimObjectId, obj);
}
/// <summary>
/// @brief Deactivate a turret from an active state.)
/// 
/// </summary>
public  void deactivateTurret(){
TorqueScriptTemplate.m_ts.fnAITurretShape_deactivateTurret(_mSimObjectId);
}
/// <summary>
/// @brief Get the turret's current target.
///    @returns The object that is the target's current target, or 0 if no target.)
/// 
/// </summary>
public  string getTarget(){
return TorqueScriptTemplate.m_ts.fnAITurretShape_getTarget(_mSimObjectId);
}
/// <summary>
/// @brief Get the turret's defined projectile velocity that helps with target leading.
///    @returns The defined weapon projectile speed, or 0 if leading is disabled.)
/// 
/// </summary>
public  float getWeaponLeadVelocity(){
return TorqueScriptTemplate.m_ts.fnAITurretShape_getWeaponLeadVelocity(_mSimObjectId);
}
/// <summary>
/// @brief Indicates if the turret has a target.
///    @returns True if the turret has a target.)
/// 
/// </summary>
public  bool hasTarget(){
return TorqueScriptTemplate.m_ts.fnAITurretShape_hasTarget(_mSimObjectId);
}
/// <summary>
/// @brief Recenter the turret's weapon.)
/// 
/// </summary>
public  void recenterTurret(){
TorqueScriptTemplate.m_ts.fnAITurretShape_recenterTurret(_mSimObjectId);
}
/// <summary>
/// @brief Removes object from the turret's ignore list.
///    All objects in this list will be ignored by the turret's targeting.
///    @param obj The ShapeBase object to once again allow for targeting.)
/// 
/// </summary>
public  void removeFromIgnoreList(string obj){
TorqueScriptTemplate.m_ts.fnAITurretShape_removeFromIgnoreList(_mSimObjectId, obj);
}
/// <summary>
/// @brief Resets the turret's target tracking.
///    Only resets the internal target tracking.  Does not modify the turret's facing.)
/// 
/// </summary>
public  void resetTarget(){
TorqueScriptTemplate.m_ts.fnAITurretShape_resetTarget(_mSimObjectId);
}
/// <summary>
/// @brief Set the firing state of the turret's guns.
///    @param fire Set to true to activate all guns.  False to deactivate them.)
/// 
/// </summary>
public  void setAllGunsFiring(bool fire){
TorqueScriptTemplate.m_ts.fnAITurretShape_setAllGunsFiring(_mSimObjectId, fire);
}
/// <summary>
/// @brief Set the firing state of the given gun slot.
///    @param slot The gun to modify.  Valid range is 0-3 that corresponds to the weapon mount point.
///    @param fire Set to true to activate the gun.  False to deactivate it.)
/// 
/// </summary>
public  void setGunSlotFiring(int slot, bool fire){
TorqueScriptTemplate.m_ts.fnAITurretShape_setGunSlotFiring(_mSimObjectId, slot, fire);
}
/// <summary>
/// @brief Set the turret's current state.
///    Normally the turret's state comes from updating the state machine but this method 
///    allows you to override this and jump to the requested state immediately.
///    @param newState The name of the new state.
///    @param force Is true then force the full processing of the new state even if it is the 
///    same as the current state.  If false then only the time out value is reset and the state's 
///    script method is called, if any.)
/// 
/// </summary>
public  void setTurretState(string newState, bool force){
TorqueScriptTemplate.m_ts.fnAITurretShape_setTurretState(_mSimObjectId, newState, force);
}
/// <summary>
/// @brief Set the turret's projectile velocity to help lead the target.
///    This value normally comes from AITurretShapeData::weaponLeadVelocity but this method 
///    allows you to override the datablock value.  This can be useful if the turret changes 
///    ammunition, uses a different weapon than the default, is damaged, etc.
///    @note Setting this to 0 will disable target leading.)
/// 
/// </summary>
public  void setWeaponLeadVelocity(float velocity){
TorqueScriptTemplate.m_ts.fnAITurretShape_setWeaponLeadVelocity(_mSimObjectId, velocity);
}
/// <summary>
/// @brief Begin scanning for a target.)
/// 
/// </summary>
public  void startScanForTargets(){
TorqueScriptTemplate.m_ts.fnAITurretShape_startScanForTargets(_mSimObjectId);
}
/// <summary>
/// @brief Have the turret track the current target.)
/// 
/// </summary>
public  void startTrackingTarget(){
TorqueScriptTemplate.m_ts.fnAITurretShape_startTrackingTarget(_mSimObjectId);
}
/// <summary>
/// @brief Stop scanning for targets.
///    @note Only impacts the scanning for new targets.  Does not effect a turret's current 
///    target lock.)
/// 
/// </summary>
public  void stopScanForTargets(){
TorqueScriptTemplate.m_ts.fnAITurretShape_stopScanForTargets(_mSimObjectId);
}
/// <summary>
/// @brief Stop the turret from tracking the current target.)
/// 
/// </summary>
public  void stopTrackingTarget(){
TorqueScriptTemplate.m_ts.fnAITurretShape_stopTrackingTarget(_mSimObjectId);
}
}}
