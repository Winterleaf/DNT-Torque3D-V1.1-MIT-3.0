
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoGuiIconButtonCtrl : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coGuiIconButtonCtrl(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoGuiIconButtonCtrl))]
    public class coGuiIconButtonCtrl: coGuiButtonCtrl
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiIconButtonCtrl(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiIconButtonCtrl(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coGuiIconButtonCtrl(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coGuiIconButtonCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coGuiIconButtonCtrl ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coGuiIconButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiIconButtonCtrl(string ts)
            {
            return new coGuiIconButtonCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coGuiIconButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiIconButtonCtrl(int ts)
            {
            return new coGuiIconButtonCtrl(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coGuiIconButtonCtrl ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coGuiIconButtonCtrl(uint ts)
            {
            return new coGuiIconButtonCtrl(ts);
            }
/// <summary>
/// If true, the text and icon will be automatically sized to the size of the control.\n
/// </summary>
public bool autoSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".autoSize").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".autoSize", value.AsString());
          }
       }
private Point2I _buttonMargin = null;
/// <summary>
/// Margin area around the button.\n
/// </summary>
public Point2I buttonMargin
       {
       get
          {
          if (_buttonMargin!=null)
              _buttonMargin.DetachAllEvents();
           _buttonMargin = dnTorque.self.GetVar(_mSimObjectId + ".buttonMargin").AsPoint2I();
          _buttonMargin.OnChangeNotification +=_buttonMargin_OnChangeNotification;
          return _buttonMargin;
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".buttonMargin", value.AsString());
          }
       }
void _buttonMargin_OnChangeNotification(object o, Notifier.ChangeNotificationEventArgs e)
       {
       dnTorque.self.SetVar(_mSimObjectId + ".buttonMargin", e.NewValue);
       }
/// <summary>
/// Bitmap file for the icon to display on the button.\n
/// </summary>
public String iconBitmap
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".iconBitmap").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".iconBitmap", value.AsString());
          }
       }
/// <summary>
/// Where to place the icon on the control. Options are 0 (None), 1 (Left), 2 (Right), 3 (Center).\n
/// </summary>
public GuiIconButtonCtrl__IconLocation iconLocation
       {
       get
          {          return (GuiIconButtonCtrl__IconLocation)Enum.Parse(typeof(GuiIconButtonCtrl__IconLocation), dnTorque.self.GetVar(_mSimObjectId + ".iconLocation"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".iconLocation", value.ToString());
          }
       }
/// <summary>
/// If true, will make sure the icon is square.\n
/// </summary>
public bool makeIconSquare
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".makeIconSquare").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".makeIconSquare", value.AsString());
          }
       }
/// <summary>
/// If true, the icon will be scaled to be the same size as the button.\n
/// </summary>
public bool sizeIconToButton
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".sizeIconToButton").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".sizeIconToButton", value.AsString());
          }
       }
/// <summary>
/// Where to place the text on the control.\n																										  Options are 0 (None), 1 (Bottom), 2 (Right), 3 (Top), 4 (Left), 5 (Center).\n
/// </summary>
public GuiIconButtonCtrl__TextLocation textLocation
       {
       get
          {          return (GuiIconButtonCtrl__TextLocation)Enum.Parse(typeof(GuiIconButtonCtrl__TextLocation), dnTorque.self.GetVar(_mSimObjectId + ".textLocation"));
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".textLocation", value.ToString());
          }
       }
/// <summary>
/// Margin between the icon and the text.\n
/// </summary>
public int textMargin
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".textMargin").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".textMargin", value.AsString());
          }
       }
/// <summary>
/// @brief Set the bitmap to use for the button portion of this control.
///    @param buttonFilename Filename for the image
///    @tsexample
///    // Define the button filename
///    %buttonFilename = \"pearlButton\";
///    // Inform the GuiIconButtonCtrl control to update its main button graphic to the defined bitmap
///    %thisGuiIconButtonCtrl.setBitmap(%buttonFilename);
///    @endtsexample
///    @see GuiControl
///    @see GuiButtonCtrl)
/// 
/// </summary>
public  void setBitmap(string buttonFilename){
TorqueScriptTemplate.m_ts.fnGuiIconButtonCtrl_setBitmap(_mSimObjectId, buttonFilename);
}
}}
