
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
using System.Threading;
#endregion

namespace WinterLeaf.tsObjects
    {
    /// <summary>
    /// 
    /// </summary>
    internal class tsObjectConvertercoShapeBaseData : TypeConverter
        {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="sourceType"></param>
        /// <returns></returns>
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
            return (typeof(string) == sourceType);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="culture"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
            {
            if (value is string)
                {
                return new coShapeBaseData(value as string);
                }

            return null;
            }
        }

      
    /// <summary>
    /// 
    /// </summary>
    [TypeConverter(typeof(tsObjectConvertercoShapeBaseData))]
    public class coShapeBaseData: coGameBaseData
{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShapeBaseData(string simobjectid) : base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShapeBaseData(uint simobjectid): base(simobjectid){ }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="simobjectid"></param>
internal coShapeBaseData(int simobjectid): base(simobjectid){ }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator ==(coShapeBaseData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return object.ReferenceEquals(simobjectid, null);
            return ts.Equals(simobjectid);


            }
  /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
            {
            throw new NotImplementedException();
            }
  /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
            {
            
            return (this._mSimObjectId ==(string)myReflections.ChangeType( obj,typeof(string)));
            }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <param name="simobjectid"></param>
        /// <returns></returns>
        public static bool operator !=(coShapeBaseData ts, string simobjectid)
            {
            if (object.ReferenceEquals(ts, null))
                return !object.ReferenceEquals(simobjectid, null);
            return !ts.Equals(simobjectid);

            }


            /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator string( coShapeBaseData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return "0";
            return ts._mSimObjectId;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseData(string ts)
            {
            return new coShapeBaseData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator int( coShapeBaseData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            int i;
            return int.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseData(int ts)
            {
            return new coShapeBaseData(ts);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator uint( coShapeBaseData ts)
            {
            if (object.ReferenceEquals(ts, null))
                 return 0;
            uint i;
            return uint.TryParse(ts._mSimObjectId, out i) ? i : 0;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ts"></param>
        /// <returns></returns>
        public static implicit operator coShapeBaseData(uint ts)
            {
            return new coShapeBaseData(ts);
            }
/// <summary>
/// If the derrived class supports it, allow the camera to bank. 
/// </summary>
public bool cameraCanBank
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraCanBank").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraCanBank", value.AsString());
          }
       }
/// <summary>
/// The default camera vertical FOV in degrees. 
/// </summary>
public float cameraDefaultFov
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraDefaultFov").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraDefaultFov", value.AsString());
          }
       }
/// <summary>
/// The maximum distance from the camera to the object.\n     Used when computing a custom camera transform for this object.\n\n     @see observeThroughObject 
/// </summary>
public float cameraMaxDist
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraMaxDist").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraMaxDist", value.AsString());
          }
       }
/// <summary>
/// The maximum camera vertical FOV allowed in degrees. 
/// </summary>
public float cameraMaxFov
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraMaxFov").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraMaxFov", value.AsString());
          }
       }
/// <summary>
/// The minimum distance from the camera to the object.\n     Used when computing a custom camera transform for this object.\n\n     @see observeThroughObject 
/// </summary>
public float cameraMinDist
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraMinDist").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraMinDist", value.AsString());
          }
       }
/// <summary>
/// The minimum camera vertical FOV allowed in degrees. 
/// </summary>
public float cameraMinFov
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cameraMinFov").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cameraMinFov", value.AsString());
          }
       }
/// <summary>
/// If true, verify that the CRC of the client's shape model matches the      server's CRC for the shape model when loaded by the client. 
/// </summary>
public bool computeCRC
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".computeCRC").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".computeCRC", value.AsString());
          }
       }
/// <summary>
/// References a ReflectorDesc datablock that defines performance and quality properties for dynamic reflections.\n
/// </summary>
public String cubeReflectorDesc
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".cubeReflectorDesc").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".cubeReflectorDesc", value.AsString());
          }
       }
/// <summary>
/// %Debris to generate when this shape is blown up. 
/// </summary>
public coDebrisData debris
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debris");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debris", value.ToString());
          }
       }
/// <summary>
/// The DTS or DAE model to use for auto-generated breakups. @note may not be functional. 
/// </summary>
public String debrisShapeName
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".debrisShapeName").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".debrisShapeName", value.AsString());
          }
       }
/// <summary>
/// Shape density.\nUsed when computing buoyancy when in water.\n 
/// </summary>
public float density
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".density").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".density", value.AsString());
          }
       }
/// <summary>
/// Damage level above which the object is destroyed.\n     When the damage level increases above this value, the object damage      state is set to \Destroyed\. 
/// </summary>
public float destroyedLevel
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".destroyedLevel").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".destroyedLevel", value.AsString());
          }
       }
/// <summary>
/// Damage level above which the object is disabled.\n     Currently unused. 
/// </summary>
public float disabledLevel
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".disabledLevel").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".disabledLevel", value.AsString());
          }
       }
/// <summary>
/// Drag factor.\nReduces velocity of moving objects. 
/// </summary>
public float drag
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".drag").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".drag", value.AsString());
          }
       }
/// <summary>
/// %Explosion to generate when this shape is blown up. 
/// </summary>
public coExplosionData explosion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".explosion");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".explosion", value.ToString());
          }
       }
/// <summary>
/// Flag controlling whether the view from this object is first person      only. 
/// </summary>
public bool firstPersonOnly
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".firstPersonOnly").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".firstPersonOnly", value.AsString());
          }
       }
/// <summary>
/// Flag controlling whether to manage our own energy level, or to use      the energy level of the object we are mounted to. 
/// </summary>
public bool inheritEnergyFromMount
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".inheritEnergyFromMount").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".inheritEnergyFromMount", value.AsString());
          }
       }
/// <summary>
/// Invincible flag; when invincible, the object cannot be damaged or      repaired. 
/// </summary>
public bool isInvincible
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".isInvincible").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".isInvincible", value.AsString());
          }
       }
/// <summary>
/// Shape mass.\nUsed in simulation of moving objects.\n 
/// </summary>
public float mass
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mass").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mass", value.AsString());
          }
       }
/// <summary>
/// Maximum damage level for this object. 
/// </summary>
public float maxDamage
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxDamage").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxDamage", value.AsString());
          }
       }
/// <summary>
/// Maximum energy level for this object. 
/// </summary>
public float maxEnergy
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".maxEnergy").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".maxEnergy", value.AsString());
          }
       }
/// <summary>
/// Do mounted images bank along with the camera? 
/// </summary>
public bool mountedImagesBank
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".mountedImagesBank").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".mountedImagesBank", value.AsString());
          }
       }
/// <summary>
/// Observe this object through its camera transform and default fov.\n     If true, when this object is the camera it can provide a custom camera      transform and FOV (instead of the default eye transform). 
/// </summary>
public bool observeThroughObject
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".observeThroughObject").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".observeThroughObject", value.AsString());
          }
       }
/// <summary>
/// Whether to render the shape when it is in the \Destroyed\ damage state. 
/// </summary>
public bool renderWhenDestroyed
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".renderWhenDestroyed").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".renderWhenDestroyed", value.AsString());
          }
       }
/// <summary>
/// Rate at which damage is repaired in damage units/tick.\n     This value is subtracted from the damage level until it reaches 0. 
/// </summary>
public float repairRate
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".repairRate").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".repairRate", value.AsString());
          }
       }
/// <summary>
/// Enable shadows for this shape (currently unused, shadows are always enabled). 
/// </summary>
public bool shadowEnable
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shadowEnable").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shadowEnable", value.AsString());
          }
       }
/// <summary>
/// Maximum distance at which shadow is visible (currently unused). 
/// </summary>
public float shadowMaxVisibleDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shadowMaxVisibleDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shadowMaxVisibleDistance", value.AsString());
          }
       }
/// <summary>
/// Maximum height above ground to project shadow. If the object is higher      than this no shadow will be rendered. 
/// </summary>
public float shadowProjectionDistance
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shadowProjectionDistance").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shadowProjectionDistance", value.AsString());
          }
       }
/// <summary>
/// Size of the projected shadow texture (must be power of 2). 
/// </summary>
public int shadowSize
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shadowSize").AsInt();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shadowSize", value.AsString());
          }
       }
/// <summary>
/// Scalar applied to the radius of spot shadows (initial radius is based      on the shape bounds but can be adjusted with this field). 
/// </summary>
public float shadowSphereAdjust
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shadowSphereAdjust").AsFloat();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shadowSphereAdjust", value.AsString());
          }
       }
/// <summary>
/// The DTS or DAE model to use for this object. 
/// </summary>
public String shapeFile
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".shapeFile").AsString();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".shapeFile", value.AsString());
          }
       }
/// <summary>
/// %Explosion to generate when this shape is blown up underwater. 
/// </summary>
public coExplosionData underwaterExplosion
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".underwaterExplosion");
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".underwaterExplosion", value.ToString());
          }
       }
/// <summary>
/// Flag controlling whether the client uses this object's eye point to      view from. 
/// </summary>
public bool useEyePoint
       {
       get
          {
          return dnTorque.self.GetVar(_mSimObjectId + ".useEyePoint").AsBool();
          }
       set
          {
          dnTorque.self.SetVar(_mSimObjectId + ".useEyePoint", value.AsString());
          }
       }
/// <summary>
/// @brief Check if there is the space at the given transform is free to spawn into.
/// 
///    The shape's bounding box volume is used to check for collisions at the given world 
///    transform.  Only interior and static objects are checked for collision.
/// 
///    @param txfm Deploy transform to check
///    @return True if the space is free, false if there is already something in 
///    the way.
/// 
///    @note This is a server side only check, and is not actually limited to spawning.)
/// 
/// </summary>
public  bool checkDeployPos(TransformF txfm){
return TorqueScriptTemplate.m_ts.fnShapeBaseData_checkDeployPos(_mSimObjectId, txfm.AsString());
}
/// <summary>
/// @brief Helper method to get a transform from a position and vector (suitable for use with setTransform).
///    @param pos Desired transform position
///    @param normal Vector of desired direction
///    @return The deploy transform )
/// 
/// </summary>
public  TransformF getDeployTransform(Point3F pos, Point3F normal){
return new TransformF ( TorqueScriptTemplate.m_ts.fnShapeBaseData_getDeployTransform(_mSimObjectId, pos.AsString(), normal.AsString()));
}
}}
