// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// 
// 

#region

using System;
using System.Globalization;
using System.Linq;
using WinterLeaf.Containers;
using WinterLeaf.tsObjects;

#endregion

namespace WinterLeaf.Classes
    {
    /// <summary>
    ///   This class is used to extend primary data types for ease with the Torque Engine.
    /// </summary>
    public static class MyExtensions
        {
        /// <summary>
        /// Checks if the string is an object in the engine.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static bool isObject(this string value)
            {
            if (value.Trim() == "")
                return false;

            if (value.Trim().Contains(" "))
                return false;

            return ((coSimObject) value).isObject();
            }

        /// <summary>
        /// If it is a simobject, it will call delete.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static void delete(this string value)
            {
            if (value.Trim() == "")
                return;

            if (value.Trim().Contains(" "))
                return;

            if (value.isObject())
                ((coSimObject) value).delete();
            }

        /// <summary>
        /// If it is a simobject, it will call delete.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string getName(this string value)
            {
            if (value.Trim() == "")
                return "";

            if (value.Trim().Contains(" "))
                return "";

            if (value.isObject())
                ((coSimObject) value).getName();

            return "";
            }


        /// <summary>
        /// Converts string to a Vector of Bools
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VectorBool AsVectorBool(this string value)
            {
            return new VectorBool(value);
            }

        /// <summary>
        /// Converts string to a Vector of Ints
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VectorInt AsVectorInt(this string value)
            {
            return new VectorInt(value);
            }

        /// <summary>
        /// Converts string to a Vector of Floats.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VectorFloat AsVectorFloat(this string value)
            {
            return new VectorFloat(value);
            }

        /// <summary>
        /// Converts string to an EaseF
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EaseF AsEaseF(this string value)
            {
            return new EaseF(value);
            }

        /// <summary>
        /// Converts string to a sByte
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static sbyte AsSbyte(this string value)
            {
            if (value.Trim().ToLower() == "true")
                return 1;
            if (value.Trim().ToLower() == "false")
                return 0;
            if (value.Trim() == "")
                value = "0";

            sbyte s;
            if (sbyte.TryParse(value, out s))
                {
                return s;
                }
            throw new Exception("Failed to parse sbyte.");
            }

        /// <summary>
        /// Converts String to a RectF
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RectF AsRectF(this string value)
            {
            return new RectF(value);
            }

        /// <summary>
        /// Converts string to a RectI
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RectI AsRectI(this string value)
            {
            return new RectI(value);
            }

        /// <summary>
        /// Converts RectF to a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this RectF value)
            {
            return value.AsString();
            }

        /// <summary>
        /// Converts a Polyhedron to a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsPolyhedron(this Polyhedron value)
            {
            return value.AsString();
            }

        /// <summary>
        /// Converts string to a Polyhedron
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Polyhedron AsPolyhedron(this string value)
            {
            return new Polyhedron(value);
            }

        /// <summary>
        /// Returns string as Box3F
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Box3F AsBox3F(this string value)
            {
            return new Box3F(value);
            }

        /// <summary>
        /// Returns string as ColorF
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorF AsColorF(this string value)
            {
            return new ColorF(value);
            }

        /// <summary>
        /// Returns String as ColorI
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorI AsColorI(this string value)
            {
            return new ColorI(value);
            }

        /// <summary>
        /// Returns string as Point2F
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Point2F AsPoint2F(this string value)
            {
            return new Point2F(value);
            }

        /// <summary>
        /// Returns string as Point2I
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Point2I AsPoint2I(this string value)
            {
            return new Point2I(value);
            }

        /// <summary>
        /// Returns string as Point3F
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Point3F AsPoint3F(this string value)
            {
            return new Point3F(value);
            }

        /// <summary>
        /// Returns string as RectSpacingI
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RectSpacingI AsRectSpacingI(this string value)
            {
            return new RectSpacingI(value);
            }

        /// <summary>
        /// Returns string as TransformF
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TransformF AsTransformF(this string value)
            {
            return new TransformF(value);
            }

        /// <summary>
        ///   Converts a string to a string, done for consistency.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> </returns>
        public static string AsString(this string value)
            {
            return value;
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static tsObject AsTsObject(this string value)
            {
            return new tsObject(value);
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static tsObject AsTsObject(this Int32 value)
            {
            return new tsObject(value);
            }

        /// <summary>
        ///   Returns the int as a string
        /// </summary>
        /// <param name="value"> int </param>
        /// <returns> </returns>
        public static string AsString(this Int32 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        /// Converts sByte to string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this sbyte value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        ///   Returns the uint as a string
        /// </summary>
        /// <param name="value"> uint </param>
        /// <returns> </returns>
        public static string AsString(this UInt32 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        ///   Returns the double as a string
        /// </summary>
        /// <param name="value"> double </param>
        /// <returns> </returns>
        public static string AsString(this double value)
            {
            return value.ToString("0.000000", CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        /// Returns the long as a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this Int64 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        /// Returns the long as a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this UInt64 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this Int16 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        ///   Returns the float as a string
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> float </returns>
        public static string AsString(this UInt16 value)
            {
            return value.ToString(CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        ///   Returns the float as a string
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> float </returns>
        public static string AsString(this float value)
            {
            return ((double) value).ToString("0.000", CultureInfo.GetCultureInfo("en"));
            }

        /// <summary>
        /// Converts a bool to a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string AsString(this bool value)
            {
            return value ? "true" : "false";
            }

        /// <summary>
        ///   if the value is >=1 returns true.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> float </returns>
        public static bool AsBool(this float value)
            {
            return value >= 1;
            }

        /// <summary>
        ///   if the value is >=1 returns true.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> double </returns>
        public static bool AsBool(this double value)
            {
            return value >= 1;
            }

        /// <summary>
        ///   if the value is >=1 returns true.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> int </returns>
        public static bool AsBool(this int value)
            {
            return value >= 1;
            }

        /// <summary>
        ///   if the value is >=1 returns true.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> uint </returns>
        public static bool AsBool(this uint value)
            {
            return value >= 1;
            }

        /// <summary>
        ///   if the string is numerical and the value is >1 it returns true If the string = "true" it returns true.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> string </returns>
        public static bool AsBool(this string value)
            {
            if (value.Trim() == "")
                return false;
            if (value == "1")
                return true;
            if (value.ToLower() == "true")
                return true;

            double r;
            if (double.TryParse(value, NumberStyles.Number, CultureInfo.GetCultureInfo("en"), out r))
                {
                if (r > 0)
                    return true;
                }
            return false;
            }

        /// <summary>
        ///   returns the string as a int.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> int </returns>
        public static int AsInt(this string value)
            {
            if (value.Trim() == "")
                return 0;
            if (value.ToLower() == "false")
                return 0;
            if (value.ToLower() == "true")
                return 1;
            if (value == "")
                return 0;
            if (!IsNumeric(value))
                try
                    {
                    string p = value;
                    tsObject t = new tsObject(value);
                    value = t._mSimObjectId.AsString();
                    //dnTorque.self.Warn("Object Name  '" + p + "' was passed instead of the object ID to asInt, performance loss.");
                    }
                catch (Exception)
                    {
                    }
            int i;
            if (int.TryParse(value, NumberStyles.Number, CultureInfo.GetCultureInfo("en"), out i))
                return i;

            double d;
            if (double.TryParse(value, out d))
                {
                return (int) d;
                }

            throw new Exception("Failed to cast string to int");
            }

        /// <summary>
        /// Converts a string of one character to a byte.
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Byte AsByte(this string value)
            {
            if (value.Trim() == "")
                return 0;
            Byte i;
            return Byte.TryParse(value, out i) ? i : (byte) 0;
            }

        /// <summary>
        ///   returns the string as a unint
        /// </summary>
        /// <param name="value"> uint </param>
        /// <returns> </returns>
        public static uint AsUint(this string value)
            {
            if (value.Trim() == "")
                return 0;
            if (!IsNumeric(value))
                try
                    {
                    string p = value;
                    tsObject t = new tsObject(value);
                    value = t._mSimObjectId.AsString();
                    //dnTorque.self.Warn("Object Name  '" + p + "' was passed instead of the object ID to asUInt, performance loss.");
                    }
                catch (Exception)
                    {
                    }
            uint v;
            if (uint.TryParse(value, NumberStyles.Number, CultureInfo.GetCultureInfo("en"), out v))
                return v;

            int i;
            if (int.TryParse(value, NumberStyles.Number, CultureInfo.GetCultureInfo("en"), out i))
                return (uint) i;
            throw new Exception("Failed to cast string to uint");
            }

        /// <summary>
        ///   Returns the string as a float.
        /// </summary>
        /// <param name="value"> float </param>
        /// <returns> </returns>
        public static float AsFloat(this string value)
            {
            if (value.Trim() == "")
                return 0;
            double v;
            if (double.TryParse(value, NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.GetCultureInfo("en"), out v))
                {
                return (float) v;
                }
            float f;
            if (float.TryParse(value, NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.GetCultureInfo("en"), out f))
                {
                return f;
                }
            throw new Exception("Failed to cast string to float");
            }

        /// <summary>
        ///   Returns the string as a double.
        /// </summary>
        /// <param name="value"> double </param>
        /// <returns> </returns>
        public static double AsDouble(this string value)
            {
            if (value.Trim() == "")
                return 0;
            double v;
            if (double.TryParse(value, NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.GetCultureInfo("en"), out v))
                {
                return v;
                }
            float f;
            if (float.TryParse(value, NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.GetCultureInfo("en"), out f))
                {
                v = f;
                return v;
                }
            throw new Exception("Failed to cast string to float");
            }

        /// <summary>
        ///   Converts a string to a long.
        /// </summary>
        /// <param name="value"> </param>
        /// <returns> </returns>
        public static long AsLong(this string value)
            {
            if (value.Trim() == "")
                return 0;
            long v;
            if (long.TryParse(value, NumberStyles.Number, CultureInfo.GetCultureInfo("en"), out v))
                return v;
            throw new Exception("Failed to cast String to long.");
            }

        /// <summary>
        ///   Checks the string to ensure it is a valid numeric string.
        /// </summary>
        /// <param name="numberString"> </param>
        /// <returns> </returns>
        public static bool IsNumeric(this string numberString)
            {
            foreach (byte c in numberString.ToArray())
                {
                if ((((c < 48) || (c > 57)) && (c != 46) && (c != 44) && c != '-' && c != '+'))
                    return false;
                }
            return true;
            }
        }
    }