
// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.

#region
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinterLeaf.Classes;
using WinterLeaf.Containers;
using WinterLeaf.Enums;
using System.ComponentModel;
#endregion

namespace WinterLeaf.Enums
    {

/// <summary>
/// ConsoleLogEntry__Level
/// </summary>
public enum  ConsoleLogEntry__Level{
/// <summary>
/// 
/// </summary>

 Normal = 0,
/// <summary>
/// 
/// </summary>

 Warning,
/// <summary>
/// 
/// </summary>

 Error,
/// <summary>
/// 
/// </summary>

 NUM_CLASS
 };

/// <summary>
/// OggTheoraDecoder__ETranscoder
/// </summary>
public enum  OggTheoraDecoder__ETranscoder{
/// <summary>
/// 
/// </summary>

 TRANSCODER_Auto,
/// <summary>
/// 
/// </summary>
 TRANSCODER_Generic,
/// <summary>
/// 
/// </summary>
 TRANSCODER_SSE2420RGBA,
/// <summary>
/// 
/// </summary>
 };

/// <summary>
/// ForestBrushTool__BrushMode
/// </summary>
public enum  ForestBrushTool__BrushMode{
/// <summary>
/// 
/// </summary>

 Paint = 0,
/// <summary>
/// 
/// </summary>

 Erase,
/// <summary>
/// 
/// </summary>

 EraseSelected
 };

/// <summary>
/// TypeGFXBlend
/// </summary>
public enum  TypeGFXBlend{

/// <summary>
/// GFXBlendZero
/// </summary>
GFXBlendZero, 
/// <summary>
/// GFXBlendOne
/// </summary>
GFXBlendOne, 
/// <summary>
/// GFXBlendSrcColor
/// </summary>
GFXBlendSrcColor, 
/// <summary>
/// GFXBlendInvSrcColor
/// </summary>
GFXBlendInvSrcColor, 
/// <summary>
/// GFXBlendSrcAlpha
/// </summary>
GFXBlendSrcAlpha, 
/// <summary>
/// GFXBlendInvSrcAlpha
/// </summary>
GFXBlendInvSrcAlpha, 
/// <summary>
/// GFXBlendDestAlpha
/// </summary>
GFXBlendDestAlpha, 
/// <summary>
/// GFXBlendInvDestAlpha
/// </summary>
GFXBlendInvDestAlpha, 
/// <summary>
/// GFXBlendDestColor
/// </summary>
GFXBlendDestColor, 
/// <summary>
/// GFXBlendInvDestColor
/// </summary>
GFXBlendInvDestColor, 
/// <summary>
/// GFXBlendSrcAlphaSat
/// </summary>
GFXBlendSrcAlphaSat, };

/// <summary>
/// TypeGFXCmpFunc
/// </summary>
public enum  TypeGFXCmpFunc{

/// <summary>
/// GFXCmpNever
/// </summary>
GFXCmpNever, 
/// <summary>
/// GFXCmpLess
/// </summary>
GFXCmpLess, 
/// <summary>
/// GFXCmpEqual
/// </summary>
GFXCmpEqual, 
/// <summary>
/// GFXCmpLessEqual
/// </summary>
GFXCmpLessEqual, 
/// <summary>
/// GFXCmpGreater
/// </summary>
GFXCmpGreater, 
/// <summary>
/// GFXCmpNotEqual
/// </summary>
GFXCmpNotEqual, 
/// <summary>
/// GFXCmpGreaterEqual
/// </summary>
GFXCmpGreaterEqual, 
/// <summary>
/// GFXCmpAlways
/// </summary>
GFXCmpAlways, };

/// <summary>
/// TypeGFXTextureAddressMode
/// </summary>
public enum  TypeGFXTextureAddressMode{

/// <summary>
/// GFXAddressWrap
/// </summary>
GFXAddressWrap, 
/// <summary>
/// GFXAddressMirror
/// </summary>
GFXAddressMirror, 
/// <summary>
/// GFXAddressClamp
/// </summary>
GFXAddressClamp, 
/// <summary>
/// GFXAddressBorder
/// </summary>
GFXAddressBorder, 
/// <summary>
/// GFXAddressMirrorOnce
/// </summary>
GFXAddressMirrorOnce, };

/// <summary>
/// TypeGFXTextureFilterType
/// </summary>
public enum  TypeGFXTextureFilterType{

/// <summary>
/// GFXTextureFilterNone
/// </summary>
GFXTextureFilterNone, 
/// <summary>
/// GFXTextureFilterPoint
/// </summary>
GFXTextureFilterPoint, 
/// <summary>
/// GFXTextureFilterLinear
/// </summary>
GFXTextureFilterLinear, 
/// <summary>
/// GFXTextureFilterAnisotropic
/// </summary>
GFXTextureFilterAnisotropic, 
/// <summary>
/// GFXTextureFilterPyramidalQuad
/// </summary>
GFXTextureFilterPyramidalQuad, 
/// <summary>
/// GFXTextureFilterGaussianQuad
/// </summary>
GFXTextureFilterGaussianQuad, };

/// <summary>
/// TypeGFXTextureOp
/// </summary>
public enum  TypeGFXTextureOp{

/// <summary>
/// GFXTOPDisable
/// </summary>
GFXTOPDisable, 
/// <summary>
/// GFXTOPSelectARG1
/// </summary>
GFXTOPSelectARG1, 
/// <summary>
/// GFXTOPSelectARG2
/// </summary>
GFXTOPSelectARG2, 
/// <summary>
/// GFXTOPModulate
/// </summary>
GFXTOPModulate, 
/// <summary>
/// GFXTOPModulate2X
/// </summary>
GFXTOPModulate2X, 
/// <summary>
/// GFXTOPModulate4X
/// </summary>
GFXTOPModulate4X, 
/// <summary>
/// GFXTOPAdd
/// </summary>
GFXTOPAdd, 
/// <summary>
/// GFXTOPAddSigned
/// </summary>
GFXTOPAddSigned, 
/// <summary>
/// GFXTOPAddSigned2X
/// </summary>
GFXTOPAddSigned2X, 
/// <summary>
/// GFXTOPSubtract
/// </summary>
GFXTOPSubtract, 
/// <summary>
/// GFXTOPAddSmooth
/// </summary>
GFXTOPAddSmooth, 
/// <summary>
/// GFXTOPBlendDiffuseAlpha
/// </summary>
GFXTOPBlendDiffuseAlpha, 
/// <summary>
/// GFXTOPBlendTextureAlpha
/// </summary>
GFXTOPBlendTextureAlpha, 
/// <summary>
/// GFXTOPBlendFactorAlpha
/// </summary>
GFXTOPBlendFactorAlpha, 
/// <summary>
/// GFXTOPBlendTextureAlphaPM
/// </summary>
GFXTOPBlendTextureAlphaPM, 
/// <summary>
/// GFXTOPBlendCURRENTALPHA
/// </summary>
GFXTOPBlendCURRENTALPHA, 
/// <summary>
/// GFXTOPPreModulate
/// </summary>
GFXTOPPreModulate, 
/// <summary>
/// GFXTOPModulateAlphaAddColor
/// </summary>
GFXTOPModulateAlphaAddColor, 
/// <summary>
/// GFXTOPModulateColorAddAlpha
/// </summary>
GFXTOPModulateColorAddAlpha, 
/// <summary>
/// GFXTOPModulateInvAlphaAddColor
/// </summary>
GFXTOPModulateInvAlphaAddColor, 
/// <summary>
/// GFXTOPModulateInvColorAddAlpha
/// </summary>
GFXTOPModulateInvColorAddAlpha, 
/// <summary>
/// GFXTOPBumpEnvMap
/// </summary>
GFXTOPBumpEnvMap, 
/// <summary>
/// GFXTOPBumpEnvMapLuminance
/// </summary>
GFXTOPBumpEnvMapLuminance, 
/// <summary>
/// GFXTOPDotProduct3
/// </summary>
GFXTOPDotProduct3, 
/// <summary>
/// GFXTOPLERP
/// </summary>
GFXTOPLERP, };

/// <summary>
/// TypeGFXTextureArgument
/// </summary>
public enum  TypeGFXTextureArgument{

/// <summary>
/// GFXTADiffuse
/// </summary>
GFXTADiffuse, 
/// <summary>
/// GFXTACurrent
/// </summary>
GFXTACurrent, 
/// <summary>
/// GFXTATexture
/// </summary>
GFXTATexture, 
/// <summary>
/// GFXTATFactor
/// </summary>
GFXTATFactor, 
/// <summary>
/// GFXTASpecular
/// </summary>
GFXTASpecular, 
/// <summary>
/// GFXTATemp
/// </summary>
GFXTATemp, 
/// <summary>
/// GFXTAConstant
/// </summary>
GFXTAConstant, 
/// <summary>
/// OneMinus
/// </summary>
OneMinus, 
/// <summary>
/// AlphaReplicate
/// </summary>
AlphaReplicate, };

/// <summary>
/// TypeGFXTextureTransformFlags
/// </summary>
public enum  TypeGFXTextureTransformFlags{

/// <summary>
/// GFXTTFDisable
/// </summary>
GFXTTFDisable, 
/// <summary>
/// GFXTTFFCoord1D
/// </summary>
GFXTTFFCoord1D, 
/// <summary>
/// GFXTTFFCoord2D
/// </summary>
GFXTTFFCoord2D, 
/// <summary>
/// GFXTTFFCoord3D
/// </summary>
GFXTTFFCoord3D, 
/// <summary>
/// GFXTTFFCoord4D
/// </summary>
GFXTTFFCoord4D, 
/// <summary>
/// GFXTTFProjected
/// </summary>
GFXTTFProjected, };

/// <summary>
/// TypeGFXFormat
/// </summary>
public enum  TypeGFXFormat{

/// <summary>
/// GFXFormatR8G8B8
/// </summary>
GFXFormatR8G8B8, 
/// <summary>
/// GFXFormatR8G8B8A8
/// </summary>
GFXFormatR8G8B8A8, 
/// <summary>
/// GFXFormatR8G8B8X8
/// </summary>
GFXFormatR8G8B8X8, 
/// <summary>
/// GFXFormatR32F
/// </summary>
GFXFormatR32F, 
/// <summary>
/// GFXFormatR5G6B5
/// </summary>
GFXFormatR5G6B5, 
/// <summary>
/// GFXFormatR5G5B5A1
/// </summary>
GFXFormatR5G5B5A1, 
/// <summary>
/// GFXFormatR5G5B5X1
/// </summary>
GFXFormatR5G5B5X1, 
/// <summary>
/// GFXFormatA4L4
/// </summary>
GFXFormatA4L4, 
/// <summary>
/// GFXFormatA8L8
/// </summary>
GFXFormatA8L8, 
/// <summary>
/// GFXFormatA8
/// </summary>
GFXFormatA8, 
/// <summary>
/// GFXFormatL8
/// </summary>
GFXFormatL8, 
/// <summary>
/// GFXFormatDXT1
/// </summary>
GFXFormatDXT1, 
/// <summary>
/// GFXFormatDXT2
/// </summary>
GFXFormatDXT2, 
/// <summary>
/// GFXFormatDXT3
/// </summary>
GFXFormatDXT3, 
/// <summary>
/// GFXFormatDXT4
/// </summary>
GFXFormatDXT4, 
/// <summary>
/// GFXFormatDXT5
/// </summary>
GFXFormatDXT5, 
/// <summary>
/// GFXFormatD32
/// </summary>
GFXFormatD32, 
/// <summary>
/// GFXFormatD24X8
/// </summary>
GFXFormatD24X8, 
/// <summary>
/// GFXFormatD24S8
/// </summary>
GFXFormatD24S8, 
/// <summary>
/// GFXFormatD24FS8
/// </summary>
GFXFormatD24FS8, 
/// <summary>
/// GFXFormatD16
/// </summary>
GFXFormatD16, 
/// <summary>
/// GFXFormatR32G32B32A32F
/// </summary>
GFXFormatR32G32B32A32F, 
/// <summary>
/// GFXFormatR16G16B16A16F
/// </summary>
GFXFormatR16G16B16A16F, 
/// <summary>
/// GFXFormatL16
/// </summary>
GFXFormatL16, 
/// <summary>
/// GFXFormatR16G16B16A16
/// </summary>
GFXFormatR16G16B16A16, 
/// <summary>
/// GFXFormatR16G16
/// </summary>
GFXFormatR16G16, 
/// <summary>
/// GFXFormatR16F
/// </summary>
GFXFormatR16F, 
/// <summary>
/// GFXFormatR16G16F
/// </summary>
GFXFormatR16G16F, 
/// <summary>
/// GFXFormatR10G10B10A2
/// </summary>
GFXFormatR10G10B10A2, };

/// <summary>
/// TypeGFXCullMode
/// </summary>
public enum  TypeGFXCullMode{

/// <summary>
/// GFXCullNone
/// </summary>
GFXCullNone, 
/// <summary>
/// GFXCullCW
/// </summary>
GFXCullCW, 
/// <summary>
/// GFXCullCCW
/// </summary>
GFXCullCCW, };

/// <summary>
/// TypeGFXStencilOp
/// </summary>
public enum  TypeGFXStencilOp{

/// <summary>
/// GFXStencilOpKeep
/// </summary>
GFXStencilOpKeep, 
/// <summary>
/// GFXStencilOpZero
/// </summary>
GFXStencilOpZero, 
/// <summary>
/// GFXStencilOpReplace
/// </summary>
GFXStencilOpReplace, 
/// <summary>
/// GFXStencilOpIncrSat
/// </summary>
GFXStencilOpIncrSat, 
/// <summary>
/// GFXStencilOpDecrSat
/// </summary>
GFXStencilOpDecrSat, 
/// <summary>
/// GFXStencilOpInvert
/// </summary>
GFXStencilOpInvert, 
/// <summary>
/// GFXStencilOpIncr
/// </summary>
GFXStencilOpIncr, 
/// <summary>
/// GFXStencilOpDecr
/// </summary>
GFXStencilOpDecr, };

/// <summary>
/// TypeGFXBlendOp
/// </summary>
public enum  TypeGFXBlendOp{

/// <summary>
/// GFXBlendOpAdd
/// </summary>
GFXBlendOpAdd, 
/// <summary>
/// GFXBlendOpSubtract
/// </summary>
GFXBlendOpSubtract, 
/// <summary>
/// GFXBlendOpRevSubtract
/// </summary>
GFXBlendOpRevSubtract, 
/// <summary>
/// GFXBlendOpMin
/// </summary>
GFXBlendOpMin, 
/// <summary>
/// GFXBlendOpMax
/// </summary>
GFXBlendOpMax, };

/// <summary>
/// GFXTextureArgument
/// </summary>
public enum  GFXTextureArgument{
/// <summary>
/// 
/// </summary>

 GFXTA_FIRST = 0,
/// <summary>
/// 
/// </summary>

 GFXTADiffuse = 0,
/// <summary>
/// 
/// </summary>

 GFXTACurrent,
/// <summary>
/// 
/// </summary>

 GFXTATexture,
/// <summary>
/// 
/// </summary>

 GFXTATFactor,
/// <summary>
/// 
/// </summary>

 GFXTASpecular,
/// <summary>
/// 
/// </summary>

 GFXTATemp,
/// <summary>
/// 
/// </summary>

 GFXTAConstant,
/// <summary>
/// 
/// </summary>

 GFXTA_COUNT,
/// <summary>
/// 
/// </summary>

 GFXTAComplement = 0x00000010,
/// <summary>
/// 
/// </summary>
 GFXTAAlphaReplicate = 0x00000020,
/// <summary>
/// 
/// </summary>
 };

/// <summary>
/// GuiTSCtrl__RenderStyles
/// </summary>
public enum  GuiTSCtrl__RenderStyles{
/// <summary>
/// 
/// </summary>

 RenderStyleStandard = 0,
/// <summary>
/// 
/// </summary>

 RenderStyleStereoSideBySide = (1<<0),
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// GuiBitmapButtonCtrl__BitmapMode
/// </summary>
public enum  GuiBitmapButtonCtrl__BitmapMode{
/// <summary>
/// 
/// </summary>

 BitmapStretched,
/// <summary>
/// 
/// </summary>

 BitmapCentered,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// GuiButtonBaseCtrl__ButtonType
/// </summary>
public enum  GuiButtonBaseCtrl__ButtonType{
/// <summary>
/// 
/// </summary>

 ButtonTypePush,
/// <summary>
/// 
/// </summary>

 ButtonTypeCheck,
/// <summary>
/// 
/// </summary>

 ButtonTypeRadio,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// GuiIconButtonCtrl__TextLocation
/// </summary>
public enum  GuiIconButtonCtrl__TextLocation{
/// <summary>
/// 
/// </summary>

 TextLocNone,
/// <summary>
/// 
/// </summary>

 TextLocBottom,
/// <summary>
/// 
/// </summary>

 TextLocRight,
/// <summary>
/// 
/// </summary>

 TextLocTop,
/// <summary>
/// 
/// </summary>

 TextLocLeft,
/// <summary>
/// 
/// </summary>

 TextLocCenter,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// GuiIconButtonCtrl__IconLocation
/// </summary>
public enum  GuiIconButtonCtrl__IconLocation{
/// <summary>
/// 
/// </summary>

 IconLocNone,
/// <summary>
/// 
/// </summary>

 IconLocLeft,
/// <summary>
/// 
/// </summary>

 IconLocRight,
/// <summary>
/// 
/// </summary>

 IconLocCenter 
 };

/// <summary>
/// GuiAutoScrollCtrl__Direction
/// </summary>
public enum  GuiAutoScrollCtrl__Direction{
/// <summary>
/// 
/// </summary>

 Up,
/// <summary>
/// 
/// </summary>

 Down,
/// <summary>
/// 
/// </summary>

 Left,
/// <summary>
/// 
/// </summary>

 Right
 };

/// <summary>
/// GuiFrameSetCtrl__FrameState
/// </summary>
public enum  GuiFrameSetCtrl__FrameState{
/// <summary>
/// 
/// </summary>

 FRAME_STATE_ON,
/// <summary>
/// 
/// </summary>
 FRAME_STATE_OFF,
/// <summary>
/// 
/// </summary>
 FRAME_STATE_AUTO,
/// <summary>
/// 
/// </summary>
 
 NO_HIT = -1,
/// <summary>
/// 
/// </summary>


 DEFAULT_BORDER_WIDTH = 4,
/// <summary>
/// 
/// </summary>

 DEFAULT_COLUMNS = 1,
/// <summary>
/// 
/// </summary>

 DEFAULT_ROWS = 1,
/// <summary>
/// 
/// </summary>

 DEFAULT_MIN_FRAME_EXTENT = 64
 };

/// <summary>
/// GuiScrollCtrl__ScrollBarBehavior
/// </summary>
public enum  GuiScrollCtrl__ScrollBarBehavior{
/// <summary>
/// 
/// </summary>

 ScrollBarAlwaysOn = 0,
/// <summary>
/// 
/// </summary>

 ScrollBarAlwaysOff = 1,
/// <summary>
/// 
/// </summary>

 ScrollBarDynamic = 2
 };

/// <summary>
/// GuiSplitContainer__Orientation
/// </summary>
public enum  GuiSplitContainer__Orientation{
/// <summary>
/// 
/// </summary>

 Vertical = 0,
/// <summary>
/// 
/// </summary>

 Horizontal = 1
 };

/// <summary>
/// GuiSplitContainer__FixedPanel
/// </summary>
public enum  GuiSplitContainer__FixedPanel{
/// <summary>
/// 
/// </summary>

 None = 0,
/// <summary>
/// 
/// </summary>

 FirstPanel = 1,
/// <summary>
/// 
/// </summary>

 SecondPanel
 };

/// <summary>
/// GuiStackControl__StackingType
/// </summary>
public enum  GuiStackControl__StackingType{
/// <summary>
/// 
/// </summary>

 stackingTypeVert,
/// <summary>
/// 
/// </summary>
 stackingTypeHoriz,
/// <summary>
/// 
/// </summary>
 stackingTypeDyn };

/// <summary>
/// GuiStackControl__HorizontalType
/// </summary>
public enum  GuiStackControl__HorizontalType{
/// <summary>
/// 
/// </summary>

 horizStackLeft = 0,
/// <summary>
/// 
/// </summary>
 horizStackRight,
/// <summary>
/// 
/// </summary>
 };

/// <summary>
/// GuiStackControl__VerticalType
/// </summary>
public enum  GuiStackControl__VerticalType{
/// <summary>
/// 
/// </summary>

 vertStackTop,
/// <summary>
/// 
/// </summary>
 vertStackBottom,
/// <summary>
/// 
/// </summary>
 };

/// <summary>
/// GuiTabBookCtrl__TabPosition
/// </summary>
public enum  GuiTabBookCtrl__TabPosition{
/// <summary>
/// 
/// </summary>

 AlignTop,
/// <summary>
/// 
/// </summary>
 AlignBottom };

/// <summary>
/// GuiColorPickerCtrl__PickMode
/// </summary>
public enum  GuiColorPickerCtrl__PickMode{
/// <summary>
/// 
/// </summary>

 pPallet = 0,
/// <summary>
/// 
/// </summary>
		 pHorizColorRange,
/// <summary>
/// 
/// </summary>
		 pVertColorRange,
/// <summary>
/// 
/// </summary>
		 pHorizColorBrightnessRange,
/// <summary>
/// 
/// </summary>
 pVertColorBrightnessRange,
/// <summary>
/// 
/// </summary>
 pBlendColorRange,
/// <summary>
/// 
/// </summary>
		 pHorizAlphaRange,
/// <summary>
/// 
/// </summary>
		 pVertAlphaRange,
/// <summary>
/// 
/// </summary>
		 pDropperBackground		 };

/// <summary>
/// GuiGradientCtrl__PickMode
/// </summary>
public enum  GuiGradientCtrl__PickMode{
/// <summary>
/// 
/// </summary>

		pHorizColorRange,
/// <summary>
/// 
/// </summary>
				pHorizAlphaRange,
/// <summary>
/// 
/// </summary>
		 };

/// <summary>
/// GuiControl__horizSizingOptions
/// </summary>
public enum  GuiControl__horizSizingOptions{
/// <summary>
/// 
/// </summary>

 horizResizeRight = 0,
/// <summary>
/// 
/// </summary>
 horizResizeWidth,
/// <summary>
/// 
/// </summary>
 horizResizeLeft,
/// <summary>
/// 
/// </summary>
 horizResizeCenter,
/// <summary>
/// 
/// </summary>

 horizResizeRelative,
/// <summary>
/// 
/// </summary>
 horizResizeWindowRelative };

/// <summary>
/// GuiControl__vertSizingOptions
/// </summary>
public enum  GuiControl__vertSizingOptions{
/// <summary>
/// 
/// </summary>

 vertResizeBottom = 0,
/// <summary>
/// 
/// </summary>
 vertResizeHeight,
/// <summary>
/// 
/// </summary>
 vertResizeTop,
/// <summary>
/// 
/// </summary>
 vertResizeCenter,
/// <summary>
/// 
/// </summary>

 vertResizeRelative,
/// <summary>
/// 
/// </summary>
 vertResizeWindowRelative };

/// <summary>
/// Docking__DockingType
/// </summary>
public enum  Docking__DockingType: uint {
/// <summary>
/// 
/// </summary>

 dockNone = 0x00000000,
/// <summary>
/// 
/// </summary>
 dockClient = 0x00000001,
/// <summary>
/// 
/// </summary>
 dockTop = 0x00000002,
/// <summary>
/// 
/// </summary>
 dockBottom = 0x00000004,
/// <summary>
/// 
/// </summary>
 dockLeft = 0x00000008,
/// <summary>
/// 
/// </summary>
 dockRight = 0x00000010,
/// <summary>
/// 
/// </summary>
 dockInvalid = 0x00000020,
/// <summary>
/// 
/// </summary>
 dockAny = dockClient | dockTop | dockBottom | dockLeft | dockRight
 };

/// <summary>
/// GuiControlProfile__AlignmentType
/// </summary>
public enum  GuiControlProfile__AlignmentType{
/// <summary>
/// 
/// </summary>

 LeftJustify,
/// <summary>
/// 
/// </summary>

 RightJustify,
/// <summary>
/// 
/// </summary>

 CenterJustify,
/// <summary>
/// 
/// </summary>

 TopJustify,
/// <summary>
/// 
/// </summary>

 BottomJustify
 };

/// <summary>
/// GuiSeparatorCtrl__separatorTypeOptions
/// </summary>
public enum  GuiSeparatorCtrl__separatorTypeOptions{
/// <summary>
/// 
/// </summary>

 separatorTypeVertical = 0,
/// <summary>
/// 
/// </summary>
 separatorTypeHorizontal };

/// <summary>
/// GizmoMode
/// </summary>
public enum  GizmoMode{
/// <summary>
/// 
/// </summary>

 NoneMode = 0,
/// <summary>
/// 
/// </summary>

 MoveMode,
/// <summary>
/// 
/// </summary>
 RotateMode,
/// <summary>
/// 
/// </summary>
 ScaleMode,
/// <summary>
/// 
/// </summary>
 ModeEnumCount 
};

/// <summary>
/// GizmoAlignment
/// </summary>
public enum  GizmoAlignment{
/// <summary>
/// 
/// </summary>

 World = 0,
/// <summary>
/// 
/// </summary>

 Object,
/// <summary>
/// 
/// </summary>

 AlignEnumCount
};

/// <summary>
/// WorldEditor__DropType
/// </summary>
public enum  WorldEditor__DropType{
/// <summary>
/// 
/// </summary>

 DropAtOrigin = 0,
/// <summary>
/// 
/// </summary>

 DropAtCamera,
/// <summary>
/// 
/// </summary>

 DropAtCameraWithRot,
/// <summary>
/// 
/// </summary>

 DropBelowCamera,
/// <summary>
/// 
/// </summary>

 DropAtScreenCenter,
/// <summary>
/// 
/// </summary>

 DropAtCentroid,
/// <summary>
/// 
/// </summary>

 DropToTerrain,
/// <summary>
/// 
/// </summary>

 DropBelowSelection
 };

/// <summary>
/// Material__BlendOp
/// </summary>
public enum  Material__BlendOp{
/// <summary>
/// 
/// </summary>

 None = 0,
/// <summary>
/// 
/// </summary>

 Mul,
/// <summary>
/// 
/// </summary>

 Add,
/// <summary>
/// 
/// </summary>

 AddAlpha,
/// <summary>
/// 
/// </summary>
 Sub,
/// <summary>
/// 
/// </summary>

 LerpAlpha,
/// <summary>
/// 
/// </summary>
 ToneMap,
/// <summary>
/// 
/// </summary>

 NumBlendTypes
 };

/// <summary>
/// Material__AnimType
/// </summary>
public enum  Material__AnimType{
/// <summary>
/// 
/// </summary>

 Scroll = 1,
/// <summary>
/// 
/// </summary>

 Rotate = 2,
/// <summary>
/// 
/// </summary>

 Wave = 4,
/// <summary>
/// 
/// </summary>

 Scale = 8,
/// <summary>
/// 
/// </summary>

 Sequence = 16,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// Material__WaveType
/// </summary>
public enum  Material__WaveType{
/// <summary>
/// 
/// </summary>

 Sin = 0,
/// <summary>
/// 
/// </summary>

 Triangle,
/// <summary>
/// 
/// </summary>

 Square,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// FontCharset
/// </summary>
public enum  FontCharset{
/// <summary>
/// 
/// </summary>

 TGE_ANSI_CHARSET = 0,
/// <summary>
/// 
/// </summary>

 TGE_SYMBOL_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_SHIFTJIS_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_HANGEUL_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_HANGUL_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_GB2312_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_CHINESEBIG5_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_OEM_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_JOHAB_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_HEBREW_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_ARABIC_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_GREEK_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_TURKISH_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_VIETNAMESE_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_THAI_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_EASTEUROPE_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_RUSSIAN_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_MAC_CHARSET,
/// <summary>
/// 
/// </summary>

 TGE_BALTIC_CHARSET
};

/// <summary>
/// PFXRenderTime
/// </summary>
public enum  PFXRenderTime{
/// <summary>
/// 
/// </summary>

 PFXBeforeBin,
/// <summary>
/// 
/// </summary>


 PFXAfterBin,
/// <summary>
/// 
/// </summary>


 PFXAfterDiffuse,
/// <summary>
/// 
/// </summary>


 PFXEndOfFrame,
/// <summary>
/// 
/// </summary>


 PFXTexGenOnDemand
};

/// <summary>
/// PFXTargetClear
/// </summary>
public enum  PFXTargetClear{
/// <summary>
/// 
/// </summary>

 PFXTargetClear_None,
/// <summary>
/// 
/// </summary>


 PFXTargetClear_OnCreate,
/// <summary>
/// 
/// </summary>


 PFXTargetClear_OnDraw,
/// <summary>
/// 
/// </summary>

};

/// <summary>
/// ParticleRenderInst__BlendStyle
/// </summary>
public enum  ParticleRenderInst__BlendStyle{
/// <summary>
/// 
/// </summary>

 BlendUndefined = 0,
/// <summary>
/// 
/// </summary>

 BlendNormal,
/// <summary>
/// 
/// </summary>

 BlendAdditive,
/// <summary>
/// 
/// </summary>

 BlendSubtractive,
/// <summary>
/// 
/// </summary>

 BlendPremultAlpha,
/// <summary>
/// 
/// </summary>

 BlendGreyscale,
/// <summary>
/// 
/// </summary>

 BlendStyle_COUNT,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// Marker__SmoothingType
/// </summary>
public enum  Marker__SmoothingType{
/// <summary>
/// 
/// </summary>

 SmoothingTypeLinear,
/// <summary>
/// 
/// </summary>

 SmoothingTypeSpline,
/// <summary>
/// 
/// </summary>

 SmoothingTypeAccelerate,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// Marker__KnotType
/// </summary>
public enum  Marker__KnotType{
/// <summary>
/// 
/// </summary>

 KnotTypeNormal,
/// <summary>
/// 
/// </summary>

 KnotTypePositionOnly,
/// <summary>
/// 
/// </summary>

 KnotTypeKink,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// SFXChannel
/// </summary>
public enum  SFXChannel{
/// <summary>
/// 
/// </summary>

 SFXChannelVolume,
/// <summary>
/// 
/// </summary>

 SFXChannelPitch,
/// <summary>
/// 
/// </summary>

 SFXChannelPriority,
/// <summary>
/// 
/// </summary>

 SFXChannelPositionX,
/// <summary>
/// 
/// </summary>

 SFXChannelPositionY,
/// <summary>
/// 
/// </summary>

 SFXChannelPositionZ,
/// <summary>
/// 
/// </summary>

 SFXChannelRotationX,
/// <summary>
/// 
/// </summary>

 SFXChannelRotationY,
/// <summary>
/// 
/// </summary>

 SFXChannelRotationZ,
/// <summary>
/// 
/// </summary>

 SFXChannelVelocityX,
/// <summary>
/// 
/// </summary>

 SFXChannelVelocityY,
/// <summary>
/// 
/// </summary>

 SFXChannelVelocityZ,
/// <summary>
/// 
/// </summary>

 SFXChannelMinDistance,
/// <summary>
/// 
/// </summary>

 SFXChannelMaxDistance,
/// <summary>
/// 
/// </summary>

 SFXChannelConeInsideAngle,
/// <summary>
/// 
/// </summary>

 SFXChannelConeOutsideAngle,
/// <summary>
/// 
/// </summary>

 SFXChannelConeOutsideVolume,
/// <summary>
/// 
/// </summary>

 SFXChannelCursor,
/// <summary>
/// 
/// </summary>

 SFXChannelStatus,
/// <summary>
/// 
/// </summary>

 SFXChannelUser0,
/// <summary>
/// 
/// </summary>

 SFXChannelUser1,
/// <summary>
/// 
/// </summary>

 SFXChannelUser2,
/// <summary>
/// 
/// </summary>

 SFXChannelUser3,
/// <summary>
/// 
/// </summary>

 
 SFX_NUM_CHANNELS
};

/// <summary>
/// SFXPlayList__ELoopMode
/// </summary>
public enum  SFXPlayList__ELoopMode{
/// <summary>
/// 
/// </summary>

 LOOP_All,
/// <summary>
/// 
/// </summary>


 LOOP_Single,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// SFXPlayList__ERandomMode
/// </summary>
public enum  SFXPlayList__ERandomMode{
/// <summary>
/// 
/// </summary>

 RANDOM_NotRandom,
/// <summary>
/// 
/// </summary>

 
 RANDOM_StrictRandom,
/// <summary>
/// 
/// </summary>

 
 RANDOM_OrderedRandom,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// SFXPlayList__ETransitionMode
/// </summary>
public enum  SFXPlayList__ETransitionMode{
/// <summary>
/// 
/// </summary>

 TRANSITION_None,
/// <summary>
/// 
/// </summary>


 TRANSITION_Wait,
/// <summary>
/// 
/// </summary>

 
 TRANSITION_WaitAll,
/// <summary>
/// 
/// </summary>


 TRANSITION_Stop,
/// <summary>
/// 
/// </summary>

 
 TRANSITION_StopAll,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// SFXPlayList__EReplayMode
/// </summary>
public enum  SFXPlayList__EReplayMode{
/// <summary>
/// 
/// </summary>

 REPLAY_IgnorePlaying,
/// <summary>
/// 
/// </summary>

 
 REPLAY_RestartPlaying,
/// <summary>
/// 
/// </summary>

 
 REPLAY_KeepPlaying,
/// <summary>
/// 
/// </summary>

 
 REPLAY_StartNew,
/// <summary>
/// 
/// </summary>


 REPLAY_SkipIfPlaying,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// SFXPlayList__EStateMode
/// </summary>
public enum  SFXPlayList__EStateMode{
/// <summary>
/// 
/// </summary>

 STATE_StopInactive,
/// <summary>
/// 
/// </summary>

 
 STATE_PauseInactive,
/// <summary>
/// 
/// </summary>

 
 STATE_IgnoreInactive,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// TypeSFXDistanceModel
/// </summary>
public enum  TypeSFXDistanceModel{

/// <summary>
/// Linear
/// </summary>
Linear, 
/// <summary>
/// Logarithmic
/// </summary>
Logarithmic, };

/// <summary>
/// Item__LightType
/// </summary>
public enum  Item__LightType{
/// <summary>
/// 
/// </summary>

 NoLight = 0,
/// <summary>
/// 
/// </summary>

 ConstantLight,
/// <summary>
/// 
/// </summary>

 PulsingLight,
/// <summary>
/// 
/// </summary>


 NumLightTypes,
/// <summary>
/// 
/// </summary>

 };

/// <summary>
/// PhysicsShapeData__SimType
/// </summary>
public enum  PhysicsShapeData__SimType{
/// <summary>
/// 
/// </summary>

 SimType_ClientOnly,
/// <summary>
/// 
/// </summary>


 SimType_ServerOnly,
/// <summary>
/// 
/// </summary>


 SimType_ClientServer,
/// <summary>
/// 
/// </summary>


 SimType_Bits = 3,
/// <summary>
/// 
/// </summary>


 };

/// <summary>
/// ShapeBaseImageData__LightType
/// </summary>
public enum  ShapeBaseImageData__LightType{
/// <summary>
/// 
/// </summary>

 NoLight = 0,
/// <summary>
/// 
/// </summary>

 ConstantLight,
/// <summary>
/// 
/// </summary>

 SpotLight,
/// <summary>
/// 
/// </summary>

 PulsingLight,
/// <summary>
/// 
/// </summary>

 WeaponFireLight,
/// <summary>
/// 
/// </summary>

 NumLightTypes
 };

/// <summary>
/// ShapeBaseImageData__StateData__LoadedState
/// </summary>
public enum  ShapeBaseImageData__StateData__LoadedState{
/// <summary>
/// 
/// </summary>

 IgnoreLoaded,
/// <summary>
/// 
/// </summary>
 Loaded,
/// <summary>
/// 
/// </summary>
 NotLoaded,
/// <summary>
/// 
/// </summary>
 NumLoadedBits = 3 };

/// <summary>
/// ShapeBaseImageData__StateData__SpinState
/// </summary>
public enum  ShapeBaseImageData__StateData__SpinState{
/// <summary>
/// 
/// </summary>

 IgnoreSpin,
/// <summary>
/// 
/// </summary>
 NoSpin,
/// <summary>
/// 
/// </summary>
 SpinUp,
/// <summary>
/// 
/// </summary>
 SpinDown,
/// <summary>
/// 
/// </summary>
 FullSpin,
/// <summary>
/// 
/// </summary>
 NumSpinBits = 3 };

/// <summary>
/// ShapeBaseImageData__StateData__RecoilState
/// </summary>
public enum  ShapeBaseImageData__StateData__RecoilState{
/// <summary>
/// 
/// </summary>

 NoRecoil,
/// <summary>
/// 
/// </summary>

 LightRecoil,
/// <summary>
/// 
/// </summary>

 MediumRecoil,
/// <summary>
/// 
/// </summary>

 HeavyRecoil,
/// <summary>
/// 
/// </summary>

 NumRecoilBits = 3
 };

/// <summary>
/// TypeTSMeshType
/// </summary>
public enum  TypeTSMeshType{

/// <summary>
/// None
/// </summary>
None, 
/// <summary>
/// Bounds
/// </summary>
Bounds, 
/// <summary>
/// Collisionzz_zzMesh
/// </summary>
Collisionzz_zzMesh, 
/// <summary>
/// Visiblezz_zzMesh
/// </summary>
Visiblezz_zzMesh, };

/// <summary>
/// TurretShapeData__FireLinkType
/// </summary>
public enum  TurretShapeData__FireLinkType{
/// <summary>
/// 
/// </summary>

 FireTogether,
/// <summary>
/// 
/// </summary>
 GroupedFire,
/// <summary>
/// 
/// </summary>
 IndividualFire,
/// <summary>
/// 
/// </summary>
 NumFireLinkTypeBits = 2
 };

/// <summary>
/// ColladaUtils__ImportOptions__eLodType
/// </summary>
public enum  ColladaUtils__ImportOptions__eLodType{
/// <summary>
/// 
/// </summary>

 DetectDTS = 0,
/// <summary>
/// 
/// </summary>

 SingleSize,
/// <summary>
/// 
/// </summary>

 TrailingNumber,
/// <summary>
/// 
/// </summary>

 NumLodTypes
 };
}
